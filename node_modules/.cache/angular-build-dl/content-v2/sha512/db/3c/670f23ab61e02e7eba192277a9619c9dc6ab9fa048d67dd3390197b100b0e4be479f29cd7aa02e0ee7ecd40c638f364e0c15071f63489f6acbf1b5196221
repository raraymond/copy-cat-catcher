{"version":3,"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/drag-drop.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/button-toggle.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/dialog.js","webpack:///src/app/kanban/board-list/board-list.component.ts","webpack:///src/app/kanban/board-list/board-list.component.html","webpack:///src/app/kanban/board.service.ts","webpack:///src/app/kanban/board/board.component.ts","webpack:///src/app/kanban/board/board.component.html","webpack:///src/app/kanban/dialogs/board-dialog.component.ts","webpack:///src/app/kanban/dialogs/task-dialog.component.ts","webpack:///src/app/kanban/kanban-routing.module.ts","webpack:///src/app/kanban/kanban.module.ts"],"names":["DragCSSStyleDeclaration","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","map","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","top","right","bottom","left","width","height","isInsideClientRect","x","y","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ScrollPosition","ParentPositionTracker","_document","_viewportRuler","positions","Map","clear","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","event","target","cachedPosition","get","scrolledParentNode","documentElement","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","position","node","contains","DragRefConfig","passiveEventListenerOptions","passive","activeEventListenerOptions","MOUSE_EVENT_IGNORE_TIME","DragRefInternal","DragHelperTemplate","DragPreviewTemplate","Point","DragRef","_config","_ngZone","_dragDropRegistry","_passiveTransform","_activeTransform","_moveEvents","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","asObservable","_pointerDown","next","length","targetHandle","handle","has","disabled","_initializeDragSequence","_rootElement","_pointerMove","preventDefault","pointerPosition","_getPointerPositionOnPage","_hasStartedDragging","distanceX","Math","abs","_pickupPositionOnPage","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","_endDragSequence","_dropContainer","isDragging","run","_startDragSequence","_previewRect","_preview","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","_applyRootElementTransform","SVGElement","appliedTransform","setAttribute","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","withRootElement","_parentPositions","registerDragItem","_placeholder","getPlaceholderElement","getRootElement","handles","_toggleNativeDragInteractions","template","_previewTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","transform","add","direction","container","_pointerPositionAtLastDirectionChange","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","isTouchEvent","_lastTouchEventTime","dropContainer","parent","parentNode","preview","_createPreviewElement","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","display","body","appendChild","replaceChild","getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","cache","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","type","pointerMove","pointerUp","scroll","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","getTransform","previewConfig","previewClass","rootRect","viewRef","viewContainer","createEmbeddedView","context","detectChanges","getRootNode","matchElementSize","deepCloneNode","pointerEvents","margin","zIndex","classList","Array","isArray","className","Promise","resolve","placeholderRect","duration","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","constrainedPoint","constrainPosition","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","clamp","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","setFreeDragPosition","touch","mouse","scrollDifference","handleScroll","newValue","round","clone","cloneNode","descendantsWithId","querySelectorAll","descendantCanvases","removeAttribute","i","cloneCanvases","correspondingCloneContext","getContext","drawImage","min","max","removeChild","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp$1","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","AUTO_SCROLL_STEP","CachedItemPosition","AutoScrollVerticalDirection","NONE","UP","DOWN","AutoScrollHorizontalDirection","LEFT","RIGHT","DropListRefInternal","DropListRef","autoScrollDisabled","enterPredicate","sorted","_isDragging","_itemPositions","_previousSwap","drag","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_cachedShadowRoot","_startScrollInterval","pipe","_scrollNode","incrementVerticalScroll","incrementHorizontalScroll","withScrollableParents","registerDropContainer","removeDropContainer","styles","_initialScrollSnap","msScrollSnapType","scrollSnapType","_cacheItems","sibling","_startReceiving","_listenToScrollEvents","index","newIndex","_draggables","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","parentElement","_shouldEnterAsFirstChild","unshift","push","_cacheItemPositions","_cacheParentPositions","_reset","items","previousItems","_withDropContainer","draggedItems","filter","every","connectedTo","slice","orientation","_scrollableElements","reverse","findIndex","currentItem","size","pointerDelta","_clientRect","siblings","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","isDraggedItem","offset","elementToOffset","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","window","elementToMeasure","getVisibleElement","sort","a","b","_stopReceiving","immediateSibling","end","itemPositions","reversed","lastItemRect","firstItemRect","_","floor","_canReceive","elementFromPoint","_getShadowRoot","nativeElement","activeSiblings","_sortFromLastPointerPosition","isReceiving","shadowRoot","predicate","amount","scrollBy","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","clientWidth","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_preventDefaultWhileDragging","startsWith","moveEvent","upEvent","e","options","config","_clearGlobalListeners","instance","ɵfac","DragDropRegistry_Factory","t","ctorParameters","decorators","args","ɵprov","factory","token","providedIn","DEFAULT_CONFIG","DragDrop","DragDrop_Factory","CdkDragStart","CdkDragRelease","CdkDragEnd","CdkDragEnter","CdkDragExit","CdkDragDrop","CdkDragMove","CdkDragSortEvent","CDK_DRAG_PARENT","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","CdkDragHandle_Factory","ɵdir","selectors","hostAttrs","inputs","propDecorators","selector","host","CdkDragPlaceholder","templateRef","CdkDragPlaceholder_Factory","data","CdkDragPreview","_matchSize","CdkDragPreview_Factory","CDK_DRAG_CONFIG","DragDropConfig","CDK_DRAG_CONFIG_FACTORY","CDK_DROP_LIST","CdkDrag","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_destroyed","observer","subscription","_dragRef","movedEvent","createDrag","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","reset","getFreeDragPosition","onStable","_updateRootElement","changes","childHandleElements","withHandles","handleInstance","dragRef","disableHandle","enableHandle","freeDragPosition","rootSelectorChange","positionChange","firstChange","removeItem","dispose","rootElementSelector","getClosestMatchingAncestor","Error","nodeName","boundary","ref","dir","withBoundaryElement","_getBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","withDirection","emit","markForCheck","draggingDisabled","CdkDrag_Factory","contentQueries","CdkDrag_ContentQueries","rf","ctx","dirIndex","_t","first","hostVars","hostBindings","CdkDrag_HostBindings","outputs","exportAs","features","provide","useExisting","descendants","providers","currentElement","matches","msMatchesSelector","CdkDropListGroup","_items","CdkDropListGroup_Factory","_uniqueIdCounter","CdkDropListInternal","ɵ0","CdkDropList","_group","_scrollDispatcher","id","_unsortedItems","createDropList","_setupInputSyncSubscription","_dropLists","_syncItemsWithRef","documentPosition","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","withOrientation","listAutoScrollDisabled","listOrientation","withItems","getSortedItems","CdkDropList_Factory","CdkDropList_HostBindings","useValue","DragDropModule","ɵmod","ɵinj","DragDropModule_Factory","imports","ngJitMode","declarations","exports","_c0","_c1","MatButtonToggleDefaultOptions","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","multi","MatButtonToggleGroupMultiple","MatButtonToggleChange","_changeDetector","defaultOptions","_vertical","_multiple","_controlValueAccessorChangeFn","_onTouched","_name","valueChange","appearance","_selectionModel","multiple","select","_buttonToggles","toggle","checked","fn","isDisabled","selected","isUserInput","deferEvents","deselect","_updateModelValue","isSelected","_rawValue","some","_clearSelection","currentValue","_selectValue","correspondingOption","_emitChangeEvent","_markForCheck","_setSelectionByValue","MatButtonToggleGroup_Factory","MatButtonToggleGroup_ContentQueries","MatButtonToggle","MatButtonToggleGroup_HostBindings","vertical","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_elementRef","_focusMonitor","defaultTabIndex","_isSingleSelector","_checked","ariaLabelledby","parsedTabIndex","Number","tabIndex","buttonToggleGroup","group","_type","_isPrechecked","_isSelected","_syncButtonToggle","monitor","stopMonitoring","_buttonElement","focus","newChecked","_appearance","MatButtonToggle_Factory","ɵcmp","viewQuery","MatButtonToggle_Query","MatButtonToggle_HostBindings","MatButtonToggle_focus_HostBindingHandler","disableRipple","ariaLabel","ngContentSelectors","decls","vars","consts","MatButtonToggle_Template","MatButtonToggle_Template_button_click_0_listener","_onButtonClick","_r0","buttonId","directives","encapsulation","changeDetection","String","None","OnPush","MatButtonToggleModule","MatButtonToggleModule_Factory","MatDialogContainer_ng_template_0_Template","DialogPosition","MatDialogConfig","role","panelClass","hasBackdrop","backdropClass","disableClose","maxWidth","ariaDescribedBy","ariaLabelledBy","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","dialogContainer","opacity","throwMatDialogContentAlreadyAttachedError","MatDialogContainer","_focusTrapFactory","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","attachDomPortal","portal","_portalOutlet","hasAttached","_savePreviouslyFocusedElement","_ariaLabelledBy","attachComponentPortal","attachTemplatePortal","_containsFocus","focusWasTrapped","_getFocusTrap","focusInitialElement","focusInitialElementWhenReady","toFocus","activeElement","_focusTrap","create","toState","_trapFocus","_restoreFocus","MatDialogContainer_Factory","MatDialogContainer_Query","MatDialogContainer_HostBindings","MatDialogContainer_animation_dialogContainer_start_HostBindingHandler","$event","_onAnimationStart","MatDialogContainer_animation_dialogContainer_done_HostBindingHandler","_onAnimationDone","_id","MatDialogContainer_Template","animation","Default","animations","uniqueId","MatDialogState","OPEN","CLOSING","CLOSED","MatDialogRef","_overlayRef","_containerInstance","_afterOpened","_afterClosed","_beforeClosed","phaseName","_closeFallbackTimeout","_finishDialogClose","detachments","_result","componentInstance","keydownEvents","keyCode","close","backdropClick","_recaptureFocus","dialogResult","detachBackdrop","totalTime","_startExitAnimation","strategy","_getPositionStrategy","centerHorizontally","centerVertically","updatePosition","classes","addPanelClass","removePanelClass","getConfig","positionStrategy","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","deps","useFactory","MatDialog","_overlay","_injector","_location","_defaultOptions","scrollStrategy","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","_scrollStrategy","componentOrTemplateRef","_applyConfigDefaults","getDialogById","overlayRef","_createOverlay","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","afterClosed","_removeOpenDialog","afterOpened","_closeDialogs","dialog","overlayConfig","_getOverlayConfig","dialogConfig","state","global","minWidth","minHeight","maxHeight","disposeOnNavigation","userInjector","viewContainerRef","injector","containerPortal","componentFactoryResolver","containerRef","attach","$implicit","_createInjector","contentRef","updateSize","previousValue","overlayContainer","getContainerElement","children","hasAttribute","getAttribute","dialogs","MatDialog_Factory","Object","assign","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","MatDialogClose_Factory","MatDialogClose_HostBindings","MatDialogClose_click_HostBindingHandler","_matDialogClose","MatDialogTitle","_dialogRef","MatDialogTitle_Factory","MatDialogTitle_HostBindings","MatDialogContent","MatDialogContent_Factory","MatDialogActions","MatDialogActions_Factory","MatDialogModule","MatDialogModule_Factory","entryComponents","BoardListComponent","boardService","sub","getUserBoards","boards","sortBoards","open","result","createBoard","title","priority","openBoardDialog","templateUrl","styleUrls","BoardService","afAuth","db","currentUser","user","collection","uid","tasks","description","label","boardId","doc","update","task","FieldValue","arrayRemove","authState","where","orderBy","valueChanges","idField","batch","refs","idx","commit","BoardComponent","board","updateTasks","newTask","isNew","deleteBoard","taskDrop","openDialog","handleDelete","BoardDialogComponent","onNoClick","TaskDialogComponent","ps","labelOptions","removeTask","routes","path","component","KanbanRoutingModule","forChild","KanbanModule"],"mappingsaAASA,uBAAT,GAAmC,CAAG;;AACtC,QAAI,KAAJ,EAAW,CAKV;AACD;;;;;;;;;AAOA,aAASC,YAAT,CAAsBC,IAAtB,EAA4BC,MAA5B,EAAoC;AAChC,WAAK,IAAIC,GAAT,IAAgBD,MAAhB,EAAwB;AACpB,YAAIA,MAAM,CAACE,cAAP,CAAsBD,GAAtB,CAAJ,EAAgC;AAC5BF,cAAI,CAACE,GAAD,CAAJ;AAAa;AAAkBD,gBAAM,CAACC,GAAD,CAArC;AACH;AACJ;;AACD,aAAOF,IAAP;AACH;AACD;;;;;;;;;AAOA,aAASI,4BAAT,CAAsCC,OAAtC,EAA+CC,MAA/C,EAAuD;AACnD;AACA,UAAMC,UAAU,GAAGD,MAAM,GAAG,EAAH,GAAQ,MAAjC;AACAP,kBAAY,CAACM,OAAO,CAACG,KAAT,EAAgB;AACxBC,mBAAW,EAAEH,MAAM,GAAG,EAAH,GAAQ,MADH;AAExBI,sBAAc,EAAEJ,MAAM,GAAG,EAAH,GAAQ,MAFN;AAGxBK,+BAAuB,EAAEL,MAAM,GAAG,EAAH,GAAQ,aAHf;AAIxBC,kBAAU,EAAEA,UAJY;AAKxBK,oBAAY,EAAEL,UALU;AAMxBM,wBAAgB,EAAEN,UANM;AAOxBO,qBAAa,EAAEP;AAPS,OAAhB,CAAZ;AASH;AAED;;;;;;AAKA;;;;;;;;AAOA;;;;;;;AAKA,aAASQ,qBAAT,CAA+BC,KAA/B,EAAsC;AAClC;;AACA;AACA,UAAMC,UAAU,GAAGD,KAAK,CAACE,WAAN,GAAoBC,OAApB,CAA4B,IAA5B,IAAoC,CAAC,CAArC,GAAyC,CAAzC,GAA6C,IAAhE;AACA,aAAOC,UAAU,CAACJ,KAAD,CAAV,GAAoBC,UAA3B;AACH;AACD;;;;;;;AAKA,aAASI,kCAAT,CAA4ChB,OAA5C,EAAqD;AACjD;AACA,UAAMiB,aAAa,GAAGC,gBAAgB,CAAClB,OAAD,CAAtC;AACA;;AACA,UAAMmB,sBAAsB,GAAGC,qBAAqB,CAACH,aAAD,EAAgB,qBAAhB,CAApD;AACA;;AACA,UAAMI,QAAQ,GAAGF,sBAAsB,CAACG,IAAvB;AAA6B;;;;AAI9C,gBAAAC,IAAI;AAAA,eAAIA,IAAI,KAAK,WAAT,IAAwBA,IAAI,KAAK,KAArC;AAAA,OAJa,CAAjB,CANiD,CAWjD;;AACA,UAAI,CAACF,QAAL,EAAe;AACX,eAAO,CAAP;AACH,OAdgD,CAejD;AACA;;AACA;;;AACA,UAAMG,aAAa,GAAGL,sBAAsB,CAACL,OAAvB,CAA+BO,QAA/B,CAAtB;AACA;;AACA,UAAMI,YAAY,GAAGL,qBAAqB,CAACH,aAAD,EAAgB,qBAAhB,CAA1C;AACA;;AACA,UAAMS,SAAS,GAAGN,qBAAqB,CAACH,aAAD,EAAgB,kBAAhB,CAAvC;AACA,aAAOP,qBAAqB,CAACe,YAAY,CAACD,aAAD,CAAb,CAArB,GACHd,qBAAqB,CAACgB,SAAS,CAACF,aAAD,CAAV,CADzB;AAEH;AACD;;;;;;;;AAMA,aAASJ,qBAAT,CAA+BH,aAA/B,EAA8CU,IAA9C,EAAoD;AAChD;AACA,UAAMhB,KAAK,GAAGM,aAAa,CAACW,gBAAd,CAA+BD,IAA/B,CAAd;AACA,aAAOhB,KAAK,CAACkB,KAAN,CAAY,GAAZ,EAAiBC,GAAjB;AAAsB;;;;AAI7B,gBAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,OAJG,CAAP;AAKH;AAED;;;;;;AAKA;;;;;;;;AAOA;;;;;;;AAKA,aAASC,oBAAT,CAA8BjC,OAA9B,EAAuC;AACnC;AACA,UAAMkC,UAAU,GAAGlC,OAAO,CAACmC,qBAAR,EAAnB,CAFmC,CAGnC;AACA;AACA;AACA;;AACA,aAAO;AACHC,WAAG,EAAEF,UAAU,CAACE,GADb;AAEHC,aAAK,EAAEH,UAAU,CAACG,KAFf;AAGHC,cAAM,EAAEJ,UAAU,CAACI,MAHhB;AAIHC,YAAI,EAAEL,UAAU,CAACK,IAJd;AAKHC,aAAK,EAAEN,UAAU,CAACM,KALf;AAMHC,cAAM,EAAEP,UAAU,CAACO;AANhB,OAAP;AAQH;AACD;;;;;;;;;AAOA,aAASC,kBAAT,CAA4BR,UAA5B,EAAwCS,CAAxC,EAA2CC,CAA3C,EAA8C;AAAA,UAClCR,GADkC,GACLF,UADK,CAClCE,GADkC;AAAA,UAC7BE,MAD6B,GACLJ,UADK,CAC7BI,MAD6B;AAAA,UACrBC,IADqB,GACLL,UADK,CACrBK,IADqB;AAAA,UACfF,KADe,GACLH,UADK,CACfG,KADe;AAE1C,aAAOO,CAAC,IAAIR,GAAL,IAAYQ,CAAC,IAAIN,MAAjB,IAA2BK,CAAC,IAAIJ,IAAhC,IAAwCI,CAAC,IAAIN,KAApD;AACH;AACD;;;;;;;;;AAOA,aAASQ,gBAAT,CAA0BX,UAA1B,EAAsCE,GAAtC,EAA2CG,IAA3C,EAAiD;AAC7CL,gBAAU,CAACE,GAAX,IAAkBA,GAAlB;AACAF,gBAAU,CAACI,MAAX,GAAoBJ,UAAU,CAACE,GAAX,GAAiBF,UAAU,CAACO,MAAhD;AACAP,gBAAU,CAACK,IAAX,IAAmBA,IAAnB;AACAL,gBAAU,CAACG,KAAX,GAAmBH,UAAU,CAACK,IAAX,GAAkBL,UAAU,CAACM,KAAhD;AACH;AACD;;;;;;;;;;AAQA,aAASM,uBAAT,CAAiCC,IAAjC,EAAuCC,SAAvC,EAAkDC,QAAlD,EAA4DC,QAA5D,EAAsE;AAAA,UAC1Dd,GAD0D,GACdW,IADc,CAC1DX,GAD0D;AAAA,UACrDC,KADqD,GACdU,IADc,CACrDV,KADqD;AAAA,UAC9CC,MAD8C,GACdS,IADc,CAC9CT,MAD8C;AAAA,UACtCC,IADsC,GACdQ,IADc,CACtCR,IADsC;AAAA,UAChCC,KADgC,GACdO,IADc,CAChCP,KADgC;AAAA,UACzBC,MADyB,GACdM,IADc,CACzBN,MADyB;AAElE;;AACA,UAAMU,UAAU,GAAGX,KAAK,GAAGQ,SAA3B;AACA;;AACA,UAAMI,UAAU,GAAGX,MAAM,GAAGO,SAA5B;AACA,aAAOE,QAAQ,GAAGd,GAAG,GAAGgB,UAAjB,IAA+BF,QAAQ,GAAGZ,MAAM,GAAGc,UAAnD,IACHH,QAAQ,GAAGV,IAAI,GAAGY,UADf,IAC6BF,QAAQ,GAAGZ,KAAK,GAAGc,UADvD;AAEH;AAED;;;;;;AAKA;;;;;;AAIA,aAASE,cAAT,GAA0B,CAAG;;AAC7B,QAAI,KAAJ,EAAW,CAKV;AACD;;;;;QAGMC,qB;AACF;;;;AAIA,qCAAYC,SAAZ,EAAuBC,cAAvB,EAAuC;AAAA;;AACnC,aAAKD,SAAL,GAAiBA,SAAjB;AACA,aAAKC,cAAL,GAAsBA,cAAtB;AACA;;;;AAGA,aAAKC,SAAL,GAAiB,IAAIC,GAAJ,EAAjB;AACH;AACD;;;;;;;;gCAIQ;AACJ,eAAKD,SAAL,CAAeE,KAAf;AACH;AACD;;;;;;;;8BAKMC,Q,EAAU;AAAA;;AACZ,eAAKD,KAAL;AACA,eAAKF,SAAL,CAAeI,GAAf,CAAmB,KAAKN,SAAxB,EAAmC;AAC/BO,0BAAc,EAAE,KAAKN,cAAL,CAAoBO,yBAApB;AADe,WAAnC;AAGAH,kBAAQ,CAACI,OAAT;AAAkB;;;;AAIlB,oBAAAhE,OAAO,EAAI;AACP,iBAAI,CAACyD,SAAL,CAAeI,GAAf,CAAmB7D,OAAnB,EAA4B;AACxB8D,4BAAc,EAAE;AAAE1B,mBAAG,EAAEpC,OAAO,CAACiE,SAAf;AAA0B1B,oBAAI,EAAEvC,OAAO,CAACkE;AAAxC,eADQ;AAExBhC,wBAAU,EAAED,oBAAoB,CAACjC,OAAD;AAFR,aAA5B;AAIH,WATD;AAUH;AACD;;;;;;;;qCAKamE,K,EAAO;AAChB;AACA,cAAMC,MAAM;AAAI;AAAkBD,eAAK,CAACC,MAAxC;AACA;;AACA,cAAMC,cAAc,GAAG,KAAKZ,SAAL,CAAea,GAAf,CAAmBF,MAAnB,CAAvB;;AACA,cAAI,CAACC,cAAL,EAAqB;AACjB,mBAAO,IAAP;AACH,WAPe,CAQhB;AACA;AACA;;AACA;;;AACA,cAAME,kBAAkB,GAAGH,MAAM,KAAK,KAAKb,SAAhB,GAA4Ba,MAAM,CAACI,eAAnC,GAAqDJ,MAAhF;AACA;;AACA,cAAMN,cAAc,GAAGO,cAAc,CAACP,cAAtC;AACA;;AACA,cAAIW,MAAJ;AACA;;AACA,cAAIC,OAAJ;;AACA,cAAIN,MAAM,KAAK,KAAKb,SAApB,EAA+B;AAC3B;AACA,gBAAMoB,sBAAsB;AAAI;AAAkB,iBAAKnB,cAAxB,CAAyCO,yBAAzC,EAA/B;;AACAU,kBAAM,GAAGE,sBAAsB,CAACvC,GAAhC;AACAsC,mBAAO,GAAGC,sBAAsB,CAACpC,IAAjC;AACH,WALD,MAMK;AACDkC,kBAAM;AAAK;AAAkBL,kBAApB,CAA8BH,SAAvC;AACAS,mBAAO;AAAK;AAAkBN,kBAApB,CAA8BF,UAAxC;AACH;AACD;;;AACA,cAAMU,aAAa,GAAGd,cAAc,CAAC1B,GAAf,GAAqBqC,MAA3C;AACA;;AACA,cAAMI,cAAc,GAAGf,cAAc,CAACvB,IAAf,GAAsBmC,OAA7C,CAhCgB,CAiChB;AACA;;AACA,eAAKjB,SAAL,CAAeO,OAAf;AAAwB;;;;;AAKxB,oBAACc,QAAD,EAAWC,IAAX,EAAoB;AAChB,gBAAID,QAAQ,CAAC5C,UAAT,IAAuBkC,MAAM,KAAKW,IAAlC,IAA0CR,kBAAkB,CAACS,QAAnB,CAA4BD,IAA5B,CAA9C,EAAiF;AAC7ElC,8BAAgB,CAACiC,QAAQ,CAAC5C,UAAV,EAAsB0C,aAAtB,EAAqCC,cAArC,CAAhB;AACH;AACJ,WATD;AAUAf,wBAAc,CAAC1B,GAAf,GAAqBqC,MAArB;AACAX,wBAAc,CAACvB,IAAf,GAAsBmC,OAAtB;AACA,iBAAO;AAAEtC,eAAG,EAAEwC,aAAP;AAAsBrC,gBAAI,EAAEsC;AAA5B,WAAP;AACH;;;;;;AAEL,QAAI,KAAJ,EAAW,CAgBV;AAED;;;;;;AAKA;;;;;;AAIA,aAASI,aAAT,GAAyB,CAAG;;AAC5B,QAAI,KAAJ,EAAW,CAkBV;AACD;;;;;;AAIA,QAAMC,2BAA2B,GAAG,8FAAgC;AAAEC,aAAO,EAAE;AAAX,KAAhC,CAApC;AACA;;;;;AAIA,QAAMC,0BAA0B,GAAG,8FAAgC;AAAED,aAAO,EAAE;AAAX,KAAhC,CAAnC;AACA;;;;;;;;AAOA,QAAME,uBAAuB,GAAG,GAAhC;AACA;;;;;;;AAMA,aAASC,eAAT,GAA2B,CAAG;AAC9B;;;;;;;AAKA,aAASC,kBAAT,GAA8B,CAAG;;AACjC,QAAI,KAAJ,EAAW,CAOV;AACD;;;;;;;AAKA,aAASC,mBAAT,GAA+B,CAAG;;AAClC,QAAI,KAAJ,EAAW,CAGV;AACD;;;;;;AAIA,aAASC,KAAT,GAAiB,CAAG;;AACpB,QAAI,KAAJ,EAAW,CAKV;AACD;;;;;;QAIMC,O;AACF;;;;;;;;AAQA,uBAAY1F,OAAZ,EAAqB2F,OAArB,EAA8BpC,SAA9B,EAAyCqC,OAAzC,EAAkDpC,cAAlD,EAAkEqC,iBAAlE,EAAqF;AAAA;;AAAA;;AACjF,aAAKF,OAAL,GAAeA,OAAf;AACA,aAAKpC,SAAL,GAAiBA,SAAjB;AACA,aAAKqC,OAAL,GAAeA,OAAf;AACA,aAAKpC,cAAL,GAAsBA,cAAtB;AACA,aAAKqC,iBAAL,GAAyBA,iBAAzB;AACA;;;;;;;AAMA,aAAKC,iBAAL,GAAyB;AAAEnD,WAAC,EAAE,CAAL;AAAQC,WAAC,EAAE;AAAX,SAAzB;AACA;;;;AAGA,aAAKmD,gBAAL,GAAwB;AAAEpD,WAAC,EAAE,CAAL;AAAQC,WAAC,EAAE;AAAX,SAAxB;AACA;;;;AAGA,aAAKoD,WAAL,GAAmB,IAAI,4CAAJ,EAAnB;AACA;;;;AAGA,aAAKC,wBAAL,GAAgC,kDAAaC,KAA7C;AACA;;;;AAGA,aAAKC,sBAAL,GAA8B,kDAAaD,KAA3C;AACA;;;;AAGA,aAAKE,mBAAL,GAA2B,kDAAaF,KAAxC;AACA;;;;AAGA,aAAKG,mBAAL,GAA2B,kDAAaH,KAAxC;AACA;;;;AAGA,aAAKI,gBAAL,GAAwB,IAAxB;AACA;;;;AAGA,aAAKC,0BAAL,GAAkC,IAAlC;AACA;;;;AAGA,aAAKC,QAAL,GAAgB,EAAhB;AACA;;;;AAGA,aAAKC,gBAAL,GAAwB,IAAIC,GAAJ,EAAxB;AACA;;;;AAGA,aAAKC,UAAL,GAAkB,KAAlB;AACA;;;;;AAIA,aAAKC,cAAL,GAAsB,CAAtB;AACA,aAAKC,SAAL,GAAiB,KAAjB;AACA;;;;AAGA,aAAKC,aAAL,GAAqB,IAAI,4CAAJ,EAArB;AACA;;;;AAGA,aAAKC,OAAL,GAAe,IAAI,4CAAJ,EAAf;AACA;;;;AAGA,aAAKC,QAAL,GAAgB,IAAI,4CAAJ,EAAhB;AACA;;;;AAGA,aAAKC,KAAL,GAAa,IAAI,4CAAJ,EAAb;AACA;;;;AAGA,aAAKC,OAAL,GAAe,IAAI,4CAAJ,EAAf;AACA;;;;AAGA,aAAKC,MAAL,GAAc,IAAI,4CAAJ,EAAd;AACA;;;;AAGA,aAAKC,OAAL,GAAe,IAAI,4CAAJ,EAAf;AACA;;;;;AAIA,aAAKC,KAAL,GAAa,KAAKrB,WAAL,CAAiBsB,YAAjB,EAAb;AACA;;;;AAGA,aAAKC,YAAL;AAAqB;;;;AAIrB,kBAACpD,KAAD,EAAW;AACP,gBAAI,CAAC2C,aAAL,CAAmBU,IAAnB,GADO,CAEP;;;AACA,cAAI,MAAI,CAAChB,QAAL,CAAciB,MAAlB,EAA0B;AACtB;AACA,gBAAMC,YAAY,GAAG,MAAI,CAAClB,QAAL,CAAclF,IAAd;AAAoB;;;;AAIzC,sBAAAqG,MAAM,EAAI;AACN;AACA,kBAAMvD,MAAM,GAAGD,KAAK,CAACC,MAArB;AACA,qBAAO,CAAC,CAACA,MAAF,KAAaA,MAAM,KAAKuD,MAAX,IAAqBA,MAAM,CAAC3C,QAAP;AAAiB;AAAkBZ,oBAAnC,CAAlC,CAAP;AACH,aARoB,CAArB;;AASA,gBAAIsD,YAAY,IAAI,CAAC,MAAI,CAACjB,gBAAL,CAAsBmB,GAAtB,CAA0BF,YAA1B,CAAjB,IAA4D,CAAC,MAAI,CAACG,QAAtE,EAAgF;AAC5E,oBAAI,CAACC,uBAAL,CAA6BJ,YAA7B,EAA2CvD,KAA3C;AACH;AACJ,WAdD,MAeK,IAAI,CAAC,MAAI,CAAC0D,QAAV,EAAoB;AACrB,kBAAI,CAACC,uBAAL,CAA6B,MAAI,CAACC,YAAlC,EAAgD5D,KAAhD;AACH;AACJ,SAzBD;AA0BA;;;;;AAGA,aAAK6D,YAAL;AAAqB;;;;AAIrB,kBAAC7D,KAAD,EAAW;AACP;AACA;AACAA,eAAK,CAAC8D,cAAN;AACA;;AACA,cAAMC,eAAe,GAAG,MAAI,CAACC,yBAAL,CAA+BhE,KAA/B,CAAxB;;AACA,cAAI,CAAC,MAAI,CAACiE,mBAAV,EAA+B;AAC3B;AACA,gBAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASL,eAAe,CAACvF,CAAhB,GAAoB,MAAI,CAAC6F,qBAAL,CAA2B7F,CAAxD,CAAlB;AACA;;AACA,gBAAM8F,SAAS,GAAGH,IAAI,CAACC,GAAL,CAASL,eAAe,CAACtF,CAAhB,GAAoB,MAAI,CAAC4F,qBAAL,CAA2B5F,CAAxD,CAAlB;AACA;;AACA,gBAAM8F,eAAe,GAAGL,SAAS,GAAGI,SAAZ,IAAyB,MAAI,CAAC9C,OAAL,CAAagD,kBAA9D,CAN2B,CAO3B;AACA;AACA;AACA;;AACA,gBAAID,eAAJ,EAAqB;AACjB;AACA,kBAAME,cAAc,GAAGC,IAAI,CAACC,GAAL,MAAc,MAAI,CAACC,cAAL,GAAsB,MAAI,CAACC,kBAAL,CAAwB7E,KAAxB,CAA3D;;AACA,kBAAI,CAACyE,cAAL,EAAqB;AACjB,sBAAI,CAACK,gBAAL,CAAsB9E,KAAtB;;AACA;AACH,eANgB,CAOjB;AACA;AACA;;;AACA,kBAAI,CAAC,MAAI,CAAC+E,cAAN,IAAwB,CAAC,MAAI,CAACA,cAAL,CAAoBC,UAApB,EAA7B,EAA+D;AAC3D,sBAAI,CAACf,mBAAL,GAA2B,IAA3B;;AACA,sBAAI,CAACxC,OAAL,CAAawD,GAAb;AAAkB;;;AAGlB;AAAA,yBAAM,MAAI,CAACC,kBAAL,CAAwBlF,KAAxB,CAAN;AAAA,iBAHA;AAIH;AACJ;;AACD;AACH,WApCM,CAqCP;;;AACA,cAAI,MAAI,CAACmC,gBAAT,EAA2B;AACvB;AACA;AACA,gBAAI,CAAC,MAAI,CAACgD,YAAN,IAAuB,CAAC,MAAI,CAACA,YAAL,CAAkB9G,KAAnB,IAA4B,CAAC,MAAI,CAAC8G,YAAL,CAAkB7G,MAA1E,EAAmF;AAC/E,oBAAI,CAAC6G,YAAL,GAAoB,CAAC,MAAI,CAACC,QAAL,IAAiB,MAAI,CAACxB,YAAvB,EAAqC5F,qBAArC,EAApB;AACH;AACJ;AACD;;;AACA,cAAMqH,0BAA0B,GAAG,MAAI,CAACC,8BAAL,CAAoCvB,eAApC,CAAnC;;AACA,gBAAI,CAACwB,SAAL,GAAiB,IAAjB;;AACA,gBAAI,CAACC,4BAAL,CAAkCH,0BAAlC;;AACA,cAAI,MAAI,CAACN,cAAT,EAAyB;AACrB,kBAAI,CAACU,0BAAL,CAAgCJ,0BAAhC;AACH,WAFD,MAGK;AACD;AACA,gBAAMK,eAAe,GAAG,MAAI,CAAC9D,gBAA7B;AACA8D,2BAAe,CAAClH,CAAhB,GACI6G,0BAA0B,CAAC7G,CAA3B,GAA+B,MAAI,CAAC6F,qBAAL,CAA2B7F,CAA1D,GAA8D,MAAI,CAACmD,iBAAL,CAAuBnD,CADzF;AAEAkH,2BAAe,CAACjH,CAAhB,GACI4G,0BAA0B,CAAC5G,CAA3B,GAA+B,MAAI,CAAC4F,qBAAL,CAA2B5F,CAA1D,GAA8D,MAAI,CAACkD,iBAAL,CAAuBlD,CADzF;;AAEA,kBAAI,CAACkH,0BAAL,CAAgCD,eAAe,CAAClH,CAAhD,EAAmDkH,eAAe,CAACjH,CAAnE,EAPC,CAQD;;;AACA,gBAAI,OAAOmH,UAAP,KAAsB,WAAtB,IAAqC,MAAI,CAAChC,YAAL,YAA6BgC,UAAtE,EAAkF;AAC9E;AACA,kBAAMC,gBAAgB,uBAAgBH,eAAe,CAAClH,CAAhC,cAAqCkH,eAAe,CAACjH,CAArD,MAAtB;;AACA,oBAAI,CAACmF,YAAL,CAAkBkC,YAAlB,CAA+B,WAA/B,EAA4CD,gBAA5C;AACH;AACJ,WAlEM,CAmEP;AACA;AACA;;;AACA,cAAI,MAAI,CAAChE,WAAL,CAAiBkE,SAAjB,CAA2BzC,MAA/B,EAAuC;AACnC,kBAAI,CAAC7B,OAAL,CAAawD,GAAb;AAAkB;;;AAGlB,wBAAM;AACF,oBAAI,CAACpD,WAAL,CAAiBwB,IAAjB,CAAsB;AAClB5H,sBAAM,EAAE,MADU;AAElBsI,+BAAe,EAAEsB,0BAFC;AAGlBrF,qBAAK,EAALA,KAHkB;AAIlBgG,wBAAQ,EAAE,MAAI,CAACC,gBAAL,CAAsBZ,0BAAtB,CAJQ;AAKlBa,qBAAK,EAAE,MAAI,CAACC;AALM,eAAtB;AAOH,aAXD;AAYH;AACJ,SAxFD;AAyFA;;;;;AAGA,aAAKC,UAAL;AAAmB;;;;AAInB,kBAACpG,KAAD,EAAW;AACP,gBAAI,CAAC8E,gBAAL,CAAsB9E,KAAtB;AACH,SAND;;AAOA,aAAKqG,eAAL,CAAqBxK,OAArB;AACA,aAAKyK,gBAAL,GAAwB,IAAInH,qBAAJ,CAA0BC,SAA1B,EAAqCC,cAArC,CAAxB;;AACAqC,yBAAiB,CAAC6E,gBAAlB,CAAmC,IAAnC;AACH;AACD;;;;;;;;;AAmBA;;;;;gDAKwB;AACpB,iBAAO,KAAKC,YAAZ;AACH;AACD;;;;;;;yCAIiB;AACb,iBAAO,KAAK5C,YAAZ;AACH;AACD;;;;;;;;4CAKoB;AAChB,iBAAO,KAAKoB,UAAL,KAAoB,KAAKyB,qBAAL,EAApB,GAAmD,KAAKC,cAAL,EAA1D;AACH;AACD;;;;;;;;;;oCAOYC,O,EAAS;AAChB;AAAkB,cAAnB,CAA0BtE,QAA1B,GAAqCsE,OAAO,CAAChJ,GAAR;AAAa;;;;AAIlD,oBAAA6F,MAAM;AAAA,mBAAI,4EAAcA,MAAd,CAAJ;AAAA,WAJ+B,CAArC;;AAKC;AAAkB,cAAnB,CAA0BnB,QAA1B,CAAmCxC,OAAnC;AAA4C;;;;AAI5C,oBAAA2D,MAAM;AAAA,mBAAI5H,4BAA4B,CAAC4H,MAAD,EAAS,KAAT,CAAhC;AAAA,WAJN;;AAKC;AAAkB,cAAnB,CAA0BoD,6BAA1B;;AACA;AAAQ;AAAkB;AAA1B;AACH;AACD;;;;;;;;;;4CAOoBC,Q,EAAU;AACzB;AAAkB,cAAnB,CAA0BC,gBAA1B,GAA6CD,QAA7C;AACA;AAAQ;AAAkB;AAA1B;AACH;AACD;;;;;;;;;;gDAOwBA,Q,EAAU;AAC7B;AAAkB,cAAnB,CAA0BE,oBAA1B,GAAiDF,QAAjD;AACA;AAAQ;AAAkB;AAA1B;AACH;AACD;;;;;;;;;;;;wCASgBG,W,EAAa;AAAA;;AACzB;AACA,cAAMnL,OAAO,GAAG,4EAAcmL,WAAd,CAAhB;;AACA,cAAInL,OAAO;AAAM;AAAkB,cAAnB,CAA0B+H,YAA1C,EAAwD;AACpD;AAAK;AAAkB,gBAAnB,CAA0BA,YAA9B,EAA4C;AACvC;AAAkB,kBAAnB,CAA0BqD,2BAA1B;AAAuD;AAAkB,kBAAnB,CAA0BrD,YAAhF;AACH;;AACA;AAAkB,gBAAnB,CAA0BnC,OAA1B,CAAkCyF,iBAAlC;AAAqD;;;AAGrD,wBAAM;AACFrL,qBAAO,CAACsL,gBAAR,CAAyB,WAAzB;AAAuC;AAAkB,oBAAnB,CAA0B/D,YAAhE,EAA8EnC,0BAA9E;AACApF,qBAAO,CAACsL,gBAAR,CAAyB,YAAzB;AAAwC;AAAkB,oBAAnB,CAA0B/D,YAAjE,EAA+ErC,2BAA/E;AACH,aAND;;AAOC;AAAkB,gBAAnB,CAA0BqG,iBAA1B,GAA8CC,SAA9C;;AACC;AAAkB,gBAAnB,CAA0BzD,YAA1B,GAAyC/H,OAAzC;AACH;;AACD;AAAQ;AAAkB;AAA1B;AACH;AACD;;;;;;;;;;4CAOoByL,e,EAAiB;AAAA;;AAChC;AAAkB,cAAnB,CAA0BnF,gBAA1B,GAA6CmF,eAAe,GAAG,4EAAcA,eAAd,CAAH,GAAoC,IAAhG;;AACC;AAAkB,cAAnB,CAA0BpF,mBAA1B,CAA8CqF,WAA9C;;AACA,cAAID,eAAJ,EAAqB;AAChB;AAAkB,gBAAnB,CAA0BpF,mBAA1B;AAAiD;AAAkB,gBAAnB,CAA0B7C,cAA1B,CAC3CmI,MAD2C,CACpC,EADoC,EAE3CC,SAF2C;AAEhC;;;AAGhB;AAAA,qBAAM;AAAC;AAAkB,sBAAnB,CAA0BC,8BAA1B;AAAN;AAAA,aALgD,CAAhD;AAMH;;AACD;AAAQ;AAAkB;AAA1B;AACH;AACD;;;;;;;kCAIU;AACN,eAAKT,2BAAL,CAAiC,KAAKrD,YAAtC,EADM,CAEN;AACA;;;AACA,cAAI,KAAKoB,UAAL,EAAJ,EAAuB;AACnB;AACA;AACA2C,sBAAU,CAAC,KAAK/D,YAAN,CAAV;AACH;;AACD+D,oBAAU,CAAC,KAAKC,OAAN,CAAV;;AACA,eAAKC,eAAL;;AACA,eAAKC,mBAAL;;AACA,eAAKpG,iBAAL,CAAuBqG,cAAvB,CAAsC,IAAtC;;AACA,eAAKC,oBAAL;;AACA,eAAKrF,aAAL,CAAmBsF,QAAnB;AACA,eAAKrF,OAAL,CAAaqF,QAAb;AACA,eAAKpF,QAAL,CAAcoF,QAAd;AACA,eAAKnF,KAAL,CAAWmF,QAAX;AACA,eAAKlF,OAAL,CAAakF,QAAb;AACA,eAAKjF,MAAL,CAAYiF,QAAZ;AACA,eAAKhF,OAAL,CAAagF,QAAb;;AACA,eAAKpG,WAAL,CAAiBoG,QAAjB;;AACA,eAAK5F,QAAL,GAAgB,EAAhB;;AACA,eAAKC,gBAAL,CAAsB9C,KAAtB;;AACA,eAAKuF,cAAL,GAAsBsC,SAAtB;;AACA,eAAKnF,mBAAL,CAAyBqF,WAAzB;;AACA,eAAKjB,gBAAL,CAAsB9G,KAAtB;;AACA,eAAK2C,gBAAL,GAAwB,KAAKyB,YAAL,GAAoB,KAAKmD,oBAAL,GACxC,KAAKD,gBAAL,GAAwB,KAAKc,OAAL;AAAgB;AAAkB,cAD9D;AAEH;AACD;;;;;;;qCAIa;AACT,iBAAO,KAAK3D,mBAAL,IAA4B,KAAKvC,iBAAL,CAAuBsD,UAAvB,CAAkC,IAAlC,CAAnC;AACH;AACD;;;;;;;gCAIQ;AACJ,eAAKpB,YAAL,CAAkB5H,KAAlB,CAAwBkM,SAAxB,GAAoC,KAAKd,iBAAL,IAA0B,EAA9D;AACA,eAAKxF,gBAAL,GAAwB;AAAEpD,aAAC,EAAE,CAAL;AAAQC,aAAC,EAAE;AAAX,WAAxB;AACA,eAAKkD,iBAAL,GAAyB;AAAEnD,aAAC,EAAE,CAAL;AAAQC,aAAC,EAAE;AAAX,WAAzB;AACH;AACD;;;;;;;;sCAKc+E,M,EAAQ;AAClB,cAAI,KAAKnB,QAAL,CAAc1F,OAAd,CAAsB6G,MAAtB,IAAgC,CAAC,CAArC,EAAwC;AACpC,iBAAKlB,gBAAL,CAAsB6F,GAAtB,CAA0B3E,MAA1B;AACH;AACJ;AACD;;;;;;;;qCAKaA,M,EAAQ;AACjB,eAAKlB,gBAAL,WAA6BkB,MAA7B;AACH;AACD;;;;;;;;;;sCAOc4E,S,EAAW;AACpB;AAAkB,cAAnB,CAA0B5F,UAA1B,GAAuC4F,SAAvC;AACA;AAAQ;AAAkB;AAA1B;AACH;AACD;;;;;;;;2CAKmBC,S,EAAW;AAC1B,eAAKtD,cAAL,GAAsBsD,SAAtB;AACH;AACD;;;;;;;8CAIsB;AAClB;AACA,cAAM1H,QAAQ,GAAG,KAAKqE,UAAL,KAAoB,KAAKpD,gBAAzB,GAA4C,KAAKD,iBAAlE;AACA,iBAAO;AAAEnD,aAAC,EAAEmC,QAAQ,CAACnC,CAAd;AAAiBC,aAAC,EAAEkC,QAAQ,CAAClC;AAA7B,WAAP;AACH;AACD;;;;;;;;;;4CAOoBjC,K,EAAO;AACtB;AAAkB,cAAnB,CAA0BoF,gBAA1B,GAA6C;AAAEpD,aAAC,EAAE,CAAL;AAAQC,aAAC,EAAE;AAAX,WAA7C;;AACC;AAAkB,cAAnB,CAA0BkD,iBAA1B,CAA4CnD,CAA5C,GAAgDhC,KAAK,CAACgC,CAAtD;;AACC;AAAkB,cAAnB,CAA0BmD,iBAA1B,CAA4ClD,CAA5C,GAAgDjC,KAAK,CAACiC,CAAtD;;AACA,cAAI;AAAE;AAAkB,cAAnB,CAA0BsG,cAA/B,EAA+C;AAC1C;AAAkB,gBAAnB,CAA0BY,0BAA1B,CAAqDnJ,KAAK,CAACgC,CAA3D,EAA8DhC,KAAK,CAACiC,CAApE;AACH;;AACD;AAAQ;AAAkB;AAA1B;AACH;AACD;;;;;;;uDAI+B;AAC3B;AACA,cAAMkC,QAAQ,GAAG,KAAK2H,qCAAtB;;AACA,cAAI3H,QAAQ,IAAI,KAAKoE,cAArB,EAAqC;AACjC,iBAAKU,0BAAL,CAAgC,KAAKH,8BAAL,CAAoC3E,QAApC,CAAhC;AACH;AACJ;AACD;;;;;;;;+CAKuB;AACnB,eAAKmB,wBAAL,CAA8ByF,WAA9B;;AACA,eAAKvF,sBAAL,CAA4BuF,WAA5B;;AACA,eAAKtF,mBAAL,CAAyBsF,WAAzB;AACH;AACD;;;;;;;;0CAKkB;AACd,cAAI,KAAKnC,QAAT,EAAmB;AACfuC,sBAAU,CAAC,KAAKvC,QAAN,CAAV;AACH;;AACD,cAAI,KAAKmD,WAAT,EAAsB;AAClB,iBAAKA,WAAL,CAAiBC,OAAjB;AACH;;AACD,eAAKpD,QAAL,GAAgB,KAAKmD,WAAL;AAAoB;AAAkB,cAAtD;AACH;AACD;;;;;;;;8CAKsB;AAClB,cAAI,KAAK/B,YAAT,EAAuB;AACnBmB,sBAAU,CAAC,KAAKnB,YAAN,CAAV;AACH;;AACD,cAAI,KAAKiC,eAAT,EAA0B;AACtB,iBAAKA,eAAL,CAAqBD,OAArB;AACH;;AACD,eAAKhC,YAAL,GAAoB,KAAKiC,eAAL;AAAwB;AAAkB,cAA9D;AACH;AACD;;;;;;;;;yCAMiBzI,K,EAAO;AAAA;;AACpB;AACA;AACA;AACA;AACA,cAAI,CAAC,KAAK0B,iBAAL,CAAuBsD,UAAvB,CAAkC,IAAlC,CAAL,EAA8C;AAC1C;AACH;;AACD,eAAKgD,oBAAL;;AACA,eAAKtG,iBAAL,CAAuBgH,YAAvB,CAAoC,IAApC;;AACA,eAAK9B,6BAAL;;AACA,cAAI,KAAKvE,QAAT,EAAmB;AACf,iBAAKuB,YAAL,CAAkB5H,KAAlB,CAAwBG,uBAAxB,GAAkD,KAAKwM,wBAAvD;AACH;;AACD,cAAI,CAAC,KAAK1E,mBAAV,EAA+B;AAC3B;AACH;;AACD,eAAKpB,QAAL,CAAcQ,IAAd,CAAmB;AAAE5H,kBAAM,EAAE;AAAV,WAAnB;;AACA,cAAI,KAAKsJ,cAAT,EAAyB;AACrB;AACA,iBAAKA,cAAL,CAAoB6D,cAApB;;AACA,iBAAKC,4BAAL,GAAoCC,IAApC;AAA0C;;;AAG1C,wBAAM;AACF,oBAAI,CAACC,qBAAL,CAA2B/I,KAA3B;;AACA,oBAAI,CAACgJ,wBAAL;;AACA,oBAAI,CAACtH,iBAAL,CAAuBgH,YAAvB,CAAoC,MAApC;AACH,aAPD;AAQH,WAXD,MAYK;AACD;AACA;AACA;AACA,iBAAK/G,iBAAL,CAAuBnD,CAAvB,GAA2B,KAAKoD,gBAAL,CAAsBpD,CAAjD;AACA,iBAAKmD,iBAAL,CAAuBlD,CAAvB,GAA2B,KAAKmD,gBAAL,CAAsBnD,CAAjD;;AACA,iBAAKgD,OAAL,CAAawD,GAAb;AAAkB;;;AAGlB,wBAAM;AACF,oBAAI,CAACnC,KAAL,CAAWO,IAAX,CAAgB;AACZ5H,sBAAM,EAAE,MADI;AAEZuK,wBAAQ,EAAE,MAAI,CAACC,gBAAL,CAAsB,MAAI,CAACjC,yBAAL,CAA+BhE,KAA/B,CAAtB;AAFE,eAAhB;AAIH,aARD;;AASA,iBAAKgJ,wBAAL;;AACA,iBAAKtH,iBAAL,CAAuBgH,YAAvB,CAAoC,IAApC;AACH;AACJ;AACD;;;;;;;;;2CAMmB1I,K,EAAO;AACtB;AACA,eAAK4C,OAAL,CAAaS,IAAb,CAAkB;AAAE5H,kBAAM,EAAE;AAAV,WAAlB;;AACA,cAAIwN,YAAY,CAACjJ,KAAD,CAAhB,EAAyB;AACrB,iBAAKkJ,mBAAL,GAA2BxE,IAAI,CAACC,GAAL,EAA3B;AACH;;AACD,eAAKiC,6BAAL;AACA;;;AACA,cAAMuC,aAAa,GAAG,KAAKpE,cAA3B;;AACA,cAAIoE,aAAJ,EAAmB;AACf;AACA,gBAAMtN,OAAO,GAAG,KAAK+H,YAArB;AACA;;AACA,gBAAMwF,MAAM;AAAI;AAAkBvN,mBAAO,CAACwN,UAA1C;AACA;;AACA,gBAAMC,OAAO,GAAG,KAAKlE,QAAL,GAAgB,KAAKmE,qBAAL,EAAhC;AACA;;;AACA,gBAAMC,WAAW,GAAG,KAAKhD,YAAL,GAAoB,KAAKiD,yBAAL,EAAxC;AACA;;;AACA,gBAAMC,MAAM,GAAG,KAAK9B,OAAL,GAAe,KAAKA,OAAL,IAAgB,KAAKxI,SAAL,CAAeuK,aAAf,CAA6B,EAA7B,CAA9C,CAVe,CAWf;;;AACAP,kBAAM,CAACQ,YAAP,CAAoBF,MAApB,EAA4B7N,OAA5B,EAZe,CAaf;AACA;AACA;;AACAA,mBAAO,CAACG,KAAR,CAAc6N,OAAd,GAAwB,MAAxB;;AACA,iBAAKzK,SAAL,CAAe0K,IAAf,CAAoBC,WAApB,CAAgCX,MAAM,CAACY,YAAP,CAAoBR,WAApB,EAAiC3N,OAAjC,CAAhC;;AACAoO,oCAAwB,CAAC,KAAK7K,SAAN,CAAxB,CAAyC2K,WAAzC,CAAqDT,OAArD;AACAH,yBAAa,CAACe,KAAd;AACA,iBAAKC,iBAAL,GAAyBhB,aAAzB;AACA,iBAAKiB,aAAL,GAAqBjB,aAAa,CAACkB,YAAd,CAA2B,IAA3B,CAArB;AACH,WAtBD,MAuBK;AACD,iBAAKF,iBAAL,GAAyB,KAAKC,aAAL;AAAsB;AAAkB/C,qBAAjE;AACH,WAlCqB,CAmCtB;AACA;;;AACA,eAAKf,gBAAL,CAAsBgE,KAAtB,CAA4BnB,aAAa,GAAGA,aAAa,CAACoB,oBAAd,EAAH,GAA0C,EAAnF;AACH;AACD;;;;;;;;;;;gDAQwBC,gB,EAAkBxK,K,EAAO;AAAA;;AAC7C;AACA;AACA;AACAA,eAAK,CAACyK,eAAN;AACA;;AACA,cAAMzF,UAAU,GAAG,KAAKA,UAAL,EAAnB;AACA;;AACA,cAAM0F,eAAe,GAAGzB,YAAY,CAACjJ,KAAD,CAApC;AACA;;AACA,cAAM2K,sBAAsB,GAAG,CAACD,eAAD;AAAsB;AAAkB1K,eAApB,CAA6B4K,MAA7B,KAAwC,CAA3F;AACA;;AACA,cAAM5D,WAAW,GAAG,KAAKpD,YAAzB;AACA;;AACA,cAAMiH,gBAAgB,GAAG,CAACH,eAAD,IAAoB,KAAKxB,mBAAzB,IACrB,KAAKA,mBAAL,GAA2BhI,uBAA3B,GAAqDwD,IAAI,CAACC,GAAL,EADzD,CAd6C,CAgB7C;AACA;AACA;AACA;AACA;AACA;;AACA,cAAI3E,KAAK,CAACC,MAAN;AAAkB;AAAkBD,eAAK,CAACC,MAA1B,CAAoC6K,SAApD,IAAiE9K,KAAK,CAAC+K,IAAN,KAAe,WAApF,EAAiG;AAC7F/K,iBAAK,CAAC8D,cAAN;AACH,WAxB4C,CAyB7C;;;AACA,cAAIkB,UAAU,IAAI2F,sBAAd,IAAwCE,gBAA5C,EAA8D;AAC1D;AACH,WA5B4C,CA6B7C;AACA;AACA;;;AACA,cAAI,KAAKxI,QAAL,CAAciB,MAAlB,EAA0B;AACtB,iBAAKqF,wBAAL,GAAgC3B,WAAW,CAAChL,KAAZ,CAAkBG,uBAAlD;AACA6K,uBAAW,CAAChL,KAAZ,CAAkBG,uBAAlB,GAA4C,aAA5C;AACH;;AACD,eAAK8H,mBAAL,GAA2B,KAAKsB,SAAL,GAAiB,KAA5C,CApC6C,CAqC7C;AACA;;AACA,eAAKyC,oBAAL;;AACA,eAAKlG,wBAAL,GAAgC,KAAKJ,iBAAL,CAAuBsJ,WAAvB,CAAmCvD,SAAnC,CAA6C,KAAK5D,YAAlD,CAAhC;AACA,eAAK7B,sBAAL,GAA8B,KAAKN,iBAAL,CAAuBuJ,SAAvB,CAAiCxD,SAAjC,CAA2C,KAAKrB,UAAhD,CAA9B;AACA,eAAKnE,mBAAL,GAA2B,KAAKP,iBAAL,CAAuBwJ,MAAvB,CAA8BzD,SAA9B;AAAyC;;;;AAIpE,oBAAA0D,WAAW,EAAI;AACX,kBAAI,CAACC,eAAL,CAAqBD,WAArB;AACH,WAN0B,CAA3B;;AAOA,cAAI,KAAKhJ,gBAAT,EAA2B;AACvB,iBAAKkJ,aAAL,GAAqBvN,oBAAoB,CAAC,KAAKqE,gBAAN,CAAzC;AACH,WAnD4C,CAoD7C;AACA;AACA;;AACA;;;AACA,cAAMmJ,eAAe,GAAG,KAAKxE,gBAA7B;AACA,eAAKyE,wBAAL,GAAgCD,eAAe,IAAIA,eAAe,CAACzE,QAAnC,IAC5B,CAACyE,eAAe,CAACE,SADW,GACC;AAAEhN,aAAC,EAAE,CAAL;AAAQC,aAAC,EAAE;AAAX,WADD,GAE5B,KAAKgN,4BAAL,CAAkCjB,gBAAlC,EAAoDxK,KAApD,CAFJ;AAGA;;AACA,cAAM+D,eAAe,GAAG,KAAKM,qBAAL,GAA6B,KAAKL,yBAAL,CAA+BhE,KAA/B,CAArD;;AACA,eAAKmG,sBAAL,GAA8B;AAAE3H,aAAC,EAAE,CAAL;AAAQC,aAAC,EAAE;AAAX,WAA9B;AACA,eAAK6J,qCAAL,GAA6C;AAAE9J,aAAC,EAAEuF,eAAe,CAACvF,CAArB;AAAwBC,aAAC,EAAEsF,eAAe,CAACtF;AAA3C,WAA7C;AACA,eAAKmG,cAAL,GAAsBF,IAAI,CAACC,GAAL,EAAtB;;AACA,eAAKjD,iBAAL,CAAuBgK,aAAvB,CAAqC,IAArC,EAA2C1L,KAA3C;AACH;AACD;;;;;;;;;8CAMsBA,K,EAAO;AAAA;;AACzB;AACA;AACA;AACA;AACA,eAAK4D,YAAL,CAAkB5H,KAAlB,CAAwB6N,OAAxB,GAAkC,EAAlC;;AACC;AAAkB,eAAKjC,OAAL,CAAayB,UAAhC,CAA6CW,YAA7C,CAA0D,KAAKpG,YAA/D,EAA6E,KAAKgE,OAAlF;;AACA,eAAKC,eAAL;;AACA,eAAKC,mBAAL;;AACA,eAAKuD,aAAL,GAAqB,KAAKlG,YAAL,GAAoBkC,SAAzC,CATyB,CAUzB;;AACA,eAAK5F,OAAL,CAAawD,GAAb;AAAkB;;;AAGlB,sBAAM;AACF;AACA,gBAAMoD,SAAS;AAAI;AAAkB,kBAAI,CAACtD,cAA1C;AACA;;AACA,gBAAM4G,YAAY,GAAGtD,SAAS,CAACgC,YAAV,CAAuB,MAAvB,CAArB;AACA;;AACA,gBAAMtG,eAAe,GAAG,MAAI,CAACC,yBAAL,CAA+BhE,KAA/B,CAAxB;AACA;;;AACA,gBAAMgG,QAAQ,GAAG,MAAI,CAACC,gBAAL,CAAsB,MAAI,CAACjC,yBAAL,CAA+BhE,KAA/B,CAAtB,CAAjB;AACA;;;AACA,gBAAM4L,sBAAsB,GAAGvD,SAAS,CAACwD,gBAAV,CAA2B9H,eAAe,CAACvF,CAA3C,EAA8CuF,eAAe,CAACtF,CAA9D,CAA/B;;AACA,kBAAI,CAACqE,KAAL,CAAWO,IAAX,CAAgB;AAAE5H,oBAAM,EAAE,MAAV;AAAgBuK,sBAAQ,EAARA;AAAhB,aAAhB;;AACA,kBAAI,CAAC/C,OAAL,CAAaI,IAAb,CAAkB;AACdyI,kBAAI,EAAE,MADQ;AAEdH,0BAAY,EAAZA,YAFc;AAGdI,2BAAa,EAAE,MAAI,CAAC3B,aAHN;AAId/B,uBAAS,EAAEA,SAJG;AAKd2D,+BAAiB,EAAE,MAAI,CAAC7B,iBALV;AAMdyB,oCAAsB,EAAtBA,sBANc;AAOd5F,sBAAQ,EAARA;AAPc,aAAlB;;AASAqC,qBAAS,CAAC4D,IAAV,CAAe,MAAf,EAAqBN,YAArB,EAAmC,MAAI,CAACxB,iBAAxC,EAA2DyB,sBAA3D,EAAmF5F,QAAnF,EAA6F,MAAI,CAACoE,aAAlG;AACA,kBAAI,CAACrF,cAAL,GAAsB,MAAI,CAACoF,iBAA3B;AACH,WA1BD;AA2BH;AACD;;;;;;;;;;yDAOqC;AAAA;;AAAA,cAAR3L,CAAQ,QAARA,CAAQ;AAAA,cAALC,CAAK,QAALA,CAAK;;AACjC;;AACA;AACA,cAAIyN,YAAY,GAAG,KAAK/B,iBAAL,CAAuBgC,gCAAvB,CAAwD,IAAxD,EAA8D3N,CAA9D,EAAiEC,CAAjE,CAAnB,CAHiC,CAIjC;AACA;AACA;AACA;;;AACA,cAAI,CAACyN,YAAD,IAAiB,KAAKnH,cAAL,KAAwB,KAAKoF,iBAA9C,IACA,KAAKA,iBAAL,CAAuB0B,gBAAvB,CAAwCrN,CAAxC,EAA2CC,CAA3C,CADJ,EACmD;AAC/CyN,wBAAY,GAAG,KAAK/B,iBAApB;AACH;;AACD,cAAI+B,YAAY,IAAIA,YAAY,KAAK,KAAKnH,cAA1C,EAA0D;AACtD,iBAAKtD,OAAL,CAAawD,GAAb;AAAkB;;;AAGlB,wBAAM;AACF;AACA,oBAAI,CAACjC,MAAL,CAAYK,IAAZ,CAAiB;AAAEyI,oBAAI,EAAE,MAAR;AAAczD,yBAAS;AAAG;AAAkB,sBAAI,CAACtD;AAAjD,eAAjB;;AACC;AAAkB,oBAAI,CAACA,cAAxB,CAAyCqH,IAAzC,CAA8C,MAA9C,EAHE,CAIF;;;AACA,oBAAI,CAACrH,cAAL;AAAuB;AAAkBmH,0BAAzC;;AACA,oBAAI,CAACnH,cAAL,CAAoBsH,KAApB,CAA0B,MAA1B,EAAgC7N,CAAhC,EAAmCC,CAAnC,EAAsCyN,YAAY,KAAK,MAAI,CAAC/B,iBAAtB,IAClC;AACA;AACA+B,0BAAY,CAACI,eAHqB,GAGH,MAAI,CAAClC,aAHF,GAGkB/C,SAHxD;;AAIA,oBAAI,CAACtE,OAAL,CAAaM,IAAb,CAAkB;AACdyI,oBAAI,EAAE,MADQ;AAEdzD,yBAAS;AAAG;AAAkB6D,4BAFhB;AAGdP,4BAAY;AAAG;AAAkBO,4BAAnB,CAAkC7B,YAAlC,CAA+C,MAA/C;AAHA,eAAlB;AAKH,aAlBD;AAmBH;;AACA;AAAkB,eAAKtF,cAAxB,CAAyCwH,0BAAzC,CAAoE/N,CAApE,EAAuEC,CAAvE;;AACC;AAAkB,eAAKsG,cAAxB,CAAyCyH,SAAzC,CAAmD,IAAnD,EAAyDhO,CAAzD,EAA4DC,CAA5D,EAA+D,KAAK0H,sBAApE;;AACA,eAAKf,QAAL,CAAcpJ,KAAd,CAAoBkM,SAApB,GACIuE,YAAY,CAACjO,CAAC,GAAG,KAAK+M,wBAAL,CAA8B/M,CAAnC,EAAsCC,CAAC,GAAG,KAAK8M,wBAAL,CAA8B9M,CAAxE,CADhB;AAEH;AACD;;;;;;;;;gDAMwB;AACpB;AACA,cAAMiO,aAAa,GAAG,KAAK5F,gBAA3B;AACA;;AACA,cAAM6F,YAAY,GAAG,KAAKA,YAA1B;AACA;;AACA,cAAMrB,eAAe,GAAGoB,aAAa,GAAGA,aAAa,CAAC7F,QAAjB,GAA4B,IAAjE;AACA;;AACA,cAAIyC,OAAJ;;AACA,cAAIgC,eAAe,IAAIoB,aAAvB,EAAsC;AAClC;AACA;;AACA;AACA,gBAAME,QAAQ,GAAGF,aAAa,CAAClB,SAAd,GAA0B,KAAK5H,YAAL,CAAkB5F,qBAAlB,EAA1B,GAAsE,IAAvF;AACA;;AACA,gBAAM6O,OAAO,GAAGH,aAAa,CAACI,aAAd,CAA4BC,kBAA5B,CAA+CzB,eAA/C,EAAgEoB,aAAa,CAACM,OAA9E,CAAhB;AACAH,mBAAO,CAACI,aAAR;AACA3D,mBAAO,GAAG4D,WAAW,CAACL,OAAD,EAAU,KAAKzN,SAAf,CAArB;AACA,iBAAKmJ,WAAL,GAAmBsE,OAAnB;;AACA,gBAAIH,aAAa,CAAClB,SAAlB,EAA6B;AACzB2B,8BAAgB,CAAC7D,OAAD;AAAW;AAAkBsD,sBAA7B,CAAhB;AACH,aAFD,MAGK;AACDtD,qBAAO,CAACtN,KAAR,CAAckM,SAAd,GACIuE,YAAY,CAAC,KAAKpI,qBAAL,CAA2B7F,CAA5B,EAA+B,KAAK6F,qBAAL,CAA2B5F,CAA1D,CADhB;AAEH;AACJ,WAjBD,MAkBK;AACD;AACA,gBAAM5C,OAAO,GAAG,KAAK+H,YAArB;AACA0F,mBAAO,GAAG8D,aAAa,CAACvR,OAAD,CAAvB;AACAsR,4BAAgB,CAAC7D,OAAD,EAAUzN,OAAO,CAACmC,qBAAR,EAAV,CAAhB;AACH;;AACDzC,sBAAY,CAAC+N,OAAO,CAACtN,KAAT,EAAgB;AACxB;AACA;AACAqR,yBAAa,EAAE,MAHS;AAIxB;AACAC,kBAAM,EAAE,GALgB;AAMxB3M,oBAAQ,EAAE,OANc;AAOxB1C,eAAG,EAAE,GAPmB;AAQxBG,gBAAI,EAAE,GARkB;AASxBmP,kBAAM,YAAK,KAAK/L,OAAL,CAAa+L,MAAb,IAAuB,IAA5B;AATkB,WAAhB,CAAZ;AAWA3R,sCAA4B,CAAC0N,OAAD,EAAU,KAAV,CAA5B;AACAA,iBAAO,CAACkE,SAAR,CAAkBrF,GAAlB,CAAsB,kBAAtB;AACAmB,iBAAO,CAACxD,YAAR,CAAqB,KAArB,EAA4B,KAAKtD,UAAjC;;AACA,cAAImK,YAAJ,EAAkB;AACd,gBAAIc,KAAK,CAACC,OAAN,CAAcf,YAAd,CAAJ,EAAiC;AAC7BA,0BAAY,CAAC9M,OAAb;AAAsB;;;;AAItB,wBAAA8N,SAAS;AAAA,uBAAIrE,OAAO,CAACkE,SAAR,CAAkBrF,GAAlB,CAAsBwF,SAAtB,CAAJ;AAAA,eAJT;AAKH,aAND,MAOK;AACDrE,qBAAO,CAACkE,SAAR,CAAkBrF,GAAlB,CAAsBwE,YAAtB;AACH;AACJ;;AACD,iBAAOrD,OAAP;AACH;AACD;;;;;;;;uDAK+B;AAAA;;AAC3B;AACA,cAAI,CAAC,KAAK/D,SAAV,EAAqB;AACjB,mBAAOqI,OAAO,CAACC,OAAR,EAAP;AACH;AACD;;;AACA,cAAMC,eAAe,GAAG,KAAKtH,YAAL,CAAkBxI,qBAAlB,EAAxB,CAN2B,CAO3B;;;AACA,eAAKoH,QAAL,CAAcoI,SAAd,CAAwBrF,GAAxB,CAA4B,oBAA5B,EAR2B,CAS3B;;;AACA,eAAK/C,QAAL,CAAcpJ,KAAd,CAAoBkM,SAApB,GAAgCuE,YAAY,CAACqB,eAAe,CAAC1P,IAAjB,EAAuB0P,eAAe,CAAC7P,GAAvC,CAA5C,CAV2B,CAW3B;AACA;AACA;AACA;;AACA;;AACA,cAAM8P,QAAQ,GAAGlR,kCAAkC,CAAC,KAAKuI,QAAN,CAAnD;;AACA,cAAI2I,QAAQ,KAAK,CAAjB,EAAoB;AAChB,mBAAOH,OAAO,CAACC,OAAR,EAAP;AACH;;AACD,iBAAO,KAAKpM,OAAL,CAAayF,iBAAb;AAAgC;;;AAGvC,sBAAM;AACF,mBAAO,IAAI0G,OAAJ;AAAa;;;;AAIpB,sBAAAC,OAAO,EAAI;AACP;AACA,kBAAMG,OAAO;AAAI;;AAAoB;;;;AAIrC,uBAJMA,OAIN,CAAChO,KAAD,EAAW;AACP,oBAAI,CAACA,KAAD,IAAWA,KAAK,CAACC,MAAN,KAAiB,MAAI,CAACmF,QAAtB,IAAkCpF,KAAK,CAACiO,YAAN,KAAuB,WAAxE,EAAsF;AAClF,wBAAI,CAAC7I,QAAL,CAAc8I,mBAAd,CAAkC,eAAlC,EAAmDF,OAAnD;;AACAH,yBAAO;AACPM,8BAAY,CAACC,OAAD,CAAZ;AACH;AACJ,eAVD,CAFO,CAaP;AACA;AACA;;AACA;;;AACA,kBAAMA,OAAO,GAAGC,UAAU;AAAE;AAAkBL,qBAApB,EAA+BD,QAAQ,GAAG,GAA1C,CAA1B;;AACA,oBAAI,CAAC3I,QAAL,CAAc+B,gBAAd,CAA+B,eAA/B,EAAgD6G,OAAhD;AACH,aAvBM,CAAP;AAwBH,WA5BM,CAAP;AA6BH;AACD;;;;;;;;oDAK4B;AACxB;AACA,cAAMM,iBAAiB,GAAG,KAAKvH,oBAA/B;AACA;;AACA,cAAMwH,mBAAmB,GAAGD,iBAAiB,GAAGA,iBAAiB,CAACzH,QAArB,GAAgC,IAA7E;AACA;;AACA,cAAI2C,WAAJ;;AACA,cAAI+E,mBAAJ,EAAyB;AACrB,iBAAK9F,eAAL;AAAwB;AAAkB6F,6BAAnB,CAAuCxB,aAAvC,CAAqDC,kBAArD,CAAwEwB,mBAAxE;AAA8F;AAAkBD,6BAAnB,CAAuCtB,OAApI,CAAvB;;AACA,iBAAKvE,eAAL,CAAqBwE,aAArB;;AACAzD,uBAAW,GAAG0D,WAAW,CAAC,KAAKzE,eAAN,EAAuB,KAAKrJ,SAA5B,CAAzB;AACH,WAJD,MAKK;AACDoK,uBAAW,GAAG4D,aAAa,CAAC,KAAKxJ,YAAN,CAA3B;AACH;;AACD4F,qBAAW,CAACgE,SAAZ,CAAsBrF,GAAtB,CAA0B,sBAA1B;AACA,iBAAOqB,WAAP;AACH;AACD;;;;;;;;;;qDAO6BgB,gB,EAAkBxK,K,EAAO;AAClD;AACA,cAAMwO,WAAW,GAAG,KAAK5K,YAAL,CAAkB5F,qBAAlB,EAApB;AACA;;;AACA,cAAMyQ,aAAa,GAAGjE,gBAAgB,KAAK,KAAK5G,YAA1B,GAAyC,IAAzC,GAAgD4G,gBAAtE;AACA;;AACA,cAAMkE,aAAa,GAAGD,aAAa,GAAGA,aAAa,CAACzQ,qBAAd,EAAH,GAA2CwQ,WAA9E;AACA;;AACA,cAAMG,KAAK,GAAG1F,YAAY,CAACjJ,KAAD,CAAZ,GAAsBA,KAAK,CAAC4O,aAAN,CAAoB,CAApB,CAAtB,GAA+C5O,KAA7D;AACA;;AACA,cAAML,cAAc,GAAG,KAAKkP,0BAAL,EAAvB;AACA;;;AACA,cAAMrQ,CAAC,GAAGmQ,KAAK,CAACG,KAAN,GAAcJ,aAAa,CAACtQ,IAA5B,GAAmCuB,cAAc,CAACvB,IAA5D;AACA;;AACA,cAAMK,CAAC,GAAGkQ,KAAK,CAACI,KAAN,GAAcL,aAAa,CAACzQ,GAA5B,GAAkC0B,cAAc,CAAC1B,GAA3D;AACA,iBAAO;AACHO,aAAC,EAAEkQ,aAAa,CAACtQ,IAAd,GAAqBoQ,WAAW,CAACpQ,IAAjC,GAAwCI,CADxC;AAEHC,aAAC,EAAEiQ,aAAa,CAACzQ,GAAd,GAAoBuQ,WAAW,CAACvQ,GAAhC,GAAsCQ;AAFtC,WAAP;AAIH;AACD;;;;;;;;;kDAM0BuB,K,EAAO;AAC7B;;AACA;AACA,cAAM2O,KAAK,GAAG1F,YAAY,CAACjJ,KAAD,CAAZ,GAAuBA,KAAK,CAACgP,OAAN,CAAc,CAAd,KAAoBhP,KAAK,CAACiP,cAAN,CAAqB,CAArB,CAA3C,GAAsEjP,KAApF;AACA;;AACA,cAAML,cAAc,GAAG,KAAKkP,0BAAL,EAAvB;;AACA,iBAAO;AACHrQ,aAAC,EAAEmQ,KAAK,CAACG,KAAN,GAAcnP,cAAc,CAACvB,IAD7B;AAEHK,aAAC,EAAEkQ,KAAK,CAACI,KAAN,GAAcpP,cAAc,CAAC1B;AAF7B,WAAP;AAIH;AACD;;;;;;;;;uDAM+B0Q,K,EAAO;AAClC;AACA,cAAMO,gBAAgB,GAAG,KAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBR,KAAvB,EAA8B,IAA9B,CAAzB,GAA+DA,KAAxF;AACA;;AACA,cAAMS,iBAAiB,GAAG,KAAKrK,cAAL,GAAsB,KAAKA,cAAL,CAAoBsK,QAA1C,GAAqD,IAA/E;;AACA,cAAI,KAAKA,QAAL,KAAkB,GAAlB,IAAyBD,iBAAiB,KAAK,GAAnD,EAAwD;AACpDF,4BAAgB,CAACzQ,CAAjB,GAAqB,KAAK4F,qBAAL,CAA2B5F,CAAhD;AACH,WAFD,MAGK,IAAI,KAAK4Q,QAAL,KAAkB,GAAlB,IAAyBD,iBAAiB,KAAK,GAAnD,EAAwD;AACzDF,4BAAgB,CAAC1Q,CAAjB,GAAqB,KAAK6F,qBAAL,CAA2B7F,CAAhD;AACH;;AACD,cAAI,KAAK6M,aAAT,EAAwB;AAAA,wCACe,KAAKE,wBADpB;AAAA,gBACT+D,OADS,yBACZ9Q,CADY;AAAA,gBACG+Q,OADH,yBACA9Q,CADA;AAEpB;;AACA,gBAAM+Q,YAAY,GAAG,KAAKnE,aAA1B;AACA;;AACA,gBAAMoE,WAAW;AAAI;AAAkB,iBAAKtK,YAA5C;AACA;;AACA,gBAAMuK,IAAI,GAAGF,YAAY,CAACvR,GAAb,GAAmBsR,OAAhC;AACA;;AACA,gBAAMI,IAAI,GAAGH,YAAY,CAACrR,MAAb,IAAuBsR,WAAW,CAACnR,MAAZ,GAAqBiR,OAA5C,CAAb;AACA;;AACA,gBAAMK,IAAI,GAAGJ,YAAY,CAACpR,IAAb,GAAoBkR,OAAjC;AACA;;AACA,gBAAMO,IAAI,GAAGL,YAAY,CAACtR,KAAb,IAAsBuR,WAAW,CAACpR,KAAZ,GAAoBiR,OAA1C,CAAb;AACAJ,4BAAgB,CAAC1Q,CAAjB,GAAqBsR,KAAK,CAACZ,gBAAgB,CAAC1Q,CAAlB,EAAqBoR,IAArB,EAA2BC,IAA3B,CAA1B;AACAX,4BAAgB,CAACzQ,CAAjB,GAAqBqR,KAAK,CAACZ,gBAAgB,CAACzQ,CAAlB,EAAqBiR,IAArB,EAA2BC,IAA3B,CAA1B;AACH;;AACD,iBAAOT,gBAAP;AACH;AACD;;;;;;;;;qDAM6Ba,qB,EAAuB;AAAA,cACxCvR,CADwC,GAC/BuR,qBAD+B,CACxCvR,CADwC;AAAA,cACrCC,CADqC,GAC/BsR,qBAD+B,CACrCtR,CADqC;AAEhD;;AACA,cAAMyH,KAAK,GAAG,KAAKC,sBAAnB;AACA;;AACA,cAAM6J,uBAAuB,GAAG,KAAK1H,qCAArC,CALgD,CAMhD;;AACA;;AACA,cAAM2H,OAAO,GAAG9L,IAAI,CAACC,GAAL,CAAS5F,CAAC,GAAGwR,uBAAuB,CAACxR,CAArC,CAAhB;AACA;;AACA,cAAM0R,OAAO,GAAG/L,IAAI,CAACC,GAAL,CAAS3F,CAAC,GAAGuR,uBAAuB,CAACvR,CAArC,CAAhB,CAVgD,CAWhD;AACA;AACA;AACA;;AACA,cAAIwR,OAAO,GAAG,KAAKzO,OAAL,CAAa2O,+BAA3B,EAA4D;AACxDjK,iBAAK,CAAC1H,CAAN,GAAUA,CAAC,GAAGwR,uBAAuB,CAACxR,CAA5B,GAAgC,CAAhC,GAAoC,CAAC,CAA/C;AACAwR,mCAAuB,CAACxR,CAAxB,GAA4BA,CAA5B;AACH;;AACD,cAAI0R,OAAO,GAAG,KAAK1O,OAAL,CAAa2O,+BAA3B,EAA4D;AACxDjK,iBAAK,CAACzH,CAAN,GAAUA,CAAC,GAAGuR,uBAAuB,CAACvR,CAA5B,GAAgC,CAAhC,GAAoC,CAAC,CAA/C;AACAuR,mCAAuB,CAACvR,CAAxB,GAA4BA,CAA5B;AACH;;AACD,iBAAOyH,KAAP;AACH;AACD;;;;;;;;wDAKgC;AAC5B,cAAI,CAAC,KAAKtC,YAAN,IAAsB,CAAC,KAAKvB,QAAhC,EAA0C;AACtC;AACH;AACD;;;AACA,cAAM+N,YAAY,GAAG,KAAK/N,QAAL,CAAciB,MAAd,GAAuB,CAAvB,IAA4B,CAAC,KAAK0B,UAAL,EAAlD;;AACA,cAAIoL,YAAY,KAAK,KAAKhO,0BAA1B,EAAsD;AAClD,iBAAKA,0BAAL,GAAkCgO,YAAlC;AACAxU,wCAA4B,CAAC,KAAKgI,YAAN,EAAoBwM,YAApB,CAA5B;AACH;AACJ;AACD;;;;;;;;;oDAM4BvU,O,EAAS;AACjCA,iBAAO,CAACqS,mBAAR,CAA4B,WAA5B,EAAyC,KAAK9K,YAA9C,EAA4DnC,0BAA5D;AACApF,iBAAO,CAACqS,mBAAR,CAA4B,YAA5B,EAA0C,KAAK9K,YAA/C,EAA6DrC,2BAA7D;AACH;AACD;;;;;;;;;;mDAO2BvC,C,EAAGC,C,EAAG;AAC7B;AACA,cAAMyJ,SAAS,GAAGuE,YAAY,CAACjO,CAAD,EAAIC,CAAJ,CAA9B,CAF6B,CAG7B;AACA;;AACA,cAAI,KAAK2I,iBAAL,IAA0B,IAA9B,EAAoC;AAChC,iBAAKA,iBAAL,GAAyB,KAAKxD,YAAL,CAAkB5H,KAAlB,CAAwBkM,SAAxB,IAAqC,EAA9D;AACH,WAP4B,CAQ7B;AACA;AACA;;;AACA,eAAKtE,YAAL,CAAkB5H,KAAlB,CAAwBkM,SAAxB,GAAoC,KAAKd,iBAAL,GAChCc,SAAS,GAAG,GAAZ,GAAkB,KAAKd,iBADS,GACWc,SAD/C;AAEH;AACD;;;;;;;;;yCAMiBmI,e,EAAiB;AAC9B;AACA,cAAMC,cAAc,GAAG,KAAKjM,qBAA5B;;AACA,cAAIiM,cAAJ,EAAoB;AAChB,mBAAO;AAAE9R,eAAC,EAAE6R,eAAe,CAAC7R,CAAhB,GAAoB8R,cAAc,CAAC9R,CAAxC;AAA2CC,eAAC,EAAE4R,eAAe,CAAC5R,CAAhB,GAAoB6R,cAAc,CAAC7R;AAAjF,aAAP;AACH;;AACD,iBAAO;AAAED,aAAC,EAAE,CAAL;AAAQC,aAAC,EAAE;AAAX,WAAP;AACH;AACD;;;;;;;;mDAK2B;AACvB,eAAK4M,aAAL,GAAqB,KAAKlG,YAAL,GAAoBkC,SAAzC;;AACA,eAAKf,gBAAL,CAAsB9G,KAAtB;AACH;AACD;;;;;;;;;yDAMiC;AAAA,sCACd,KAAKmC,iBADS;AAAA,cACvBnD,CADuB,yBACvBA,CADuB;AAAA,cACpBC,CADoB,yBACpBA,CADoB;;AAE7B,cAAKD,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAAlB,IAAwB,KAAKuG,UAAL,EAAxB,IAA6C,CAAC,KAAK7C,gBAAvD,EAAyE;AACrE;AACH;AACD;;;AACA,cAAMqN,YAAY,GAAG,KAAKrN,gBAAL,CAAsBnE,qBAAtB,EAArB;AACA;;;AACA,cAAMwQ,WAAW,GAAG,KAAK5K,YAAL,CAAkB5F,qBAAlB,EAApB,CAR6B,CAS7B;AACA;;;AACA,cAAKwR,YAAY,CAACnR,KAAb,KAAuB,CAAvB,IAA4BmR,YAAY,CAAClR,MAAb,KAAwB,CAArD,IACCkQ,WAAW,CAACnQ,KAAZ,KAAsB,CAAtB,IAA2BmQ,WAAW,CAAClQ,MAAZ,KAAuB,CADvD,EAC2D;AACvD;AACH;AACD;;;AACA,cAAMiS,YAAY,GAAGf,YAAY,CAACpR,IAAb,GAAoBoQ,WAAW,CAACpQ,IAArD;AACA;;AACA,cAAMoS,aAAa,GAAGhC,WAAW,CAACtQ,KAAZ,GAAoBsR,YAAY,CAACtR,KAAvD;AACA;;AACA,cAAMuS,WAAW,GAAGjB,YAAY,CAACvR,GAAb,GAAmBuQ,WAAW,CAACvQ,GAAnD;AACA;;AACA,cAAMyS,cAAc,GAAGlC,WAAW,CAACrQ,MAAZ,GAAqBqR,YAAY,CAACrR,MAAzD,CAtB6B,CAuB7B;AACA;;AACA,cAAIqR,YAAY,CAACnR,KAAb,GAAqBmQ,WAAW,CAACnQ,KAArC,EAA4C;AACxC,gBAAIkS,YAAY,GAAG,CAAnB,EAAsB;AAClB/R,eAAC,IAAI+R,YAAL;AACH;;AACD,gBAAIC,aAAa,GAAG,CAApB,EAAuB;AACnBhS,eAAC,IAAIgS,aAAL;AACH;AACJ,WAPD,MAQK;AACDhS,aAAC,GAAG,CAAJ;AACH,WAnC4B,CAoC7B;AACA;;;AACA,cAAIgR,YAAY,CAAClR,MAAb,GAAsBkQ,WAAW,CAAClQ,MAAtC,EAA8C;AAC1C,gBAAImS,WAAW,GAAG,CAAlB,EAAqB;AACjBhS,eAAC,IAAIgS,WAAL;AACH;;AACD,gBAAIC,cAAc,GAAG,CAArB,EAAwB;AACpBjS,eAAC,IAAIiS,cAAL;AACH;AACJ,WAPD,MAQK;AACDjS,aAAC,GAAG,CAAJ;AACH;;AACD,cAAID,CAAC,KAAK,KAAKmD,iBAAL,CAAuBnD,CAA7B,IAAkCC,CAAC,KAAK,KAAKkD,iBAAL,CAAuBlD,CAAnE,EAAsE;AAClE,iBAAKkS,mBAAL,CAAyB;AAAElS,eAAC,EAADA,CAAF;AAAKD,eAAC,EAADA;AAAL,aAAzB;AACH;AACJ;AACD;;;;;;;;;2CAMmBwB,K,EAAO;AACtB;AACA,cAAMxD,KAAK,GAAG,KAAKiG,cAAnB;;AACA,cAAI,OAAOjG,KAAP,KAAiB,QAArB,EAA+B;AAC3B,mBAAOA,KAAP;AACH,WAFD,MAGK,IAAIyM,YAAY,CAACjJ,KAAD,CAAhB,EAAyB;AAC1B,mBAAOxD,KAAK,CAACoU,KAAb;AACH;;AACD,iBAAOpU,KAAK,GAAGA,KAAK,CAACqU,KAAT,GAAiB,CAA7B;AACH;AACD;;;;;;;;;wCAMgB7Q,K,EAAO;AACnB;AACA,cAAM8Q,gBAAgB,GAAG,KAAKxK,gBAAL,CAAsByK,YAAtB,CAAmC/Q,KAAnC,CAAzB,CAFmB,CAGnB;AACA;;;AACA,cAAI,KAAKqL,aAAL,IAAsByF,gBAA1B,EAA4C;AACxCpS,4BAAgB,CAAC,KAAK2M,aAAN,EAAqByF,gBAAgB,CAAC7S,GAAtC,EAA2C6S,gBAAgB,CAAC1S,IAA5D,CAAhB;AACH;AACJ;AACD;;;;;;;;qDAK6B;AACzB;AACA,cAAM8B,cAAc,GAAG,KAAKoG,gBAAL,CAAsBhH,SAAtB,CAAgCa,GAAhC,CAAoC,KAAKf,SAAzC,CAAvB;;AACA,iBAAOc,cAAc,GAAGA,cAAc,CAACP,cAAlB,GACjB,KAAKN,cAAL,CAAoBO,yBAApB,EADJ;AAEH;;;4BAt9Bc;AACX,iBAAO,KAAK8C,SAAL,IAAkB,CAAC,EAAE,KAAKqC,cAAL,IAAuB,KAAKA,cAAL,CAAoBrB,QAA7C,CAA1B;AACH;AACD;;;;;0BAIalH,K,EAAO;AAChB;AACA,cAAMwU,QAAQ,GAAG,oFAAsBxU,KAAtB,CAAjB;;AACA,cAAIwU,QAAQ,KAAK,KAAKtO,SAAtB,EAAiC;AAC7B,iBAAKA,SAAL,GAAiBsO,QAAjB;;AACA,iBAAKpK,6BAAL;AACH;AACJ;;;;;;AA08BL,QAAI,KAAJ,EAAW,CAwVV;AACD;;;;;;;;AAMA,aAAS6F,YAAT,CAAsBjO,CAAtB,EAAyBC,CAAzB,EAA4B;AACxB;AACA;AACA,mCAAsB0F,IAAI,CAAC8M,KAAL,CAAWzS,CAAX,CAAtB,iBAA0C2F,IAAI,CAAC8M,KAAL,CAAWxS,CAAX,CAA1C;AACH;AACD;;;;;;;AAKA,aAAS2O,aAAT,CAAuBxM,IAAvB,EAA6B;AACzB;AACA,UAAMsQ,KAAK;AAAI;AAAkBtQ,UAAI,CAACuQ,SAAL,CAAe,IAAf,CAAjC;AACA;;AACA,UAAMC,iBAAiB,GAAGF,KAAK,CAACG,gBAAN,CAAuB,MAAvB,CAA1B;AACA;;AACA,UAAMC,kBAAkB,GAAG1Q,IAAI,CAACyQ,gBAAL,CAAsB,QAAtB,CAA3B,CANyB,CAOzB;;AACAH,WAAK,CAACK,eAAN,CAAsB,IAAtB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,iBAAiB,CAAC9N,MAAtC,EAA8CkO,CAAC,EAA/C,EAAmD;AAC/CJ,yBAAiB,CAACI,CAAD,CAAjB,CAAqBD,eAArB,CAAqC,IAArC;AACH,OAXwB,CAYzB;AACA;;;AACA,UAAID,kBAAkB,CAAChO,MAAvB,EAA+B;AAC3B;AACA,YAAMmO,aAAa,GAAGP,KAAK,CAACG,gBAAN,CAAuB,QAAvB,CAAtB;;AACA,aAAK,IAAIG,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGF,kBAAkB,CAAChO,MAAvC,EAA+CkO,EAAC,EAAhD,EAAoD;AAChD;AACA,cAAME,yBAAyB,GAAGD,aAAa,CAACD,EAAD,CAAb,CAAiBG,UAAjB,CAA4B,IAA5B,CAAlC;;AACA,cAAID,yBAAJ,EAA+B;AAC3BA,qCAAyB,CAACE,SAA1B,CAAoCN,kBAAkB,CAACE,EAAD,CAAtD,EAA2D,CAA3D,EAA8D,CAA9D;AACH;AACJ;AACJ;;AACD,aAAON,KAAP;AACH;AACD;;;;;;;;;AAOA,aAASpB,KAAT,CAAetT,KAAf,EAAsBqV,GAAtB,EAA2BC,GAA3B,EAAgC;AAC5B,aAAO3N,IAAI,CAAC2N,GAAL,CAASD,GAAT,EAAc1N,IAAI,CAAC0N,GAAL,CAASC,GAAT,EAActV,KAAd,CAAd,CAAP;AACH;AACD;;;;;;;AAKA,aAASmL,UAAT,CAAoB/G,IAApB,EAA0B;AACtB,UAAIA,IAAI,IAAIA,IAAI,CAACyI,UAAjB,EAA6B;AACzBzI,YAAI,CAACyI,UAAL,CAAgB0I,WAAhB,CAA4BnR,IAA5B;AACH;AACJ;AACD;;;;;;;AAKA,aAASqI,YAAT,CAAsBjJ,KAAtB,EAA6B;AACzB;AACA;AACA;AACA,aAAOA,KAAK,CAAC+K,IAAN,CAAW,CAAX,MAAkB,GAAzB;AACH;AACD;;;;;;;AAKA,aAASd,wBAAT,CAAkC+H,WAAlC,EAA+C;AAC3C;AACA;AACA;AACA,aAAOA,WAAW,CAACC,iBAAZ,IACHD,WAAW,CAACE,uBADT,IAEHF,WAAW,CAACG,oBAFT,IAGHH,WAAW,CAACI,mBAHT,IAIHJ,WAAW,CAAClI,IAJhB;AAKH;AACD;;;;;;;;;AAOA,aAASoD,WAAT,CAAqBL,OAArB,EAA8BzN,SAA9B,EAAyC;AACrC;AACA,UAAMiT,SAAS,GAAGxF,OAAO,CAACwF,SAA1B;;AACA,UAAIA,SAAS,CAAC/O,MAAV,KAAqB,CAArB,IAA0B+O,SAAS,CAAC,CAAD,CAAT,CAAaC,QAAb,KAA0BlT,SAAS,CAACmT,YAAlE,EAAgF;AAC5E;AAAQ;AAAkBF,mBAAS,CAAC,CAAD;AAAnC;AACH;AACD;;;AACA,UAAMG,OAAO,GAAGpT,SAAS,CAACqT,aAAV,CAAwB,KAAxB,CAAhB;;AACAJ,eAAS,CAACxS,OAAV;AAAmB;;;;AAInB,gBAAAe,IAAI;AAAA,eAAI4R,OAAO,CAACzI,WAAR,CAAoBnJ,IAApB,CAAJ;AAAA,OAJJ;AAKA,aAAO4R,OAAP;AACH;AACD;;;;;;;;AAMA,aAASrF,gBAAT,CAA0BlN,MAA1B,EAAkCyS,UAAlC,EAA8C;AAC1CzS,YAAM,CAACjE,KAAP,CAAaqC,KAAb,aAAwBqU,UAAU,CAACrU,KAAnC;AACA4B,YAAM,CAACjE,KAAP,CAAasC,MAAb,aAAyBoU,UAAU,CAACpU,MAApC;AACA2B,YAAM,CAACjE,KAAP,CAAakM,SAAb,GAAyBuE,YAAY,CAACiG,UAAU,CAACtU,IAAZ,EAAkBsU,UAAU,CAACzU,GAA7B,CAArC;AACH;AAED;;;;;;AAKA;;;;;;;;AAOA;;;;;;;;;;AAQA,aAAS0U,eAAT,CAAyBC,KAAzB,EAAgCC,SAAhC,EAA2CC,OAA3C,EAAoD;AAChD;AACA,UAAMC,IAAI,GAAGC,OAAO,CAACH,SAAD,EAAYD,KAAK,CAACtP,MAAN,GAAe,CAA3B,CAApB;AACA;;AACA,UAAM2P,EAAE,GAAGD,OAAO,CAACF,OAAD,EAAUF,KAAK,CAACtP,MAAN,GAAe,CAAzB,CAAlB;;AACA,UAAIyP,IAAI,KAAKE,EAAb,EAAiB;AACb;AACH;AACD;;;AACA,UAAMhT,MAAM,GAAG2S,KAAK,CAACG,IAAD,CAApB;AACA;;AACA,UAAM7M,KAAK,GAAG+M,EAAE,GAAGF,IAAL,GAAY,CAAC,CAAb,GAAiB,CAA/B;;AACA,WAAK,IAAIvB,CAAC,GAAGuB,IAAb,EAAmBvB,CAAC,KAAKyB,EAAzB,EAA6BzB,CAAC,IAAItL,KAAlC,EAAyC;AACrC0M,aAAK,CAACpB,CAAD,CAAL,GAAWoB,KAAK,CAACpB,CAAC,GAAGtL,KAAL,CAAhB;AACH;;AACD0M,WAAK,CAACK,EAAD,CAAL,GAAYhT,MAAZ;AACH;AACD;;;;;;;;;;;AASA,aAASiT,iBAAT,CAA2BC,YAA3B,EAAyCC,WAAzC,EAAsDzH,YAAtD,EAAoE0H,WAApE,EAAiF;AAC7E;AACA,UAAMN,IAAI,GAAGC,OAAO,CAACrH,YAAD,EAAewH,YAAY,CAAC7P,MAAb,GAAsB,CAArC,CAApB;AACA;;AACA,UAAM2P,EAAE,GAAGD,OAAO,CAACK,WAAD,EAAcD,WAAW,CAAC9P,MAA1B,CAAlB;;AACA,UAAI6P,YAAY,CAAC7P,MAAjB,EAAyB;AACrB8P,mBAAW,CAACE,MAAZ,CAAmBL,EAAnB,EAAuB,CAAvB,EAA0BE,YAAY,CAACG,MAAb,CAAoBP,IAApB,EAA0B,CAA1B,EAA6B,CAA7B,CAA1B;AACH;AACJ;AACD;;;;;;;;;;;;;AAWA,aAASQ,aAAT,CAAuBJ,YAAvB,EAAqCC,WAArC,EAAkDzH,YAAlD,EAAgE0H,WAAhE,EAA6E;AACzE;AACA,UAAMJ,EAAE,GAAGD,OAAO,CAACK,WAAD,EAAcD,WAAW,CAAC9P,MAA1B,CAAlB;;AACA,UAAI6P,YAAY,CAAC7P,MAAjB,EAAyB;AACrB8P,mBAAW,CAACE,MAAZ,CAAmBL,EAAnB,EAAuB,CAAvB,EAA0BE,YAAY,CAACxH,YAAD,CAAtC;AACH;AACJ;AACD;;;;;;;;AAMA,aAASqH,OAAT,CAAiBxW,KAAjB,EAAwBsV,GAAxB,EAA6B;AACzB,aAAO3N,IAAI,CAAC2N,GAAL,CAAS,CAAT,EAAY3N,IAAI,CAAC0N,GAAL,CAASC,GAAT,EAActV,KAAd,CAAZ,CAAP;AACH;AAED;;;;;;AAKA;;;;;;;AAKA,QAAMgX,wBAAwB,GAAG,IAAjC;AACA;;;;;;AAKA,QAAMC,0BAA0B,GAAG,IAAnC;AACA;;;;;;AAKA,QAAMC,gBAAgB,GAAG,CAAzB;AACA;;;;;;AAKA,aAASC,kBAAT,GAA8B,CAAG;;AACjC,QAAI,KAAJ,EAAW,CAgBV;AACD;;;AACA,QAAMC,2BAA2B,GAAG;AAChCC,UAAI,EAAE,CAD0B;AACvBC,QAAE,EAAE,CADmB;AAChBC,UAAI,EAAE;AADU,KAApC;AAGA;;AACA,QAAMC,6BAA6B,GAAG;AAClCH,UAAI,EAAE,CAD4B;AACzBI,UAAI,EAAE,CADmB;AAChBC,WAAK,EAAE;AADS,KAAtC;AAGA;;;;;;;AAMA,aAASC,mBAAT,GAA+B,CAAG;AAClC;;;;;;QAIMC,W;AACF;;;;;;;AAOA,2BAAYvY,OAAZ,EAAqB6F,iBAArB,EAAwCtC,SAAxC,EAAmDqC,OAAnD,EAA4DpC,cAA5D,EAA4E;AAAA;;AAAA;;AACxE,aAAKqC,iBAAL,GAAyBA,iBAAzB;AACA,aAAKD,OAAL,GAAeA,OAAf;AACA,aAAKpC,cAAL,GAAsBA,cAAtB;AACA;;;;AAGA,aAAKqE,QAAL,GAAgB,KAAhB;AACA;;;;AAGA,aAAK4I,eAAL,GAAuB,KAAvB;AACA;;;;;AAIA,aAAK+H,kBAAL,GAA0B,KAA1B;AACA;;;;;AAIA,aAAKC,cAAL;AAAuB;;;AAGvB;AAAA,iBAAM,IAAN;AAAA,SAHA;AAIA;;;;;AAGA,aAAK3R,aAAL,GAAqB,IAAI,4CAAJ,EAArB;AACA;;;;AAGA,aAAKI,OAAL,GAAe,IAAI,4CAAJ,EAAf;AACA;;;;;AAIA,aAAKC,MAAL,GAAc,IAAI,4CAAJ,EAAd;AACA;;;;AAGA,aAAKC,OAAL,GAAe,IAAI,4CAAJ,EAAf;AACA;;;;AAGA,aAAKsR,MAAL,GAAc,IAAI,4CAAJ,EAAd;AACA;;;;AAGA,aAAKC,WAAL,GAAmB,KAAnB;AACA;;;;AAGA,aAAKC,cAAL,GAAsB,EAAtB;AACA;;;;;AAIA,aAAKC,aAAL,GAAqB;AAAEC,cAAI;AAAG;AAAkB,cAA3B;AAAmCzO,eAAK,EAAE;AAA1C,SAArB;AACA;;;;AAGA,aAAK0O,SAAL,GAAiB,EAAjB;AACA;;;;AAGA,aAAKC,YAAL,GAAoB,UAApB;AACA;;;;AAGA,aAAKC,eAAL,GAAuB,IAAIvS,GAAJ,EAAvB;AACA;;;;AAGA,aAAKC,UAAL,GAAkB,KAAlB;AACA;;;;AAGA,aAAKuS,2BAAL,GAAmC,kDAAahT,KAAhD;AACA;;;;AAGA,aAAKiT,wBAAL,GAAgC;AAAE;AAAlC;AACA;;;;AAGA,aAAKC,0BAAL,GAAkC;AAAE;AAApC;AACA;;;;AAGA,aAAKC,iBAAL,GAAyB,IAAI,4CAAJ,EAAzB;AACA;;;;AAGA,aAAKC,iBAAL,GAAyB,IAAzB;AACA;;;;AAGA,aAAKC,oBAAL;AAA6B;;;AAG7B,oBAAM;AACF,iBAAI,CAACxM,cAAL;;AACA,gEAAS,CAAT,EAAY,4DAAZ,EACKyM,IADL,CACU,iEAAU,OAAI,CAACH,iBAAf,CADV,EAEKzN,SAFL;AAEgB;;;AAGhB,sBAAM;AACF;AACA,gBAAM7G,IAAI,GAAG,OAAI,CAAC0U,WAAlB;;AACA,gBAAI,OAAI,CAACN,wBAAL,KAAkC;AAAE;AAAxC,cAAkD;AAC9CO,uCAAuB,CAAC3U,IAAD,EAAO,CAAC8S,gBAAR,CAAvB;AACH,eAFD,MAGK,IAAI,OAAI,CAACsB,wBAAL,KAAkC;AAAE;AAAxC,cAAoD;AACrDO,uCAAuB,CAAC3U,IAAD,EAAO8S,gBAAP,CAAvB;AACH;;AACD,gBAAI,OAAI,CAACuB,0BAAL,KAAoC;AAAE;AAA1C,cAAsD;AAClDO,yCAAyB,CAAC5U,IAAD,EAAO,CAAC8S,gBAAR,CAAzB;AACH,eAFD,MAGK,IAAI,OAAI,CAACuB,0BAAL,KAAoC;AAAE;AAA1C,cAAuD;AACxDO,yCAAyB,CAAC5U,IAAD,EAAO8S,gBAAP,CAAzB;AACH;AACJ,WApBD;AAqBH,SA1BD;;AA2BA,aAAK7X,OAAL,GAAe,4EAAcA,OAAd,CAAf;AACA,aAAKuD,SAAL,GAAiBA,SAAjB;AACA,aAAKqW,qBAAL,CAA2B,CAAC,KAAK5Z,OAAN,CAA3B;;AACA6F,yBAAiB,CAACgU,qBAAlB,CAAwC,IAAxC;;AACA,aAAKpP,gBAAL,GAAwB,IAAInH,qBAAJ,CAA0BC,SAA1B,EAAqCC,cAArC,CAAxB;AACH;AACD;;;;;;;;kCAIU;AACN,eAAKuJ,cAAL;;AACA,eAAKsM,iBAAL,CAAuBjN,QAAvB;;AACA,eAAK8M,2BAAL,CAAiCxN,WAAjC;;AACA,eAAK5E,aAAL,CAAmBsF,QAAnB;AACA,eAAKlF,OAAL,CAAakF,QAAb;AACA,eAAKjF,MAAL,CAAYiF,QAAZ;AACA,eAAKhF,OAAL,CAAagF,QAAb;AACA,eAAKsM,MAAL,CAAYtM,QAAZ;;AACA,eAAK6M,eAAL,CAAqBtV,KAArB;;AACA,eAAK8V,WAAL;AAAoB;AAAkB,cAAtC;;AACA,eAAKhP,gBAAL,CAAsB9G,KAAtB;;AACA,eAAKkC,iBAAL,CAAuBiU,mBAAvB,CAA2C,IAA3C;AACH;AACD;;;;;;;qCAIa;AACT,iBAAO,KAAKnB,WAAZ;AACH;AACD;;;;;;;gCAIQ;AAAA;;AACJ;AACA,cAAMoB,MAAM,GAAG,4EAAc,KAAK/Z,OAAnB,EAA4BG,KAA3C;AACA,eAAK2G,aAAL,CAAmBU,IAAnB;AACA,eAAKmR,WAAL,GAAmB,IAAnB,CAJI,CAKJ;AACA;AACA;;AACA,eAAKqB,kBAAL,GAA0BD,MAAM,CAACE,gBAAP;AAA6B;AAAkBF,gBAApB,CAA8BG,cAAzD,IAA2E,EAArG;;AACE;AAAkBH,gBAApB,CAA8BG,cAA9B,GAA+CH,MAAM,CAACE,gBAAP,GAA0B,MAAzE;;AACA,eAAKE,WAAL;;AACA,eAAKpB,SAAL,CAAe/U,OAAf;AAAwB;;;;AAIxB,oBAAAoW,OAAO;AAAA,mBAAIA,OAAO,CAACC,eAAR,CAAwB,OAAxB,CAAJ;AAAA,WAJP;;AAKA,eAAKnB,2BAAL,CAAiCxN,WAAjC;;AACA,eAAK4O,qBAAL;AACH;AACD;;;;;;;;;;;;8BASMrK,I,EAAMhN,Q,EAAUC,Q,EAAUqX,K,EAAO;AACnC,eAAKlM,KAAL,GADmC,CAEnC;AACA;;AACA;;AACA,cAAImM,QAAJ;;AACA,cAAID,KAAK,IAAI,IAAb,EAAmB;AACfC,oBAAQ,GAAG,KAAK/J,eAAL,GAAuB,KAAKgK,WAAL,CAAiB3Z,OAAjB,CAAyBmP,IAAzB,CAAvB,GAAwD,CAAC,CAApE;;AACA,gBAAIuK,QAAQ,KAAK,CAAC,CAAlB,EAAqB;AACjB;AACA;AACAA,sBAAQ,GAAG,KAAKE,gCAAL,CAAsCzK,IAAtC,EAA4ChN,QAA5C,EAAsDC,QAAtD,CAAX;AACH;AACJ,WAPD,MAQK;AACDsX,oBAAQ,GAAGD,KAAX;AACH;AACD;;;AACA,cAAMI,gBAAgB,GAAG,KAAKC,iBAA9B;AACA;;AACA,cAAM9K,YAAY,GAAG6K,gBAAgB,CAAC7Z,OAAjB,CAAyBmP,IAAzB,CAArB;AACA;;AACA,cAAMtC,WAAW,GAAGsC,IAAI,CAACrF,qBAAL,EAApB;AACA;;AACA,cAAIiQ,oBAAoB,GAAGF,gBAAgB,CAACH,QAAD,CAA3C,CAxBmC,CAyBnC;AACA;AACA;;AACA,cAAIK,oBAAoB,KAAK5K,IAA7B,EAAmC;AAC/B4K,gCAAoB,GAAGF,gBAAgB,CAACH,QAAQ,GAAG,CAAZ,CAAvC;AACH,WA9BkC,CA+BnC;AACA;;;AACA,cAAI1K,YAAY,GAAG,CAAC,CAApB,EAAuB;AACnB6K,4BAAgB,CAAClD,MAAjB,CAAwB3H,YAAxB,EAAsC,CAAtC;AACH,WAnCkC,CAoCnC;AACA;;;AACA,cAAI+K,oBAAoB,IAAI,CAAC,KAAKhV,iBAAL,CAAuBsD,UAAvB,CAAkC0R,oBAAlC,CAA7B,EAAsF;AAClF;AACA,gBAAM7a,OAAO,GAAG6a,oBAAoB,CAAChQ,cAArB,EAAhB;;AACC;AAAkB7K,mBAAO,CAAC8a,aAA3B,CAA2C/M,YAA3C,CAAwDJ,WAAxD,EAAqE3N,OAArE;AACA2a,4BAAgB,CAAClD,MAAjB,CAAwB+C,QAAxB,EAAkC,CAAlC,EAAqCvK,IAArC;AACH,WALD,MAMK;AACD;AACA,gBAAMjQ,QAAO,GAAG,4EAAc,KAAKA,OAAnB,CAAhB;;AACA,gBAAI,KAAK+a,wBAAL,CAA8B9X,QAA9B,EAAwCC,QAAxC,CAAJ,EAAuD;AACnDlD,sBAAO,CAAC+N,YAAR,CAAqBJ,WAArB,EAAkCgN,gBAAgB,CAAC,CAAD,CAAhB,CAAoB9P,cAApB,EAAlC;;AACA8P,8BAAgB,CAACK,OAAjB,CAAyB/K,IAAzB;AACH,aAHD,MAIK;AACDjQ,sBAAO,CAACkO,WAAR,CAAoBP,WAApB;;AACAgN,8BAAgB,CAACM,IAAjB,CAAsBhL,IAAtB;AACH;AACJ,WAvDkC,CAwDnC;;;AACAtC,qBAAW,CAACxN,KAAZ,CAAkBkM,SAAlB,GAA8B,EAA9B,CAzDmC,CA0DnC;AACA;;AACA,eAAK6O,mBAAL;;AACA,eAAKC,qBAAL;;AACA,eAAKjU,OAAL,CAAaM,IAAb,CAAkB;AAAEyI,gBAAI,EAAJA,IAAF;AAAQzD,qBAAS,EAAE,IAAnB;AAAyBsD,wBAAY,EAAE,KAAKtB,YAAL,CAAkByB,IAAlB;AAAvC,WAAlB;AACH;AACD;;;;;;;;6BAKKA,I,EAAM;AACP,eAAKmL,MAAL;;AACA,eAAKjU,MAAL,CAAYK,IAAZ,CAAiB;AAAEyI,gBAAI,EAAJA,IAAF;AAAQzD,qBAAS,EAAE;AAAnB,WAAjB;AACH;AACD;;;;;;;;;;;;;;;;6BAaKyD,I,EAAMH,Y,EAAcK,iB,EAAmBJ,sB,EAAwB5F,Q,EAAU+F,a,EAAe;AACzF,eAAKkL,MAAL,GADyF,CAEzF;;;AACA,cAAIlL,aAAa,IAAI,IAArB,EAA2B;AACvBA,yBAAa,GAAGC,iBAAiB,CAAC3B,YAAlB,CAA+ByB,IAA/B,CAAhB;AACH;;AACD,eAAK7I,OAAL,CAAaI,IAAb,CAAkB;AAAEyI,gBAAI,EAAJA,IAAF;AACdH,wBAAY,EAAZA,YADc;AAEdI,yBAAa,EAAbA,aAFc;AAGd1D,qBAAS,EAAE,IAHG;AAId2D,6BAAiB,EAAjBA,iBAJc;AAKdJ,kCAAsB,EAAtBA,sBALc;AAMd5F,oBAAQ,EAARA;AANc,WAAlB;AAQH;AACD;;;;;;;;;;kCAOUkR,K,EAAO;AAAA;;AACb;AACA,cAAMC,aAAa;AAAI;AAAkB,cAAnB,CAA0Bb,WAAhD;;AACC;AAAkB,cAAnB,CAA0BA,WAA1B,GAAwCY,KAAxC;AACAA,eAAK,CAACrX,OAAN;AAAe;;;;AAIf,oBAAAiM,IAAI;AAAA,mBAAIA,IAAI,CAACsL,kBAAL;AAAyB;AAAkB,mBAA3C,CAAJ;AAAA,WAJJ;;AAKA;AAAK;AAAkB,cAAnB,CAA0BpS,UAA1B,EAAJ,EAA4C;AACxC;AACA,gBAAMqS,YAAY,GAAGF,aAAa,CAACG,MAAd;AAAsB;;;;AAI3C,sBAAAxL,IAAI;AAAA,qBAAIA,IAAI,CAAC9G,UAAL,EAAJ;AAAA,aAJiB,CAArB,CAFwC,CAOxC;AACA;;AACA,gBAAIqS,YAAY,CAACE,KAAb;AAAoB;;;;AAIxB,sBAAAzL,IAAI;AAAA,qBAAIoL,KAAK,CAACva,OAAN,CAAcmP,IAAd,MAAwB,CAAC,CAA7B;AAAA,aAJA,CAAJ,EAIsC;AACjC;AAAkB,kBAAnB,CAA0BmL,MAA1B;AACH,aAND,MAOK;AACA;AAAkB,kBAAnB,CAA0BjB,WAA1B;AACH;AACJ;;AACD;AAAQ;AAAkB;AAA1B;AACH;AACD;;;;;;;;;;sCAOc5N,S,EAAW;AACpB;AAAkB,cAAnB,CAA0B5F,UAA1B,GAAuC4F,SAAvC;AACA;AAAQ;AAAkB;AAA1B;AACH;AACD;;;;;;;;;;;oCAQYoP,Y,EAAa;AACpB;AAAkB,cAAnB,CAA0B5C,SAA1B,GAAsC4C,YAAW,CAACC,KAAZ,EAAtC;AACA;AAAQ;AAAkB;AAA1B;AACH;AACD;;;;;;;;;;wCAOgBC,W,EAAa;AACxB;AAAkB,cAAnB,CAA0B7C,YAA1B,GAAyC6C,WAAzC;AACA;AAAQ;AAAkB;AAA1B;AACH;AACD;;;;;;;;;;8CAOsBjY,Q,EAAU;AAC5B;AACA,cAAM5D,OAAO,GAAG;AAAe;AAAkB,cAAnB,CAA0BA,OAAxC,CAAhB,CAF4B,CAG5B;AACA;;AACC;AAAkB,cAAnB,CAA0B8b,mBAA1B,GACIlY,QAAQ,CAAC9C,OAAT,CAAiBd,OAAjB,MAA8B,CAAC,CAA/B,IAAoCA,OAApC,4BAAgD4D,QAAhD,KAA4DA,QAAQ,CAACgY,KAAT,EADhE;AAEA;AAAQ;AAAkB;AAA1B;AACH;AACD;;;;;;;+CAIuB;AACnB,iBAAO,KAAKE,mBAAZ;AACH;AACD;;;;;;;;qCAKa7L,I,EAAM;AACf,cAAI,CAAC,KAAK0I,WAAV,EAAuB;AACnB,mBAAO,KAAK8B,WAAL,CAAiB3Z,OAAjB,CAAyBmP,IAAzB,CAAP;AACH,WAHc,CAIf;AACA;AACA;;AACA;;;AACA,cAAMoL,KAAK,GAAG,KAAKrC,YAAL,KAAsB,YAAtB,IAAsC,KAAKrS,UAAL,KAAoB,KAA1D,GACV,KAAKiS,cAAL,CAAoBgD,KAApB,GAA4BG,OAA5B,EADU,GAC8B,KAAKnD,cADjD;AAEA,iBAAOoD,SAAS,CAACX,KAAD;AAAS;;;;AAIzB,oBAAAY,WAAW;AAAA,mBAAIA,WAAW,CAACnD,IAAZ,KAAqB7I,IAAzB;AAAA,WAJK,CAAhB;AAKH;AACD;;;;;;;;sCAKc;AACV,iBAAO,KAAKgJ,eAAL,CAAqBiD,IAArB,GAA4B,CAAnC;AACH;AACD;;;;;;;;;;;kCAQUjM,I,EAAMhN,Q,EAAUC,Q,EAAUiZ,Y,EAAc;AAC9C;AACA,cAAI,KAAK1L,eAAL,IACA,CAAC3N,uBAAuB,CAAC,KAAKsZ,WAAN,EAAmBzE,wBAAnB,EAA6C1U,QAA7C,EAAuDC,QAAvD,CAD5B,EAC8F;AAC1F;AACH;AACD;;;AACA,cAAMmZ,QAAQ,GAAG,KAAKzD,cAAtB;AACA;;AACA,cAAM4B,QAAQ,GAAG,KAAKE,gCAAL,CAAsCzK,IAAtC,EAA4ChN,QAA5C,EAAsDC,QAAtD,EAAgEiZ,YAAhE,CAAjB;;AACA,cAAI3B,QAAQ,KAAK,CAAC,CAAd,IAAmB6B,QAAQ,CAAC5U,MAAT,GAAkB,CAAzC,EAA4C;AACxC;AACH;AACD;;;AACA,cAAM6U,YAAY,GAAG,KAAKtD,YAAL,KAAsB,YAA3C;AACA;;AACA,cAAMlJ,YAAY,GAAGkM,SAAS,CAACK,QAAD;AAAY;;;;AAI1C,oBAAAJ,WAAW;AAAA,mBAAIA,WAAW,CAACnD,IAAZ,KAAqB7I,IAAzB;AAAA,WAJmB,CAA9B;AAKA;;AACA,cAAMsM,oBAAoB,GAAGF,QAAQ,CAAC7B,QAAD,CAArC;AACA;;AACA,cAAMhG,eAAe,GAAG6H,QAAQ,CAACvM,YAAD,CAAR,CAAuB5N,UAA/C;AACA;;AACA,cAAMsa,WAAW,GAAGD,oBAAoB,CAACra,UAAzC;AACA;;AACA,cAAMmI,KAAK,GAAGyF,YAAY,GAAG0K,QAAf,GAA0B,CAA1B,GAA8B,CAAC,CAA7C;AACA,eAAK3B,aAAL,CAAmBC,IAAnB,GAA0ByD,oBAAoB,CAACzD,IAA/C;AACA,eAAKD,aAAL,CAAmBxO,KAAnB,GAA2BiS,YAAY,GAAGH,YAAY,CAACxZ,CAAhB,GAAoBwZ,YAAY,CAACvZ,CAAxE,CA9B8C,CA+B9C;;AACA;;AACA,cAAM6Z,UAAU,GAAG,KAAKC,gBAAL,CAAsBlI,eAAtB,EAAuCgI,WAAvC,EAAoDnS,KAApD,CAAnB,CAjC8C,CAkC9C;;AACA;;;AACA,cAAMsS,aAAa,GAAG,KAAKC,mBAAL,CAAyB9M,YAAzB,EAAuCuM,QAAvC,EAAiDhS,KAAjD,CAAtB,CApC8C,CAqC9C;AACA;;AACA;;;AACA,cAAMwS,QAAQ,GAAGR,QAAQ,CAACT,KAAT,EAAjB,CAxC8C,CAyC9C;;AACA9E,yBAAe,CAACuF,QAAD,EAAWvM,YAAX,EAAyB0K,QAAzB,CAAf;AACA,eAAK9B,MAAL,CAAYlR,IAAZ,CAAiB;AACb0I,yBAAa,EAAEJ,YADF;AAEbA,wBAAY,EAAE0K,QAFD;AAGbhO,qBAAS,EAAE,IAHE;AAIbyD,gBAAI,EAAJA;AAJa,WAAjB;AAMAoM,kBAAQ,CAACrY,OAAT;AAAkB;;;;;AAKlB,oBAACoW,OAAD,EAAUG,KAAV,EAAoB;AAChB;AACA,gBAAIsC,QAAQ,CAACtC,KAAD,CAAR,KAAoBH,OAAxB,EAAiC;AAC7B;AACH;AACD;;;AACA,gBAAM0C,aAAa,GAAG1C,OAAO,CAACtB,IAAR,KAAiB7I,IAAvC;AACA;;AACA,gBAAM8M,MAAM,GAAGD,aAAa,GAAGL,UAAH,GAAgBE,aAA5C;AACA;;AACA,gBAAMK,eAAe,GAAGF,aAAa,GAAG7M,IAAI,CAACrF,qBAAL,EAAH,GACjCwP,OAAO,CAACtB,IAAR,CAAajO,cAAb,EADJ,CAVgB,CAYhB;;AACAuP,mBAAO,CAAC2C,MAAR,IAAkBA,MAAlB,CAbgB,CAchB;AACA;AACA;AACA;;AACA,gBAAIT,YAAJ,EAAkB;AACd;AACA;AACAU,6BAAe,CAAC7c,KAAhB,CAAsBkM,SAAtB,yBAAiD/D,IAAI,CAAC8M,KAAL,CAAWgF,OAAO,CAAC2C,MAAnB,CAAjD;AACAla,8BAAgB,CAACuX,OAAO,CAAClY,UAAT,EAAqB,CAArB,EAAwB6a,MAAxB,CAAhB;AACH,aALD,MAMK;AACDC,6BAAe,CAAC7c,KAAhB,CAAsBkM,SAAtB,4BAAoD/D,IAAI,CAAC8M,KAAL,CAAWgF,OAAO,CAAC2C,MAAnB,CAApD;AACAla,8BAAgB,CAACuX,OAAO,CAAClY,UAAT,EAAqB6a,MAArB,EAA6B,CAA7B,CAAhB;AACH;AACJ,WAjCD;AAkCH;AACD;;;;;;;;;;mDAO2B9Z,Q,EAAUC,Q,EAAU;AAAA;;AAC3C,cAAI,KAAKsV,kBAAT,EAA6B;AACzB;AACH;AACD;;;AACA,cAAIyE,UAAJ;AACA;;AACA,cAAIC,uBAAuB,GAAG;AAAE;AAAhC;AACA;;AACA,cAAIC,yBAAyB,GAAG;AAAE;AAAlC,WAT2C,CAU3C;;AACA,eAAK1S,gBAAL,CAAsBhH,SAAtB,CAAgCO,OAAhC;AAAyC;;;;;AAKzC,oBAACc,QAAD,EAAW9E,OAAX,EAAuB;AACnB;AACA;AACA,gBAAIA,OAAO,KAAK,OAAI,CAACuD,SAAjB,IAA8B,CAACuB,QAAQ,CAAC5C,UAAxC,IAAsD+a,UAA1D,EAAsE;AAClE;AACH;;AACD,gBAAIna,uBAAuB,CAACgC,QAAQ,CAAC5C,UAAV,EAAsByV,wBAAtB,EAAgD1U,QAAhD,EAA0DC,QAA1D,CAA3B,EAAgG;AAAA,0CACrCka,0BAA0B;AAAE;AAAkBpd,qBAApB,EAA+B8E,QAAQ,CAAC5C,UAAxC,EAAoDe,QAApD,EAA8DC,QAA9D,CADW;;AAAA;;AAC3Fga,qCAD2F;AAClEC,uCADkE;;AAE5F,kBAAID,uBAAuB,IAAIC,yBAA/B,EAA0D;AACtDF,0BAAU;AAAI;AAAkBjd,uBAAhC;AACH;AACJ;AACJ,WAjBD,EAX2C,CA6B3C;;;AACA,cAAI,CAACkd,uBAAD,IAA4B,CAACC,yBAAjC,EAA4D;AAAA,wCAC9B,KAAK3Z,cAAL,CAAoB6Z,eAApB,EAD8B;AAAA,gBAChD7a,KADgD,yBAChDA,KADgD;AAAA,gBACzCC,MADyC,yBACzCA,MADyC;AAExD;;;AACA,gBAAMP,UAAU,GAAG;AAAEM,mBAAK,EAALA,KAAF;AAASC,oBAAM,EAANA,MAAT;AAAiBL,iBAAG,EAAE,CAAtB;AAAyBC,mBAAK,EAAEG,KAAhC;AAAuCF,oBAAM,EAAEG,MAA/C;AAAuDF,kBAAI,EAAE;AAA7D,aAAnB;AACA2a,mCAAuB,GAAGI,0BAA0B,CAACpb,UAAD,EAAagB,QAAb,CAApD;AACAia,qCAAyB,GAAGI,4BAA4B,CAACrb,UAAD,EAAae,QAAb,CAAxD;AACAga,sBAAU,GAAGO,MAAb;AACH;;AACD,cAAIP,UAAU,KAAKC,uBAAuB,KAAK,KAAK/D,wBAAjC,IACfgE,yBAAyB,KAAK,KAAK/D,0BADpB,IAEf6D,UAAU,KAAK,KAAKxD,WAFV,CAAd,EAEsC;AAClC,iBAAKN,wBAAL,GAAgC+D,uBAAhC;AACA,iBAAK9D,0BAAL,GAAkC+D,yBAAlC;AACA,iBAAK1D,WAAL,GAAmBwD,UAAnB;;AACA,gBAAI,CAACC,uBAAuB,IAAIC,yBAA5B,KAA0DF,UAA9D,EAA0E;AACtE,mBAAKrX,OAAL,CAAayF,iBAAb,CAA+B,KAAKkO,oBAApC;AACH,aAFD,MAGK;AACD,mBAAKxM,cAAL;AACH;AACJ;AACJ;AACD;;;;;;;yCAIiB;AACb,eAAKsM,iBAAL,CAAuB7R,IAAvB;AACH;AACD;;;;;;;;gDAKwB;AACpB;AACA,cAAMxH,OAAO,GAAG,4EAAc,KAAKA,OAAnB,CAAhB;;AACA,eAAKyK,gBAAL,CAAsBgE,KAAtB,CAA4B,KAAKqN,mBAAjC,EAHoB,CAIpB;AACA;;;AACA,eAAKM,WAAL;AAAoB;;AAAmB;AAAkB,eAAK3R,gBAAL,CAAsBhH,SAAtB,CAAgCa,GAAhC,CAAoCtE,OAApC,CAAnB,CAAkEkC,UAAxG;AACH;AACD;;;;;;;;8CAKsB;AAClB;AACA,cAAMoa,YAAY,GAAG,KAAKtD,YAAL,KAAsB,YAA3C;AACA,eAAKJ,cAAL,GAAsB,KAAKgC,iBAAL,CAAuB9Y,GAAvB;AAA4B;;;;AAIlD,oBAAAgX,IAAI,EAAI;AACJ;AACA,gBAAM2E,gBAAgB,GAAG3E,IAAI,CAAC4E,iBAAL,EAAzB;AACA,mBAAO;AAAE5E,kBAAI,EAAJA,IAAF;AAAQiE,oBAAM,EAAE,CAAhB;AAAmB7a,wBAAU,EAAED,oBAAoB,CAACwb,gBAAD;AAAnD,aAAP;AACH,WARqB,EAQlBE,IARkB;AAQZ;;;;;AAKV,oBAACC,CAAD,EAAIC,CAAJ,EAAU;AACN,mBAAOvB,YAAY,GAAGsB,CAAC,CAAC1b,UAAF,CAAaK,IAAb,GAAoBsb,CAAC,CAAC3b,UAAF,CAAaK,IAApC,GACfqb,CAAC,CAAC1b,UAAF,CAAaE,GAAb,GAAmByb,CAAC,CAAC3b,UAAF,CAAaE,GADpC;AAEH,WAhBqB,CAAtB;AAiBH;AACD;;;;;;;;iCAKS;AAAA;;AACL,eAAKuW,WAAL,GAAmB,KAAnB;AACA;;AACA,cAAMoB,MAAM,GAAG,4EAAc,KAAK/Z,OAAnB,EAA4BG,KAA3C;;AACE;AAAkB4Z,gBAApB,CAA8BG,cAA9B,GAA+CH,MAAM,CAACE,gBAAP,GAA0B,KAAKD,kBAA9E,CAJK,CAKL;;AACA,eAAKY,iBAAL,CAAuB5W,OAAvB;AAAgC;;;;AAIhC,oBAAAiM,IAAI,EAAI;AACJ;AACA,gBAAM9E,WAAW,GAAG8E,IAAI,CAACpF,cAAL,EAApB;;AACA,gBAAIM,WAAJ,EAAiB;AACbA,yBAAW,CAAChL,KAAZ,CAAkBkM,SAAlB,GAA8B,EAA9B;AACH;AACJ,WAVD;;AAWA,eAAK0M,SAAL,CAAe/U,OAAf;AAAwB;;;;AAIxB,oBAAAoW,OAAO;AAAA,mBAAIA,OAAO,CAAC0D,cAAR,CAAuB,OAAvB,CAAJ;AAAA,WAJP;;AAKA,eAAKlD,iBAAL,GAAyB,EAAzB;AACA,eAAKhC,cAAL,GAAsB,EAAtB;AACA,eAAKC,aAAL,CAAmBC,IAAnB,GAA0B,IAA1B;AACA,eAAKD,aAAL,CAAmBxO,KAAnB,GAA2B,CAA3B;;AACA,eAAK0C,cAAL;;AACA,eAAKmM,2BAAL,CAAiCxN,WAAjC;;AACA,eAAKjB,gBAAL,CAAsB9G,KAAtB;AACH;AACD;;;;;;;;;;;4CAQoBmM,Y,EAAcuM,Q,EAAUhS,K,EAAO;AAC/C;AACA,cAAMiS,YAAY,GAAG,KAAKtD,YAAL,KAAsB,YAA3C;AACA;;AACA,cAAMxE,eAAe,GAAG6H,QAAQ,CAACvM,YAAD,CAAR,CAAuB5N,UAA/C;AACA;;AACA,cAAM6b,gBAAgB,GAAG1B,QAAQ,CAACvM,YAAY,GAAGzF,KAAK,GAAG,CAAC,CAAzB,CAAjC;AACA;;AACA,cAAIsS,aAAa,GAAGnI,eAAe,CAAC8H,YAAY,GAAG,OAAH,GAAa,QAA1B,CAAf,GAAqDjS,KAAzE;;AACA,cAAI0T,gBAAJ,EAAsB;AAClB;AACA,gBAAM1P,KAAK,GAAGiO,YAAY,GAAG,MAAH,GAAY,KAAtC;AACA;;AACA,gBAAM0B,GAAG,GAAG1B,YAAY,GAAG,OAAH,GAAa,QAArC,CAJkB,CAKlB;AACA;AACA;AACA;;AACA,gBAAIjS,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdsS,2BAAa,IAAIoB,gBAAgB,CAAC7b,UAAjB,CAA4BmM,KAA5B,IAAqCmG,eAAe,CAACwJ,GAAD,CAArE;AACH,aAFD,MAGK;AACDrB,2BAAa,IAAInI,eAAe,CAACnG,KAAD,CAAf,GAAyB0P,gBAAgB,CAAC7b,UAAjB,CAA4B8b,GAA5B,CAA1C;AACH;AACJ;;AACD,iBAAOrB,aAAP;AACH;AACD;;;;;;;;;;;yCAQiBnI,e,EAAiBgI,W,EAAanS,K,EAAO;AAClD;AACA,cAAMiS,YAAY,GAAG,KAAKtD,YAAL,KAAsB,YAA3C;AACA;;AACA,cAAIyD,UAAU,GAAGH,YAAY,GAAGE,WAAW,CAACja,IAAZ,GAAmBiS,eAAe,CAACjS,IAAtC,GACzBia,WAAW,CAACpa,GAAZ,GAAkBoS,eAAe,CAACpS,GADtC,CAJkD,CAMlD;;AACA,cAAIiI,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdoS,sBAAU,IAAIH,YAAY,GAAGE,WAAW,CAACha,KAAZ,GAAoBgS,eAAe,CAAChS,KAAvC,GACtBga,WAAW,CAAC/Z,MAAZ,GAAqB+R,eAAe,CAAC/R,MADzC;AAEH;;AACD,iBAAOga,UAAP;AACH;AACD;;;;;;;;;;iDAOyBxZ,Q,EAAUC,Q,EAAU;AACzC,cAAI,CAAC,KAAK0X,iBAAL,CAAuBnT,MAA5B,EAAoC;AAChC,mBAAO,KAAP;AACH;AACD;;;AACA,cAAMwW,aAAa,GAAG,KAAKrF,cAA3B;AACA;;AACA,cAAM0D,YAAY,GAAG,KAAKtD,YAAL,KAAsB,YAA3C,CAPyC,CAQzC;AACA;;AACA;;AACA,cAAMkF,QAAQ,GAAGD,aAAa,CAAC,CAAD,CAAb,CAAiBnF,IAAjB,KAA0B,KAAK8B,iBAAL,CAAuB,CAAvB,CAA3C;;AACA,cAAIsD,QAAJ,EAAc;AACV;AACA,gBAAMC,YAAY,GAAGF,aAAa,CAACA,aAAa,CAACxW,MAAd,GAAuB,CAAxB,CAAb,CAAwCvF,UAA7D;AACA,mBAAOoa,YAAY,GAAGrZ,QAAQ,IAAIkb,YAAY,CAAC9b,KAA5B,GAAoCa,QAAQ,IAAIib,YAAY,CAAC7b,MAAhF;AACH,WAJD,MAKK;AACD;AACA,gBAAM8b,aAAa,GAAGH,aAAa,CAAC,CAAD,CAAb,CAAiB/b,UAAvC;AACA,mBAAOoa,YAAY,GAAGrZ,QAAQ,IAAImb,aAAa,CAAC7b,IAA7B,GAAoCW,QAAQ,IAAIkb,aAAa,CAAChc,GAAjF;AACH;AACJ;AACD;;;;;;;;;;;;yDASiC6N,I,EAAMhN,Q,EAAUC,Q,EAAUmH,K,EAAO;AAAA;;AAC9D;AACA,cAAMiS,YAAY,GAAG,KAAKtD,YAAL,KAAsB,YAA3C;AACA,iBAAOgD,SAAS,CAAC,KAAKpD,cAAN;AAAuB;;;;;;AAMvC,2BAAuByF,CAAvB,EAA0BtH,KAA1B,EAAoC;AAAA,gBAAjC+B,IAAiC,SAAjCA,IAAiC;AAAA,gBAA3B5W,UAA2B,SAA3BA,UAA2B;;AAChC,gBAAI4W,IAAI,KAAK7I,IAAb,EAAmB;AACf;AACA;AACA,qBAAO8G,KAAK,CAACtP,MAAN,GAAe,CAAtB;AACH;;AACD,gBAAI4C,KAAJ,EAAW;AACP;AACA,kBAAMkC,SAAS,GAAG+P,YAAY,GAAGjS,KAAK,CAAC1H,CAAT,GAAa0H,KAAK,CAACzH,CAAjD,CAFO,CAGP;AACA;;AACA,kBAAIkW,IAAI,KAAK,OAAI,CAACD,aAAL,CAAmBC,IAA5B,IAAoCvM,SAAS,KAAK,OAAI,CAACsM,aAAL,CAAmBxO,KAAzE,EAAgF;AAC5E,uBAAO,KAAP;AACH;AACJ;;AACD,mBAAOiS,YAAY,GACf;AACA;AACArZ,oBAAQ,IAAIqF,IAAI,CAACgW,KAAL,CAAWpc,UAAU,CAACK,IAAtB,CAAZ,IAA2CU,QAAQ,GAAGqF,IAAI,CAACgW,KAAL,CAAWpc,UAAU,CAACG,KAAtB,CAHvC,GAIfa,QAAQ,IAAIoF,IAAI,CAACgW,KAAL,CAAWpc,UAAU,CAACE,GAAtB,CAAZ,IAA0Cc,QAAQ,GAAGoF,IAAI,CAACgW,KAAL,CAAWpc,UAAU,CAACI,MAAtB,CAJzD;AAKH,WA1Be,CAAhB;AA2BH;AACD;;;;;;;;sCAKc;AACV,eAAKsY,iBAAL,GAAyB,KAAKH,WAAL,CAAiBmB,KAAjB,EAAzB;;AACA,eAAKV,mBAAL;;AACA,eAAKC,qBAAL;AACH;AACD;;;;;;;;;yCAMiBxY,C,EAAGC,C,EAAG;AACnB,iBAAOF,kBAAkB,CAAC,KAAK0Z,WAAN,EAAmBzZ,CAAnB,EAAsBC,CAAtB,CAAzB;AACH;AACD;;;;;;;;;;;yDAQiCqN,I,EAAMtN,C,EAAGC,C,EAAG;AACzC,iBAAO,KAAKmW,SAAL,CAAezX,IAAf;AAAqB;;;;AAI5B,oBAAA8Y,OAAO;AAAA,mBAAIA,OAAO,CAACmE,WAAR,CAAoBtO,IAApB,EAA0BtN,CAA1B,EAA6BC,CAA7B,CAAJ;AAAA,WAJA,CAAP;AAKH;AACD;;;;;;;;;;oCAOYqN,I,EAAMtN,C,EAAGC,C,EAAG;AACpB,cAAI,CAACF,kBAAkB,CAAC,KAAK0Z,WAAN,EAAmBzZ,CAAnB,EAAsBC,CAAtB,CAAnB,IAA+C,CAAC,KAAK6V,cAAL,CAAoBxI,IAApB,EAA0B,IAA1B,CAApD,EAAqF;AACjF,mBAAO,KAAP;AACH;AACD;;;AACA,cAAMuO,gBAAgB;AAAI;AAAkB,eAAKC,cAAL,GAAsBD,gBAAtB,CAAuC7b,CAAvC,EAA0CC,CAA1C,CAA5C,CALoB,CAMpB;AACA;;;AACA,cAAI,CAAC4b,gBAAL,EAAuB;AACnB,mBAAO,KAAP;AACH;AACD;;;AACA,cAAME,aAAa,GAAG,4EAAc,KAAK1e,OAAnB,CAAtB,CAZoB,CAapB;AACA;AACA;AACA;AACA;AACA;;AACA,iBAAOwe,gBAAgB,KAAKE,aAArB,IAAsCA,aAAa,CAAC1Z,QAAd,CAAuBwZ,gBAAvB,CAA7C;AACH;AACD;;;;;;;;wCAKgBpE,O,EAAS;AACrB;AACA,cAAMuE,cAAc,GAAG,KAAK1F,eAA5B;;AACA,cAAI,CAAC0F,cAAc,CAAC/W,GAAf,CAAmBwS,OAAnB,CAAL,EAAkC;AAC9BuE,0BAAc,CAACrS,GAAf,CAAmB8N,OAAnB;;AACA,iBAAKe,qBAAL;;AACA,iBAAKb,qBAAL;AACH;AACJ;AACD;;;;;;;;uCAKeF,O,EAAS;AACpB,eAAKnB,eAAL,WAA4BmB,OAA5B;;AACA,eAAKlB,2BAAL,CAAiCxN,WAAjC;AACH;AACD;;;;;;;;;gDAMwB;AAAA;;AACpB,eAAKwN,2BAAL,GAAmC,KAAKrT,iBAAL,CAAuBwJ,MAAvB,CAA8BzD,SAA9B;AAAyC;;;;AAI5E,oBAAAzH,KAAK,EAAI;AACL,gBAAI,OAAI,CAACgF,UAAL,EAAJ,EAAuB;AACnB;AACA,kBAAM8L,gBAAgB,GAAG,OAAI,CAACxK,gBAAL,CAAsByK,YAAtB,CAAmC/Q,KAAnC,CAAzB;;AACA,kBAAI8Q,gBAAJ,EAAsB;AAClB;AACA;AACA;AACA;AACA,uBAAI,CAAC2D,cAAL,CAAoB5U,OAApB;AAA6B;;;;AAI7B,iCAAoB;AAAA,sBAAjB9B,UAAiB,SAAjBA,UAAiB;AAChBW,kCAAgB,CAACX,UAAD,EAAa+S,gBAAgB,CAAC7S,GAA9B,EAAmC6S,gBAAgB,CAAC1S,IAApD,CAAhB;AACH,iBAND,EALkB,CAYlB;AACA;;;AACA,uBAAI,CAACqW,cAAL,CAAoB5U,OAApB;AAA6B;;;;AAI7B,iCAAc;AAAA,sBAAX8U,IAAW,SAAXA,IAAW;;AACV,sBAAI,OAAI,CAACjT,iBAAL,CAAuBsD,UAAvB,CAAkC2P,IAAlC,CAAJ,EAA6C;AACzC;AACA;AACAA,wBAAI,CAAC8F,4BAAL;AACH;AACJ,iBAVD;AAWH;AACJ,aA7BD,MA8BK,IAAI,OAAI,CAACC,WAAL,EAAJ,EAAwB;AACzB,qBAAI,CAAC1D,qBAAL;AACH;AACJ,WAtCkC,CAAnC;AAuCH;AACD;;;;;;;;;;;yCAQiB;AACb,cAAI,CAAC,KAAK7B,iBAAV,EAA6B;AACzB;AACA,gBAAMwF,UAAU;AAAI;AAAkB,yFAAe,4EAAc,KAAK9e,OAAnB,CAAf,CAAtC;AACA,iBAAKsZ,iBAAL,GAAyBwF,UAAU,IAAI,KAAKvb,SAA5C;AACH;;AACD,iBAAO,KAAK+V,iBAAZ;AACH;;;;;;AAEL,QAAI,KAAJ,EAAW,CAgNV;AACD;;;;;;;;;;AAQA,aAAS0C,SAAT,CAAmBjF,KAAnB,EAA0BgI,SAA1B,EAAqC;AACjC,WAAK,IAAIpJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoB,KAAK,CAACtP,MAA1B,EAAkCkO,CAAC,EAAnC,EAAuC;AACnC,YAAIoJ,SAAS,CAAChI,KAAK,CAACpB,CAAD,CAAN,EAAWA,CAAX,EAAcoB,KAAd,CAAb,EAAmC;AAC/B,iBAAOpB,CAAP;AACH;AACJ;;AACD,aAAO,CAAC,CAAR;AACH;AACD;;;;;;;;AAMA,aAAS+D,uBAAT,CAAiC3U,IAAjC,EAAuCia,MAAvC,EAA+C;AAC3C,UAAIja,IAAI,KAAKyY,MAAb,EAAqB;AACf;AAAkBzY,YAApB,CAA4Bka,QAA5B,CAAqC,CAArC,EAAwCD,MAAxC;AACH,OAFD,MAGK;AACD;;AACE;AAAkBja,YAApB,CAA4Bd,SAA5B,IAAyC+a,MAAzC;AACH;AACJ;AACD;;;;;;;;AAMA,aAASrF,yBAAT,CAAmC5U,IAAnC,EAAyCia,MAAzC,EAAiD;AAC7C,UAAIja,IAAI,KAAKyY,MAAb,EAAqB;AACf;AAAkBzY,YAApB,CAA4Bka,QAA5B,CAAqCD,MAArC,EAA6C,CAA7C;AACH,OAFD,MAGK;AACD;;AACE;AAAkBja,YAApB,CAA4Bb,UAA5B,IAA0C8a,MAA1C;AACH;AACJ;AACD;;;;;;;;AAMA,aAAS1B,0BAAT,CAAoCpb,UAApC,EAAgDgB,QAAhD,EAA0D;AAAA,UAC9Cd,GAD8C,GACtBF,UADsB,CAC9CE,GAD8C;AAAA,UACzCE,MADyC,GACtBJ,UADsB,CACzCI,MADyC;AAAA,UACjCG,MADiC,GACtBP,UADsB,CACjCO,MADiC;AAEtD;;AACA,UAAMW,UAAU,GAAGX,MAAM,GAAGmV,0BAA5B;;AACA,UAAI1U,QAAQ,IAAId,GAAG,GAAGgB,UAAlB,IAAgCF,QAAQ,IAAId,GAAG,GAAGgB,UAAtD,EAAkE;AAC9D,eAAO;AAAE;AAAT;AACH,OAFD,MAGK,IAAIF,QAAQ,IAAIZ,MAAM,GAAGc,UAArB,IAAmCF,QAAQ,IAAIZ,MAAM,GAAGc,UAA5D,EAAwE;AACzE,eAAO;AAAE;AAAT;AACH;;AACD,aAAO;AAAE;AAAT;AACH;AACD;;;;;;;;AAMA,aAASma,4BAAT,CAAsCrb,UAAtC,EAAkDe,QAAlD,EAA4D;AAAA,UAChDV,IADgD,GACzBL,UADyB,CAChDK,IADgD;AAAA,UAC1CF,KAD0C,GACzBH,UADyB,CAC1CG,KAD0C;AAAA,UACnCG,KADmC,GACzBN,UADyB,CACnCM,KADmC;AAExD;;AACA,UAAMW,UAAU,GAAGX,KAAK,GAAGoV,0BAA3B;;AACA,UAAI3U,QAAQ,IAAIV,IAAI,GAAGY,UAAnB,IAAiCF,QAAQ,IAAIV,IAAI,GAAGY,UAAxD,EAAoE;AAChE,eAAO;AAAE;AAAT;AACH,OAFD,MAGK,IAAIF,QAAQ,IAAIZ,KAAK,GAAGc,UAApB,IAAkCF,QAAQ,IAAIZ,KAAK,GAAGc,UAA1D,EAAsE;AACvE,eAAO;AAAE;AAAT;AACH;;AACD,aAAO;AAAE;AAAT;AACH;AACD;;;;;;;;;;;AASA,aAASia,0BAAT,CAAoCpd,OAApC,EAA6CkC,UAA7C,EAAyDe,QAAzD,EAAmEC,QAAnE,EAA6E;AACzE;AACA,UAAMgc,gBAAgB,GAAG5B,0BAA0B,CAACpb,UAAD,EAAagB,QAAb,CAAnD;AACA;;AACA,UAAMic,kBAAkB,GAAG5B,4BAA4B,CAACrb,UAAD,EAAae,QAAb,CAAvD;AACA;;AACA,UAAIia,uBAAuB,GAAG;AAAE;AAAhC;AACA;;AACA,UAAIC,yBAAyB,GAAG;AAAE;AAAlC,OARyE,CASzE;AACA;AACA;AACA;;AACA,UAAI+B,gBAAJ,EAAsB;AAClB;AACA,YAAMjb,SAAS,GAAGjE,OAAO,CAACiE,SAA1B;;AACA,YAAIib,gBAAgB,KAAK;AAAE;AAA3B,UAAqC;AACjC,gBAAIjb,SAAS,GAAG,CAAhB,EAAmB;AACfiZ,qCAAuB,GAAG;AAAE;AAA5B;AACH;AACJ,WAJD,MAKK,IAAIld,OAAO,CAACof,YAAR,GAAuBnb,SAAvB,GAAmCjE,OAAO,CAACqf,YAA/C,EAA6D;AAC9DnC,iCAAuB,GAAG;AAAE;AAA5B;AACH;AACJ;;AACD,UAAIiC,kBAAJ,EAAwB;AACpB;AACA,YAAMjb,UAAU,GAAGlE,OAAO,CAACkE,UAA3B;;AACA,YAAIib,kBAAkB,KAAK;AAAE;AAA7B,UAAyC;AACrC,gBAAIjb,UAAU,GAAG,CAAjB,EAAoB;AAChBiZ,uCAAyB,GAAG;AAAE;AAA9B;AACH;AACJ,WAJD,MAKK,IAAInd,OAAO,CAACsf,WAAR,GAAsBpb,UAAtB,GAAmClE,OAAO,CAACuf,WAA/C,EAA4D;AAC7DpC,mCAAyB,GAAG;AAAE;AAA9B;AACH;AACJ;;AACD,aAAO,CAACD,uBAAD,EAA0BC,yBAA1B,CAAP;AACH;AAED;;;;;;AAKA;;;;;;AAIA,QAAMqC,2BAA2B,GAAG,8FAAgC;AAChEra,aAAO,EAAE,KADuD;AAEhEsa,aAAO,EAAE;AAFuD,KAAhC,CAApC;AAIA;;;;;;AAMA;AACA;AACA;;QACMC,gB;AACF;;;;AAIA,gCAAY9Z,OAAZ,EAAqBrC,SAArB,EAAgC;AAAA;;AAAA;;AAC5B,aAAKqC,OAAL,GAAeA,OAAf;AACA;;;;AAGA,aAAK+Z,cAAL,GAAsB,IAAIjZ,GAAJ,EAAtB;AACA;;;;AAGA,aAAKkZ,cAAL,GAAsB,IAAIlZ,GAAJ,EAAtB;AACA;;;;AAGA,aAAKmZ,oBAAL,GAA4B,IAAInZ,GAAJ,EAA5B;AACA;;;;AAGA,aAAKoZ,gBAAL,GAAwB,IAAIpc,GAAJ,EAAxB;AACA;;;;;AAIA,aAAKyL,WAAL,GAAmB,IAAI,4CAAJ,EAAnB;AACA;;;;;AAIA,aAAKC,SAAL,GAAiB,IAAI,4CAAJ,EAAjB;AACA;;;;AAGA,aAAKC,MAAL,GAAc,IAAI,4CAAJ,EAAd;AACA;;;;;AAIA,aAAK0Q,4BAAL;AAAqC;;;;AAIrC,kBAAC5b,KAAD,EAAW;AACP,cAAI,OAAI,CAAC0b,oBAAL,CAA0B3D,IAA9B,EAAoC;AAChC/X,iBAAK,CAAC8D,cAAN;AACH;AACJ,SARD;;AASA,aAAK1E,SAAL,GAAiBA,SAAjB;AACH;AACD;;;;;;;;;8CAKsB6M,I,EAAM;AACxB,cAAI,CAAC,KAAKuP,cAAL,CAAoB/X,GAApB,CAAwBwI,IAAxB,CAAL,EAAoC;AAChC,iBAAKuP,cAAL,CAAoBrT,GAApB,CAAwB8D,IAAxB;AACH;AACJ;AACD;;;;;;;;yCAKiB0I,I,EAAM;AAAA;;AACnB,eAAK8G,cAAL,CAAoBtT,GAApB,CAAwBwM,IAAxB,EADmB,CAEnB;AACA;AACA;;;AACA,cAAI,KAAK8G,cAAL,CAAoB1D,IAApB,KAA6B,CAAjC,EAAoC;AAChC,iBAAKtW,OAAL,CAAayF,iBAAb;AAAgC;;;AAGhC,wBAAM;AACF;AACA;AACA,qBAAI,CAAC9H,SAAL,CAAe+H,gBAAf,CAAgC,WAAhC,EAA6C,OAAI,CAACyU,4BAAlD,EAAgFP,2BAAhF;AACH,aAPD;AAQH;AACJ;AACD;;;;;;;;4CAKoBpP,I,EAAM;AACtB,eAAKuP,cAAL,WAA2BvP,IAA3B;AACH;AACD;;;;;;;;uCAKe0I,I,EAAM;AACjB,eAAK8G,cAAL,WAA2B9G,IAA3B;;AACA,eAAKjM,YAAL,CAAkBiM,IAAlB;;AACA,cAAI,KAAK8G,cAAL,CAAoB1D,IAApB,KAA6B,CAAjC,EAAoC;AAChC,iBAAK3Y,SAAL,CAAe8O,mBAAf,CAAmC,WAAnC,EAAgD,KAAK0N,4BAArD,EAAmFP,2BAAnF;AACH;AACJ;AACD;;;;;;;;;sCAMc1G,I,EAAM3U,K,EAAO;AAAA;;AACvB;AACA,cAAI,KAAK0b,oBAAL,CAA0BjY,GAA1B,CAA8BkR,IAA9B,CAAJ,EAAyC;AACrC;AACH;;AACD,eAAK+G,oBAAL,CAA0BvT,GAA1B,CAA8BwM,IAA9B;;AACA,cAAI,KAAK+G,oBAAL,CAA0B3D,IAA1B,KAAmC,CAAvC,EAA0C;AACtC;AACA,gBAAM9O,aAAY,GAAGjJ,KAAK,CAAC+K,IAAN,CAAW8Q,UAAX,CAAsB,OAAtB,CAArB;AACA;;;AACA,gBAAMC,SAAS,GAAG7S,aAAY,GAAG,WAAH,GAAiB,WAA/C;AACA;;AACA,gBAAM8S,OAAO,GAAG9S,aAAY,GAAG,UAAH,GAAgB,SAA5C,CANsC,CAOtC;AACA;AACA;;AACA,iBAAK0S,gBAAL,CACKjc,GADL,CACSoc,SADT,EACoB;AAChB9N,qBAAO;AAAG;;;;AAIV,+BAACgO,CAAD;AAAA,uBAAO,OAAI,CAAChR,WAAL,CAAiB3H,IAAjB;AAAuB;AAAkB2Y,iBAAzC,CAAP;AAAA,eALgB;AAMhBC,qBAAO,EAAEZ;AANO,aADpB,EASK3b,GATL,CASSqc,OATT,EASkB;AACd/N,qBAAO;AAAG;;;;AAIV,+BAACgO,CAAD;AAAA,uBAAO,OAAI,CAAC/Q,SAAL,CAAe5H,IAAf;AAAqB;AAAkB2Y,iBAAvC,CAAP;AAAA,eALc;AAMdC,qBAAO,EAAE;AANK,aATlB,EAiBKvc,GAjBL,CAiBS,QAjBT,EAiBmB;AACfsO,qBAAO;AAAG;;;;AAIV,+BAACgO,CAAD;AAAA,uBAAO,OAAI,CAAC9Q,MAAL,CAAY7H,IAAZ,CAAiB2Y,CAAjB,CAAP;AAAA,eALe;AAMf;AACA;AACAC,qBAAO,EAAE;AARM,aAjBnB,EA2BI;AACA;AACA;AACA;AA9BJ,aA+BKvc,GA/BL,CA+BS,aA/BT,EA+BwB;AACpBsO,qBAAO,EAAE,KAAK4N,4BADM;AAEpBK,qBAAO,EAAEZ;AAFW,aA/BxB;;AAmCA,iBAAK5Z,OAAL,CAAayF,iBAAb;AAAgC;;;AAGhC,wBAAM;AACF,qBAAI,CAACyU,gBAAL,CAAsB9b,OAAtB;AAA+B;;;;;AAK/B,wBAACqc,MAAD,EAAS1e,IAAT,EAAkB;AACd,uBAAI,CAAC4B,SAAL,CAAe+H,gBAAf,CAAgC3J,IAAhC,EAAsC0e,MAAM,CAAClO,OAA7C,EAAsDkO,MAAM,CAACD,OAA7D;AACH,eAPD;AAQH,aAZD;AAaH;AACJ;AACD;;;;;;;;qCAKatH,I,EAAM;AACf,eAAK+G,oBAAL,WAAiC/G,IAAjC;;AACA,cAAI,KAAK+G,oBAAL,CAA0B3D,IAA1B,KAAmC,CAAvC,EAA0C;AACtC,iBAAKoE,qBAAL;AACH;AACJ;AACD;;;;;;;;mCAKWxH,I,EAAM;AACb,iBAAO,KAAK+G,oBAAL,CAA0BjY,GAA1B,CAA8BkR,IAA9B,CAAP;AACH;AACD;;;;;;sCAGc;AAAA;;AACV,eAAK8G,cAAL,CAAoB5b,OAApB;AAA6B;;;;AAI7B,oBAAAuc,QAAQ;AAAA,mBAAI,OAAI,CAACrU,cAAL,CAAoBqU,QAApB,CAAJ;AAAA,WAJR;;AAKA,eAAKZ,cAAL,CAAoB3b,OAApB;AAA6B;;;;AAI7B,oBAAAuc,QAAQ;AAAA,mBAAI,OAAI,CAACzG,mBAAL,CAAyByG,QAAzB,CAAJ;AAAA,WAJR;;AAKA,eAAKD,qBAAL;;AACA,eAAKnR,WAAL,CAAiB/C,QAAjB;AACA,eAAKgD,SAAL,CAAehD,QAAf;AACH;AACD;;;;;;;;gDAKwB;AAAA;;AACpB,eAAK0T,gBAAL,CAAsB9b,OAAtB;AAA+B;;;;;AAK/B,oBAACqc,MAAD,EAAS1e,IAAT,EAAkB;AACd,mBAAI,CAAC4B,SAAL,CAAe8O,mBAAf,CAAmC1Q,IAAnC,EAAyC0e,MAAM,CAAClO,OAAhD,EAAyDkO,MAAM,CAACD,OAAhE;AACH,WAPD;;AAQA,eAAKN,gBAAL,CAAsBnc,KAAtB;AACH;;;;;;AAEL+b,oBAAgB,CAACc,IAAjB,GAAwB,SAASC,wBAAT,CAAkCC,CAAlC,EAAqC;AAAE,aAAO,KAAKA,CAAC,IAAIhB,gBAAV,EAA4B,uDAAgB,oDAAhB,CAA5B,EAA4D,uDAAgB,wDAAhB,CAA5D,CAAP;AAAgG,KAA/J;AACA;;;AACAA,oBAAgB,CAACiB,cAAjB,GAAkC;AAAA,aAAM,CACpC;AAAEzR,YAAI,EAAE;AAAR,OADoC,EAEpC;AAAEA,YAAI,EAAE1D,SAAR;AAAmBoV,kBAAU,EAAE,CAAC;AAAE1R,cAAI,EAAE,oDAAR;AAAgB2R,cAAI,EAAE,CAAC,wDAAD;AAAtB,SAAD;AAA/B,OAFoC,CAAN;AAAA,KAAlC;AAIA;;;AAAmBnB,oBAAgB,CAACoB,KAAjB,GAAyB,yEAAmB;AAAEC,aAAO,EAAE,SAASN,wBAAT,GAAoC;AAAE,eAAO,IAAIf,gBAAJ,CAAqB,+DAAS,oDAAT,CAArB,EAAuC,+DAAS,wDAAT,CAAvC,CAAP;AAAoE,OAArH;AAAuHsB,WAAK,EAAEtB,gBAA9H;AAAgJuB,gBAAU,EAAE;AAA5J,KAAnB,CAAzB;AACnB;;AAAc,KAAC,YAAY;AAAE,sEAAyBvB,gBAAzB,EAA2C,CAAC;AACjExQ,YAAI,EAAE,wDAD2D;AAEjE2R,YAAI,EAAE,CAAC;AAAEI,oBAAU,EAAE;AAAd,SAAD;AAF2D,OAAD,CAA3C,EAGrB,YAAY;AAAE,eAAO,CAAC;AAAE/R,cAAI,EAAE;AAAR,SAAD,EAA0B;AAAEA,cAAI,EAAE1D,SAAR;AAAmBoV,oBAAU,EAAE,CAAC;AACvE1R,gBAAI,EAAE,oDADiE;AAEvE2R,gBAAI,EAAE,CAAC,wDAAD;AAFiE,WAAD;AAA/B,SAA1B,CAAP;AAGF,OANS,EAMP,IANO;AAMC,KANhB;;AAOd,QAAI,KAAJ,EAAW,CA2DV;AAED;;;;;;AAKA;;;;;;AAIA,QAAMK,cAAc,GAAG;AACnBvY,wBAAkB,EAAE,CADD;AAEnB2L,qCAA+B,EAAE;AAFd,KAAvB;AAIA;;;;QAGM6M,Q;AACF;;;;;;AAMA,wBAAY5d,SAAZ,EAAuBqC,OAAvB,EAAgCpC,cAAhC,EAAgDqC,iBAAhD,EAAmE;AAAA;;AAC/D,aAAKtC,SAAL,GAAiBA,SAAjB;AACA,aAAKqC,OAAL,GAAeA,OAAf;AACA,aAAKpC,cAAL,GAAsBA,cAAtB;AACA,aAAKqC,iBAAL,GAAyBA,iBAAzB;AACH;AACD;;;;;;;;;;;mCAOW7F,O,EAAkC;AAAA,cAAzBqgB,MAAyB,uEAAhBa,cAAgB;AACzC,iBAAO,IAAIxb,OAAJ,CAAY1F,OAAZ,EAAqBqgB,MAArB,EAA6B,KAAK9c,SAAlC,EAA6C,KAAKqC,OAAlD,EAA2D,KAAKpC,cAAhE,EAAgF,KAAKqC,iBAArF,CAAP;AACH;AACD;;;;;;;;;uCAMe7F,O,EAAS;AACpB,iBAAO,IAAIuY,WAAJ,CAAgBvY,OAAhB,EAAyB,KAAK6F,iBAA9B,EAAiD,KAAKtC,SAAtD,EAAiE,KAAKqC,OAAtE,EAA+E,KAAKpC,cAApF,CAAP;AACH;;;;;;AAEL2d,YAAQ,CAACX,IAAT,GAAgB,SAASY,gBAAT,CAA0BV,CAA1B,EAA6B;AAAE,aAAO,KAAKA,CAAC,IAAIS,QAAV,EAAoB,uDAAgB,wDAAhB,CAApB,EAA+C,uDAAgB,oDAAhB,CAA/C,EAA+E,uDAAgB,oEAAhB,CAA/E,EAAsH,uDAAgBzB,gBAAhB,CAAtH,CAAP;AAAkK,KAAjN;AACA;;;AACAyB,YAAQ,CAACR,cAAT,GAA0B;AAAA,aAAM,CAC5B;AAAEzR,YAAI,EAAE1D,SAAR;AAAmBoV,kBAAU,EAAE,CAAC;AAAE1R,cAAI,EAAE,oDAAR;AAAgB2R,cAAI,EAAE,CAAC,wDAAD;AAAtB,SAAD;AAA/B,OAD4B,EAE5B;AAAE3R,YAAI,EAAE;AAAR,OAF4B,EAG5B;AAAEA,YAAI,EAAE;AAAR,OAH4B,EAI5B;AAAEA,YAAI,EAAEwQ;AAAR,OAJ4B,CAAN;AAAA,KAA1B;AAMA;;;AAAmByB,YAAQ,CAACL,KAAT,GAAiB,yEAAmB;AAAEC,aAAO,EAAE,SAASK,gBAAT,GAA4B;AAAE,eAAO,IAAID,QAAJ,CAAa,+DAAS,wDAAT,CAAb,EAAiC,+DAAS,oDAAT,CAAjC,EAAmD,+DAAS,oEAAT,CAAnD,EAA4E,+DAASzB,gBAAT,CAA5E,CAAP;AAAiH,OAA1J;AAA4JsB,WAAK,EAAEG,QAAnK;AAA6KF,gBAAU,EAAE;AAAzL,KAAnB,CAAjB;AACnB;;AAAc,KAAC,YAAY;AAAE,sEAAyBE,QAAzB,EAAmC,CAAC;AACzDjS,YAAI,EAAE,wDADmD;AAEzD2R,YAAI,EAAE,CAAC;AAAEI,oBAAU,EAAE;AAAd,SAAD;AAFmD,OAAD,CAAnC,EAGrB,YAAY;AAAE,eAAO,CAAC;AAAE/R,cAAI,EAAE1D,SAAR;AAAmBoV,oBAAU,EAAE,CAAC;AAC9C1R,gBAAI,EAAE,oDADwC;AAE9C2R,gBAAI,EAAE,CAAC,wDAAD;AAFwC,WAAD;AAA/B,SAAD,EAGX;AAAE3R,cAAI,EAAE;AAAR,SAHW,EAGc;AAAEA,cAAI,EAAE;AAAR,SAHd,EAG8C;AAAEA,cAAI,EAAEwQ;AAAR,SAH9C,CAAP;AAGmF,OAN5E,EAM8E,IAN9E;AAMsF,KANrG;;AAOd,QAAI,KAAJ,EAAW,CAqBV;AAED;;;;;;AAKA;;;;;;;;AAOA;;;;;;;AAKA,aAAS2B,YAAT,GAAwB,CAAG;;AAC3B,QAAI,KAAJ,EAAW,CAMV;AACD;;;;;;;AAKA,aAASC,cAAT,GAA0B,CAAG;;AAC7B,QAAI,KAAJ,EAAW,CAMV;AACD;;;;;;;AAKA,aAASC,UAAT,GAAsB,CAAG;;AACzB,QAAI,KAAJ,EAAW,CAWV;AACD;;;;;;;AAKA,aAASC,YAAT,GAAwB,CAAG;;AAC3B,QAAI,KAAJ,EAAW,CAgBV;AACD;;;;;;;;AAMA,aAASC,WAAT,GAAuB,CAAG;;AAC1B,QAAI,KAAJ,EAAW,CAWV;AACD;;;;;;;AAKA,aAASC,WAAT,GAAuB,CAAG;;AAC1B,QAAI,KAAJ,EAAW,CAoCV;AACD;;;;;;;AAKA,aAASC,WAAT,GAAuB,CAAG;;AAC1B,QAAI,KAAJ,EAAW,CA6BV;AACD;;;;;;;AAKA,aAASC,gBAAT,GAA4B,CAAG;;AAC/B,QAAI,KAAJ,EAAW,CAqBV;AAED;;;;;;AAKA;;;;;;;;;AAOA,QAAMC,eAAe,GAAG,IAAI,4DAAJ,CAAmB,iBAAnB,CAAxB;AAEA;;;;;;AAKA;;;;QAGMC,a;AACF;;;;AAIA,6BAAY9hB,OAAZ,EAAqB+hB,UAArB,EAAiC;AAAA;;AAC7B,aAAK/hB,OAAL,GAAeA,OAAf;AACA;;;;AAGA,aAAKgiB,aAAL,GAAqB,IAAI,4CAAJ,EAArB;AACA,aAAKnb,SAAL,GAAiB,KAAjB;AACA,aAAKob,WAAL,GAAmBF,UAAnB;AACAhiB,oCAA4B,CAACC,OAAO,CAAC0e,aAAT,EAAwB,KAAxB,CAA5B;AACH;AACD;;;;;;;;;AAaA;;;sCAGc;AACV,eAAKsD,aAAL,CAAmB5V,QAAnB;AACH;;;4BAdc;AAAE,iBAAO,KAAKvF,SAAZ;AAAwB;AACzC;;;;;0BAIalG,K,EAAO;AAChB,eAAKkG,SAAL,GAAiB,oFAAsBlG,KAAtB,CAAjB;;AACA,eAAKqhB,aAAL,CAAmBxa,IAAnB,CAAwB,IAAxB;AACH;;;;;;AAQLsa,iBAAa,CAACtB,IAAd,GAAqB,SAAS0B,qBAAT,CAA+BxB,CAA/B,EAAkC;AAAE,aAAO,KAAKA,CAAC,IAAIoB,aAAV,EAAyB,gEAAyB,wDAAzB,CAAzB,EAAsE,gEAAyBD,eAAzB,EAA0C,CAA1C,CAAtE,CAAP;AAA6H,KAAtL;;AACAC,iBAAa,CAACK,IAAd,GAAqB,gEAAyB;AAAEjT,UAAI,EAAE4S,aAAR;AAAuBM,eAAS,EAAE,CAAC,CAAC,EAAD,EAAK,eAAL,EAAsB,EAAtB,CAAD,CAAlC;AAA+DC,eAAS,EAAE,CAAC,CAAD,EAAI,iBAAJ,CAA1E;AAAkGC,YAAM,EAAE;AAAEza,gBAAQ,EAAE,CAAC,uBAAD,EAA0B,UAA1B;AAAZ;AAA1G,KAAzB,CAArB;AACA;;AACAia,iBAAa,CAACnB,cAAd,GAA+B;AAAA,aAAM,CACjC;AAAEzR,YAAI,EAAE;AAAR,OADiC,EAEjC;AAAEA,YAAI,EAAE1D,SAAR;AAAmBoV,kBAAU,EAAE,CAAC;AAAE1R,cAAI,EAAE,oDAAR;AAAgB2R,cAAI,EAAE,CAACgB,eAAD;AAAtB,SAAD,EAA6C;AAAE3S,cAAI,EAAE;AAAR,SAA7C;AAA/B,OAFiC,CAAN;AAAA,KAA/B;;AAIA4S,iBAAa,CAACS,cAAd,GAA+B;AAC3B1a,cAAQ,EAAE,CAAC;AAAEqH,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,uBAAD;AAArB,OAAD;AADiB,KAA/B;AAGA;;AAAc,KAAC,YAAY;AAAE,sEAAyBiB,aAAzB,EAAwC,CAAC;AAC9D5S,YAAI,EAAE,uDADwD;AAE9D2R,YAAI,EAAE,CAAC;AACC2B,kBAAQ,EAAE,iBADX;AAECC,cAAI,EAAE;AACF,qBAAS;AADP;AAFP,SAAD;AAFwD,OAAD,CAAxC,EAQrB,YAAY;AAAE,eAAO,CAAC;AAAEvT,cAAI,EAAE;AAAR,SAAD,EAA8B;AAAEA,cAAI,EAAE1D,SAAR;AAAmBoV,oBAAU,EAAE,CAAC;AAC3E1R,gBAAI,EAAE,oDADqE;AAE3E2R,gBAAI,EAAE,CAACgB,eAAD;AAFqE,WAAD,EAG3E;AACC3S,gBAAI,EAAE;AADP,WAH2E;AAA/B,SAA9B,CAAP;AAKF,OAbS,EAaP;AAAErH,gBAAQ,EAAE,CAAC;AACvBqH,cAAI,EAAE,mDADiB;AAEvB2R,cAAI,EAAE,CAAC,uBAAD;AAFiB,SAAD;AAAZ,OAbO;AAgBb,KAhBF;;AAiBd,QAAI,KAAJ,EAAW,CAoBV;AAED;;;;;;AAKA;;;;;;;QAKM6B,kB;AACF;;;AAGA,gCAAYC,WAAZ,EAAyB;AAAA;;AACrB,WAAKA,WAAL,GAAmBA,WAAnB;AACH,K;;AAELD,sBAAkB,CAAClC,IAAnB,GAA0B,SAASoC,0BAAT,CAAoClC,CAApC,EAAuC;AAAE,aAAO,KAAKA,CAAC,IAAIgC,kBAAV,EAA8B,gEAAyB,yDAAzB,CAA9B,CAAP;AAAqF,KAAxJ;;AACAA,sBAAkB,CAACP,IAAnB,GAA0B,gEAAyB;AAAEjT,UAAI,EAAEwT,kBAAR;AAA4BN,eAAS,EAAE,CAAC,CAAC,aAAD,EAAgB,oBAAhB,EAAsC,EAAtC,CAAD,CAAvC;AAAoFE,YAAM,EAAE;AAAEO,YAAI,EAAE;AAAR;AAA5F,KAAzB,CAA1B;AACA;;AACAH,sBAAkB,CAAC/B,cAAnB,GAAoC;AAAA,aAAM,CACtC;AAAEzR,YAAI,EAAE;AAAR,OADsC,CAAN;AAAA,KAApC;;AAGAwT,sBAAkB,CAACH,cAAnB,GAAoC;AAChCM,UAAI,EAAE,CAAC;AAAE3T,YAAI,EAAE;AAAR,OAAD;AAD0B,KAApC;AAGA;;AAAc,KAAC,YAAY;AAAE,sEAAyBwT,kBAAzB,EAA6C,CAAC;AACnExT,YAAI,EAAE,uDAD6D;AAEnE2R,YAAI,EAAE,CAAC;AACC2B,kBAAQ,EAAE;AADX,SAAD;AAF6D,OAAD,CAA7C,EAKrB,YAAY;AAAE,eAAO,CAAC;AAAEtT,cAAI,EAAE;AAAR,SAAD,CAAP;AAAwC,OALjC,EAKmC;AAAE2T,YAAI,EAAE,CAAC;AAC7D3T,cAAI,EAAE;AADuD,SAAD;AAAR,OALnC;AAOb,KAPF;;AAQd,QAAI,KAAJ,EAAW,CAQV;AAED;;;;;;AAKA;;;;;;;QAKM4T,c;AACF;;;AAGA,8BAAYH,WAAZ,EAAyB;AAAA;;AACrB,aAAKA,WAAL,GAAmBA,WAAnB;AACA,aAAKI,UAAL,GAAkB,KAAlB;AACH;AACD;;;;;;;;4BAIgB;AAAE,iBAAO,KAAKA,UAAZ;AAAyB;AAC3C;;;;;0BAIcpiB,K,EAAO;AAAE,eAAKoiB,UAAL,GAAkB,oFAAsBpiB,KAAtB,CAAlB;AAAiD;;;;;;AAE5EmiB,kBAAc,CAACtC,IAAf,GAAsB,SAASwC,sBAAT,CAAgCtC,CAAhC,EAAmC;AAAE,aAAO,KAAKA,CAAC,IAAIoC,cAAV,EAA0B,gEAAyB,yDAAzB,CAA1B,CAAP;AAAiF,KAA5I;;AACAA,kBAAc,CAACX,IAAf,GAAsB,gEAAyB;AAAEjT,UAAI,EAAE4T,cAAR;AAAwBV,eAAS,EAAE,CAAC,CAAC,aAAD,EAAgB,gBAAhB,EAAkC,EAAlC,CAAD,CAAnC;AAA4EE,YAAM,EAAE;AAAE3S,iBAAS,EAAE,WAAb;AAA0BkT,YAAI,EAAE;AAAhC;AAApF,KAAzB,CAAtB;AACA;;AACAC,kBAAc,CAACnC,cAAf,GAAgC;AAAA,aAAM,CAClC;AAAEzR,YAAI,EAAE;AAAR,OADkC,CAAN;AAAA,KAAhC;;AAGA4T,kBAAc,CAACP,cAAf,GAAgC;AAC5BM,UAAI,EAAE,CAAC;AAAE3T,YAAI,EAAE;AAAR,OAAD,CADsB;AAE5BS,eAAS,EAAE,CAAC;AAAET,YAAI,EAAE;AAAR,OAAD;AAFiB,KAAhC;AAIA;;AAAc,KAAC,YAAY;AAAE,sEAAyB4T,cAAzB,EAAyC,CAAC;AAC/D5T,YAAI,EAAE,uDADyD;AAE/D2R,YAAI,EAAE,CAAC;AACC2B,kBAAQ,EAAE;AADX,SAAD;AAFyD,OAAD,CAAzC,EAKrB,YAAY;AAAE,eAAO,CAAC;AAAEtT,cAAI,EAAE;AAAR,SAAD,CAAP;AAAwC,OALjC,EAKmC;AAAES,iBAAS,EAAE,CAAC;AAClET,cAAI,EAAE;AAD4D,SAAD,CAAb;AAEpD2T,YAAI,EAAE,CAAC;AACP3T,cAAI,EAAE;AADC,SAAD;AAF8C,OALnC;AASb,KATF;;AAUd,QAAI,KAAJ,EAAW,CAeV;AAED;;;;;;AAKA;;;;;;;AAKA,QAAM+T,eAAe,GAAG,IAAI,4DAAJ,CAAmB,iBAAnB,CAAxB;AACA;;;;;;AAKA,aAASC,cAAT,GAA0B,CAAG;;AAC7B,QAAI,KAAJ,EAAW,CAuBV;AACD;;;;;;;;AAMA,aAASC,uBAAT,GAAmC;AAC/B,aAAO;AAAExa,0BAAkB,EAAE,CAAtB;AAAyB2L,uCAA+B,EAAE;AAA1D,OAAP;AACH;AAED;;;;;;AAKA;;;;;;;AAKA,QAAM8O,aAAa,GAAG,IAAI,4DAAJ,CAAmB,eAAnB,CAAtB;AACA;;;;;QAIMC,O;AACF;;;;;;;;;;;AAWA,uBAAYrjB,OAAZ,EAAqBsN,aAArB,EAAoC/J,SAApC,EAA+CqC,OAA/C,EAAwD0d,iBAAxD,EAA2EjD,MAA3E,EAAmFkD,IAAnF,EAAyFC,QAAzF,EAAmGC,kBAAnG,EAAuH;AAAA;;AAAA;;AACnH,aAAKzjB,OAAL,GAAeA,OAAf;AACA,aAAKsN,aAAL,GAAqBA,aAArB;AACA,aAAK/J,SAAL,GAAiBA,SAAjB;AACA,aAAKqC,OAAL,GAAeA,OAAf;AACA,aAAK0d,iBAAL,GAAyBA,iBAAzB;AACA,aAAKC,IAAL,GAAYA,IAAZ;AACA,aAAKE,kBAAL,GAA0BA,kBAA1B;AACA,aAAKC,UAAL,GAAkB,IAAI,4CAAJ,EAAlB;AACA;;;;AAGA,aAAK3c,OAAL,GAAe,IAAI,0DAAJ,EAAf;AACA;;;;AAGA,aAAKC,QAAL,GAAgB,IAAI,0DAAJ,EAAhB;AACA;;;;AAGA,aAAKC,KAAL,GAAa,IAAI,0DAAJ,EAAb;AACA;;;;AAGA,aAAKC,OAAL,GAAe,IAAI,0DAAJ,EAAf;AACA;;;;AAGA,aAAKC,MAAL,GAAc,IAAI,0DAAJ,EAAd;AACA;;;;AAGA,aAAKC,OAAL,GAAe,IAAI,0DAAJ,EAAf;AACA;;;;;AAIA,aAAKC,KAAL,GAAa,IAAI,+CAAJ;AAAgB;;;;AAI7B,kBAACsc,QAAD,EAAc;AACV;AACA,cAAMC,YAAY,GAAG,OAAI,CAACC,QAAL,CAAcxc,KAAd,CAAoBmS,IAApB,CAAyB;AAAK;;;;AAInD,oBAAAsK,UAAU;AAAA,mBAAK;AACXlkB,oBAAM,EAAE,OADG;AAEXsI,6BAAe,EAAE4b,UAAU,CAAC5b,eAFjB;AAGX/D,mBAAK,EAAE2f,UAAU,CAAC3f,KAHP;AAIXkG,mBAAK,EAAEyZ,UAAU,CAACzZ,KAJP;AAKXF,sBAAQ,EAAE2Z,UAAU,CAAC3Z;AALV,aAAL;AAAA,WAJoC,CAAzB,EAUfyB,SAVe,CAUL+X,QAVK,CAArB;;AAWA;AAAQ;;;AAGR,wBAAM;AACFC,0BAAY,CAAClY,WAAb;AACH;AALD;AAMH,SAvBY,CAAb;AAwBA,aAAKmY,QAAL,GAAgBL,QAAQ,CAACO,UAAT,CAAoB/jB,OAApB,EAA6B;AACzC2I,4BAAkB,EAAE0X,MAAM,IAAIA,MAAM,CAAC1X,kBAAP,IAA6B,IAAvC,GAChB0X,MAAM,CAAC1X,kBADS,GACY,CAFS;AAGzC2L,yCAA+B,EAAE+L,MAAM,IAAIA,MAAM,CAAC/L,+BAAP,IAA0C,IAApD,GAC7B+L,MAAM,CAAC/L,+BADsB,GACY,CAJJ;AAKzC5C,gBAAM,EAAE2O,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAAC3O;AALtB,SAA7B,CAAhB;AAOA,aAAKmS,QAAL,CAAchB,IAAd,GAAqB,IAArB;;AACA,YAAIxC,MAAJ,EAAY;AACR,eAAK2D,eAAL,CAAqB3D,MAArB;AACH,SAvEkH,CAwEnH;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,YAAI/S,aAAJ,EAAmB;AACf,eAAKuW,QAAL,CAActI,kBAAd,CAAiCjO,aAAa,CAAC2W,YAA/C;;AACA3W,uBAAa,CAAC4W,OAAd,CAAsB,IAAtB;AACH;;AACD,aAAKC,WAAL,CAAiB,KAAKN,QAAtB;;AACA,aAAKO,aAAL,CAAmB,KAAKP,QAAxB;AACH;AACD;;;;;;;;;AAeA;;;;;gDAKwB;AACpB,iBAAO,KAAKA,QAAL,CAAcjZ,qBAAd,EAAP;AACH;AACD;;;;;;;yCAIiB;AACb,iBAAO,KAAKiZ,QAAL,CAAchZ,cAAd,EAAP;AACH;AACD;;;;;;;gCAIQ;AACJ,eAAKgZ,QAAL,CAAcQ,KAAd;AACH;AACD;;;;;;;8CAIsB;AAClB,iBAAO,KAAKR,QAAL,CAAcS,mBAAd,EAAP;AACH;AACD;;;;;;0CAGkB;AAAA;;AACd;AACA;AACA;AACA;AACA,eAAK1e,OAAL,CAAa2e,QAAb,CAAsBjd,YAAtB,GACKkS,IADL,CACU,4DAAK,CAAL,CADV,EACmB,iEAAU,KAAKkK,UAAf,CADnB,EAEK9X,SAFL;AAEgB;;;AAGhB,sBAAM;AACF,mBAAI,CAAC4Y,kBAAL,GADE,CAEF;;;AACA,mBAAI,CAAChe,QAAL,CAAcie,OAAd,CAAsBjL,IAAtB,CAA2B,iEAAU,OAAI,CAAChT,QAAf,CAA3B,EACA;AACA;AAAK;;;;AAIL,sBAACsE,OAAD,EAAa;AACT;AACA,kBAAM4Z,mBAAmB,GAAG5Z,OAAO,CAC9B2Q,MADuB;AACf;;;;AAIb,wBAAA9T,MAAM;AAAA,uBAAIA,MAAM,CAACsa,WAAP,KAAuB,OAA3B;AAAA,eALsB,EAMvBngB,GANuB;AAMlB;;;;AAIV,wBAAA6F,MAAM;AAAA,uBAAIA,MAAM,CAAC3H,OAAX;AAAA,eAVsB,CAA5B;;AAWA,qBAAI,CAAC6jB,QAAL,CAAcc,WAAd,CAA0BD,mBAA1B;AACH,aAlBD,CAFA,EAqBA;AACA;AAAW;;;;AAIX,sBAAC5Z,OAAD,EAAa;AACT;AAAQ;AAAkB,oGAASA,OAAO,CAAChJ,GAAR;AAAa;;;;AAIhD,0BAAAmO,IAAI,EAAI;AACJ,yBAAOA,IAAI,CAAC+R,aAAL,CAAmBxI,IAAnB,CAAwB,iEAAUvJ,IAAV,CAAxB,CAAP;AACH,iBANkC,CAAT;AAA1B;AAOH,aAZD,CAtBA,EAkCK,iEAAU,OAAI,CAACyT,UAAf,CAlCL,EAkCiC9X,SAlCjC;AAkC4C;;;;AAI5C,sBAAAgZ,cAAc,EAAI;AACd;;AACA;AACA,kBAAMC,OAAO,GAAG,OAAI,CAAChB,QAArB;AACA;;AACA,kBAAMlc,MAAM,GAAGid,cAAc,CAAC5kB,OAAf,CAAuB0e,aAAtC;AACAkG,4BAAc,CAAC/c,QAAf,GAA0Bgd,OAAO,CAACC,aAAR,CAAsBnd,MAAtB,CAA1B,GAA0Dkd,OAAO,CAACE,YAAR,CAAqBpd,MAArB,CAA1D;AACH,aA7CD;;AA8CA,gBAAI,OAAI,CAACqd,gBAAT,EAA2B;AACvB,qBAAI,CAACnB,QAAL,CAAc/O,mBAAd,CAAkC,OAAI,CAACkQ,gBAAvC;AACH;AACJ,WAzDD;AA0DH;AACD;;;;;;;oCAIYP,O,EAAS;AACjB;AACA,cAAMQ,kBAAkB,GAAGR,OAAO,CAAC,qBAAD,CAAlC;AACA;;AACA,cAAMS,cAAc,GAAGT,OAAO,CAAC,kBAAD,CAA9B,CAJiB,CAKjB;AACA;;AACA,cAAIQ,kBAAkB,IAAI,CAACA,kBAAkB,CAACE,WAA9C,EAA2D;AACvD,iBAAKX,kBAAL;AACH,WATgB,CAUjB;;;AACA,cAAIU,cAAc,IAAI,CAACA,cAAc,CAACC,WAAlC,IAAiD,KAAKH,gBAA1D,EAA4E;AACxE,iBAAKnB,QAAL,CAAc/O,mBAAd,CAAkC,KAAKkQ,gBAAvC;AACH;AACJ;AACD;;;;;;sCAGc;AACV,cAAI,KAAK1X,aAAT,EAAwB;AACpB,iBAAKA,aAAL,CAAmB8X,UAAnB,CAA8B,IAA9B;AACH;;AACD,eAAK1B,UAAL,CAAgBlc,IAAhB;;AACA,eAAKkc,UAAL,CAAgBtX,QAAhB;;AACA,eAAKyX,QAAL,CAAcwB,OAAd;AACH;AACD;;;;;;;;6CAKqB;AACjB;AACA,cAAMrlB,OAAO,GAAG,KAAKA,OAAL,CAAa0e,aAA7B;AACA;;AACA,cAAMvT,WAAW,GAAG,KAAKma,mBAAL,GAChBC,0BAA0B,CAACvlB,OAAD,EAAU,KAAKslB,mBAAf,CADV,GACgDtlB,OADpE;;AAEA,cAAImL,WAAW,IAAIA,WAAW,CAACsL,QAAZ,KAAyB,KAAKlT,SAAL,CAAemT,YAA3D,EAAyE;AACrE,kBAAM8O,KAAK,CAAC,oFACkBra,WAAW,CAACsa,QAD9B,QAAD,CAAX;AAEH;;AACD,eAAK5B,QAAL,CAAcrZ,eAAd,CAA8BW,WAAW,IAAInL,OAA7C;AACH;AACD;;;;;;;;8CAKsB;AAClB;AACA,cAAM0lB,QAAQ,GAAG,KAAKja,eAAtB;;AACA,cAAI,CAACia,QAAL,EAAe;AACX,mBAAO,IAAP;AACH;;AACD,cAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAC9B,mBAAOH,0BAA0B,CAAC,KAAKvlB,OAAL,CAAa0e,aAAd,EAA6BgH,QAA7B,CAAjC;AACH;AACD;;;AACA,cAAM1lB,OAAO,GAAG,4EAAc0lB,QAAd,CAAhB;;AACA,cAAI,qEAAe,CAAC1lB,OAAO,CAACgF,QAAR,CAAiB,KAAKhF,OAAL,CAAa0e,aAA9B,CAApB,EAAkE;AAC9D,kBAAM8G,KAAK,CAAC,0EAAD,CAAX;AACH;;AACD,iBAAOxlB,OAAP;AACH;AACD;;;;;;;;;oCAMY2lB,G,EAAK;AAAA;;AACbA,aAAG,CAAC7e,aAAJ,CAAkB8E,SAAlB;AAA6B;;;AAG7B,sBAAM;AACF,gBAAI,CAAC+Z,GAAG,CAACxc,UAAJ,EAAL,EAAuB;AACnB;AACA,kBAAMyc,GAAG,GAAG,OAAI,CAACrC,IAAjB;AACA;;AACA,kBAAM3c,cAAc,GAAG,OAAI,CAACA,cAA5B;AACA;;AACA,kBAAM+G,WAAW,GAAG,OAAI,CAACzC,oBAAL,GAA4B;AAC5CF,wBAAQ,EAAE,OAAI,CAACE,oBAAL,CAA0ByX,WADQ;AAE5CxR,uBAAO,EAAE,OAAI,CAACjG,oBAAL,CAA0B2X,IAFS;AAG5C5R,6BAAa,EAAE,OAAI,CAACqS;AAHwB,eAA5B,GAIhB,IAJJ;AAKA;;AACA,kBAAM7V,OAAO,GAAG,OAAI,CAACxC,gBAAL,GAAwB;AACpCD,wBAAQ,EAAE,OAAI,CAACC,gBAAL,CAAsB0X,WADI;AAEpCxR,uBAAO,EAAE,OAAI,CAAClG,gBAAL,CAAsB4X,IAFK;AAGpClT,yBAAS,EAAE,OAAI,CAAC1E,gBAAL,CAAsB0E,SAHG;AAIpCsB,6BAAa,EAAE,OAAI,CAACqS;AAJgB,eAAxB,GAKZ,IALJ;AAMAqC,iBAAG,CAAC9d,QAAJ,GAAe,OAAI,CAACA,QAApB;AACA8d,iBAAG,CAACnS,QAAJ,GAAe,OAAI,CAACA,QAApB;AACAmS,iBAAG,CAAC/e,cAAJ,GAAsB,OAAOA,cAAP,KAA0B,QAA1B,IAAsCA,cAAvC,GACjBA,cADiB,GACA,mFAAqBA,cAArB,CADrB;AAEA+e,iBAAG,CAACrS,iBAAJ,GAAwB,OAAI,CAACA,iBAA7B;AACAqS,iBAAG,CAAC7U,YAAJ,GAAmB,OAAI,CAACA,YAAxB;AACA6U,iBAAG,CACEE,mBADL,CACyB,OAAI,CAACC,mBAAL,EADzB,EAEKC,uBAFL,CAE6BpY,WAF7B,EAGKqY,mBAHL,CAGyBvY,OAHzB;;AAIA,kBAAImY,GAAJ,EAAS;AACLD,mBAAG,CAACM,aAAJ,CAAkBL,GAAG,CAACjlB,KAAtB;AACH;AACJ;AACJ,WApCD;AAqCH;AACD;;;;;;;;;sCAMcglB,G,EAAK;AAAA;;AACfA,aAAG,CAAC5e,OAAJ,CAAY6E,SAAZ;AAAuB;;;AAGvB,sBAAM;AACF,mBAAI,CAAC7E,OAAL,CAAamf,IAAb,CAAkB;AAAEtmB,oBAAM,EAAE;AAAV,aAAlB,EADE,CAEF;AACA;;;AACA,mBAAI,CAAC6jB,kBAAL,CAAwB0C,YAAxB;AACH,WARD;AASAR,aAAG,CAAC3e,QAAJ,CAAa4E,SAAb;AAAwB;;;AAGxB,sBAAM;AACF,mBAAI,CAAC5E,QAAL,CAAckf,IAAd,CAAmB;AAAEtmB,oBAAM,EAAE;AAAV,aAAnB;AACH,WALD;AAMA+lB,aAAG,CAAC1e,KAAJ,CAAU2E,SAAV;AAAqB;;;;AAIrB,oBAAAzH,KAAK,EAAI;AACL,mBAAI,CAAC8C,KAAL,CAAWif,IAAX,CAAgB;AAAEtmB,oBAAM,EAAE,OAAV;AAAgBuK,sBAAQ,EAAEhG,KAAK,CAACgG;AAAhC,aAAhB,EADK,CAEL;AACA;;;AACA,mBAAI,CAACsZ,kBAAL,CAAwB0C,YAAxB;AACH,WATD;AAUAR,aAAG,CAACze,OAAJ,CAAY0E,SAAZ;AAAuB;;;;AAIvB,oBAAAzH,KAAK,EAAI;AACL,mBAAI,CAAC+C,OAAL,CAAagf,IAAb,CAAkB;AACd1Z,uBAAS,EAAErI,KAAK,CAACqI,SAAN,CAAgBqW,IADb;AAEd5S,kBAAI,EAAE,OAFQ;AAGdH,0BAAY,EAAE3L,KAAK,CAAC2L;AAHN,aAAlB;AAKH,WAVD;AAWA6V,aAAG,CAACxe,MAAJ,CAAWyE,SAAX;AAAsB;;;;AAItB,oBAAAzH,KAAK,EAAI;AACL,mBAAI,CAACgD,MAAL,CAAY+e,IAAZ,CAAiB;AACb1Z,uBAAS,EAAErI,KAAK,CAACqI,SAAN,CAAgBqW,IADd;AAEb5S,kBAAI,EAAE;AAFO,aAAjB;AAIH,WATD;AAUA0V,aAAG,CAACve,OAAJ,CAAYwE,SAAZ;AAAuB;;;;AAIvB,oBAAAzH,KAAK,EAAI;AACL,mBAAI,CAACiD,OAAL,CAAa8e,IAAb,CAAkB;AACdhW,2BAAa,EAAE/L,KAAK,CAAC+L,aADP;AAEdJ,0BAAY,EAAE3L,KAAK,CAAC2L,YAFN;AAGdK,+BAAiB,EAAEhM,KAAK,CAACgM,iBAAN,CAAwB0S,IAH7B;AAIdrW,uBAAS,EAAErI,KAAK,CAACqI,SAAN,CAAgBqW,IAJb;AAKd9S,oCAAsB,EAAE5L,KAAK,CAAC4L,sBALhB;AAMdE,kBAAI,EAAE,OANQ;AAOd9F,sBAAQ,EAAEhG,KAAK,CAACgG;AAPF,aAAlB;AASH,WAdD;AAeH;AACD;;;;;;;;;wCAMgBkW,M,EAAQ;AAAA,cACZ7M,QADY,GAC0G6M,MAD1G,CACZ7M,QADY;AAAA,cACF5M,cADE,GAC0GyZ,MAD1G,CACFzZ,cADE;AAAA,cACc0M,iBADd,GAC0G+M,MAD1G,CACc/M,iBADd;AAAA,cACiCxC,YADjC,GAC0GuP,MAD1G,CACiCvP,YADjC;AAAA,cAC+CrF,eAD/C,GAC0G4U,MAD1G,CAC+C5U,eAD/C;AAAA,cACgE2a,gBADhE,GAC0G/F,MAD1G,CACgE+F,gBADhE;AAAA,cACkFd,mBADlF,GAC0GjF,MAD1G,CACkFiF,mBADlF;AAEpB,eAAKzd,QAAL,GAAgBue,gBAAgB,IAAI,IAApB,GAA2B,KAA3B,GAAmCA,gBAAnD;AACA,eAAKxf,cAAL,GAAsBA,cAAc,IAAI,CAAxC;;AACA,cAAI4M,QAAJ,EAAc;AACV,iBAAKA,QAAL,GAAgBA,QAAhB;AACH;;AACD,cAAIF,iBAAJ,EAAuB;AACnB,iBAAKA,iBAAL,GAAyBA,iBAAzB;AACH;;AACD,cAAIxC,YAAJ,EAAkB;AACd,iBAAKA,YAAL,GAAoBA,YAApB;AACH;;AACD,cAAIrF,eAAJ,EAAqB;AACjB,iBAAKA,eAAL,GAAuBA,eAAvB;AACH;;AACD,cAAI6Z,mBAAJ,EAAyB;AACrB,iBAAKA,mBAAL,GAA2BA,mBAA3B;AACH;AACJ;;;4BA1Tc;AACX,iBAAO,KAAKze,SAAL,IAAmB,KAAKyG,aAAL,IAAsB,KAAKA,aAAL,CAAmBzF,QAAnE;AACH;AACD;;;;;0BAIalH,K,EAAO;AAChB,eAAKkG,SAAL,GAAiB,oFAAsBlG,KAAtB,CAAjB;AACA,eAAKkjB,QAAL,CAAchc,QAAd,GAAyB,KAAKhB,SAA9B;AACH;;;;;;AAkTLwc,WAAO,CAAC7C,IAAR,GAAe,SAAS6F,eAAT,CAAyB3F,CAAzB,EAA4B;AAAE,aAAO,KAAKA,CAAC,IAAI2C,OAAV,EAAmB,gEAAyB,wDAAzB,CAAnB,EAAgE,gEAAyBD,aAAzB,EAAwC,EAAxC,CAAhE,EAA6G,gEAAyB,wDAAzB,CAA7G,EAAiJ,gEAAyB,oDAAzB,CAAjJ,EAA0L,gEAAyB,8DAAzB,CAA1L,EAA6O,gEAAyBH,eAAzB,EAA0C,CAA1C,CAA7O,EAA2R,gEAAyB,gEAAzB,EAAgD,CAAhD,CAA3R,EAA+U,gEAAyB9B,QAAzB,CAA/U,EAAmX,gEAAyB,+DAAzB,CAAnX,CAAP;AAAgb,KAA7d;;AACAkC,WAAO,CAAClB,IAAR,GAAe,gEAAyB;AAAEjT,UAAI,EAAEmU,OAAR;AAAiBjB,eAAS,EAAE,CAAC,CAAC,EAAD,EAAK,SAAL,EAAgB,EAAhB,CAAD,CAA5B;AAAmDkE,oBAAc,EAAE,SAASC,sBAAT,CAAgCC,EAAhC,EAAoCC,GAApC,EAAyCC,QAAzC,EAAmD;AAAE,YAAIF,EAAE,GAAG,CAAT,EAAY;AACpK,uEAAsBE,QAAtB,EAAgC5D,cAAhC,EAAgD,IAAhD;;AACA,uEAAsB4D,QAAtB,EAAgChE,kBAAhC,EAAoD,IAApD;;AACA,uEAAsBgE,QAAtB,EAAgC5E,aAAhC,EAA+C,IAA/C;AACH;;AAAC,YAAI0E,EAAE,GAAG,CAAT,EAAY;AACV,cAAIG,EAAJ;;AACA,uEAAsBA,EAAE,GAAG,2DAA3B,MAAqDF,GAAG,CAACxb,gBAAJ,GAAuB0b,EAAE,CAACC,KAA/E;AACA,uEAAsBD,EAAE,GAAG,2DAA3B,MAAqDF,GAAG,CAACvb,oBAAJ,GAA2Byb,EAAE,CAACC,KAAnF;AACA,uEAAsBD,EAAE,GAAG,2DAA3B,MAAqDF,GAAG,CAACjgB,QAAJ,GAAemgB,EAApE;AACH;AAAE,OATiC;AAS/BtE,eAAS,EAAE,CAAC,CAAD,EAAI,UAAJ,CAToB;AASHwE,cAAQ,EAAE,CATP;AASUC,kBAAY,EAAE,SAASC,oBAAT,CAA8BP,EAA9B,EAAkCC,GAAlC,EAAuC;AAAE,YAAID,EAAE,GAAG,CAAT,EAAY;AAC7G,oEAAmB,mBAAnB,EAAwCC,GAAG,CAAC5e,QAA5C,EAAsD,mBAAtD,EAA2E4e,GAAG,CAAC5C,QAAJ,CAAa1a,UAAb,EAA3E;AACH;AAAE,OAXiC;AAW/BmZ,YAAM,EAAE;AAAEza,gBAAQ,EAAE,CAAC,iBAAD,EAAoB,UAApB,CAAZ;AAA6CjB,sBAAc,EAAE,CAAC,mBAAD,EAAsB,gBAAtB,CAA7D;AAAsG4M,gBAAQ,EAAE,CAAC,iBAAD,EAAoB,UAApB,CAAhH;AAAiJF,yBAAiB,EAAE,CAAC,0BAAD,EAA6B,mBAA7B,CAApK;AAAuNxC,oBAAY,EAAE,CAAC,qBAAD,EAAwB,cAAxB,CAArO;AAA8QrF,uBAAe,EAAE,CAAC,iBAAD,EAAoB,iBAApB,CAA/R;AAAuU6Z,2BAAmB,EAAE,CAAC,oBAAD,EAAuB,qBAAvB,CAA5V;AAA2YzC,YAAI,EAAE,CAAC,aAAD,EAAgB,MAAhB,CAAjZ;AAA0amC,wBAAgB,EAAE,CAAC,yBAAD,EAA4B,kBAA5B;AAA5b,OAXuB;AAWwdgC,aAAO,EAAE;AAAEjgB,eAAO,EAAE,gBAAX;AAA6BC,gBAAQ,EAAE,iBAAvC;AAA0DC,aAAK,EAAE,cAAjE;AAAiFC,eAAO,EAAE,gBAA1F;AAA4GC,cAAM,EAAE,eAApH;AAAqIC,eAAO,EAAE,gBAA9I;AAAgKC,aAAK,EAAE;AAAvK,OAXje;AAW0pB4f,cAAQ,EAAE,CAAC,SAAD,CAXpqB;AAWirBC,cAAQ,EAAE,CAAC,iEAA0B,CAAC;AAAEC,eAAO,EAAEtF,eAAX;AAA4BuF,mBAAW,EAAE/D;AAAzC,OAAD,CAA1B,CAAD,EAAkF,kEAAlF;AAX3rB,KAAzB,CAAf;AAYA;;AACAA,WAAO,CAAC1C,cAAR,GAAyB;AAAA,aAAM,CAC3B;AAAEzR,YAAI,EAAE;AAAR,OAD2B,EAE3B;AAAEA,YAAI,EAAE1D,SAAR;AAAmBoV,kBAAU,EAAE,CAAC;AAAE1R,cAAI,EAAE,oDAAR;AAAgB2R,cAAI,EAAE,CAACuC,aAAD;AAAtB,SAAD,EAA2C;AAAElU,cAAI,EAAE;AAAR,SAA3C,EAA+D;AAAEA,cAAI,EAAE;AAAR,SAA/D;AAA/B,OAF2B,EAG3B;AAAEA,YAAI,EAAE1D,SAAR;AAAmBoV,kBAAU,EAAE,CAAC;AAAE1R,cAAI,EAAE,oDAAR;AAAgB2R,cAAI,EAAE,CAAC,wDAAD;AAAtB,SAAD;AAA/B,OAH2B,EAI3B;AAAE3R,YAAI,EAAE;AAAR,OAJ2B,EAK3B;AAAEA,YAAI,EAAE;AAAR,OAL2B,EAM3B;AAAEA,YAAI,EAAE1D,SAAR;AAAmBoV,kBAAU,EAAE,CAAC;AAAE1R,cAAI,EAAE;AAAR,SAAD,EAAqB;AAAEA,cAAI,EAAE,oDAAR;AAAgB2R,cAAI,EAAE,CAACoC,eAAD;AAAtB,SAArB;AAA/B,OAN2B,EAO3B;AAAE/T,YAAI,EAAE,gEAAR;AAAwB0R,kBAAU,EAAE,CAAC;AAAE1R,cAAI,EAAE;AAAR,SAAD;AAApC,OAP2B,EAQ3B;AAAEA,YAAI,EAAEiS;AAAR,OAR2B,EAS3B;AAAEjS,YAAI,EAAE;AAAR,OAT2B,CAAN;AAAA,KAAzB;;AAWAmU,WAAO,CAACd,cAAR,GAAyB;AACrB/b,cAAQ,EAAE,CAAC;AAAE0I,YAAI,EAAE,6DAAR;AAAyB2R,YAAI,EAAE,CAACiB,aAAD,EAAgB;AAAEuF,qBAAW,EAAE;AAAf,SAAhB;AAA/B,OAAD,CADW;AAErBpc,sBAAgB,EAAE,CAAC;AAAEiE,YAAI,EAAE,0DAAR;AAAsB2R,YAAI,EAAE,CAACiC,cAAD;AAA5B,OAAD,CAFG;AAGrB5X,0BAAoB,EAAE,CAAC;AAAEgE,YAAI,EAAE,0DAAR;AAAsB2R,YAAI,EAAE,CAAC6B,kBAAD;AAA5B,OAAD,CAHD;AAIrBG,UAAI,EAAE,CAAC;AAAE3T,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,aAAD;AAArB,OAAD,CAJe;AAKrBrN,cAAQ,EAAE,CAAC;AAAEtE,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,iBAAD;AAArB,OAAD,CALW;AAMrByE,yBAAmB,EAAE,CAAC;AAAEpW,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,oBAAD;AAArB,OAAD,CANA;AAOrBpV,qBAAe,EAAE,CAAC;AAAEyD,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,iBAAD;AAArB,OAAD,CAPI;AAQrBja,oBAAc,EAAE,CAAC;AAAEsI,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,mBAAD;AAArB,OAAD,CARK;AASrBmE,sBAAgB,EAAE,CAAC;AAAE9V,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,yBAAD;AAArB,OAAD,CATG;AAUrBhZ,cAAQ,EAAE,CAAC;AAAEqH,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,iBAAD;AAArB,OAAD,CAVW;AAWrBvN,uBAAiB,EAAE,CAAC;AAAEpE,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,0BAAD;AAArB,OAAD,CAXE;AAYrB/P,kBAAY,EAAE,CAAC;AAAE5B,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,qBAAD;AAArB,OAAD,CAZO;AAarB9Z,aAAO,EAAE,CAAC;AAAEmI,YAAI,EAAE,oDAAR;AAAgB2R,YAAI,EAAE,CAAC,gBAAD;AAAtB,OAAD,CAbY;AAcrB7Z,cAAQ,EAAE,CAAC;AAAEkI,YAAI,EAAE,oDAAR;AAAgB2R,YAAI,EAAE,CAAC,iBAAD;AAAtB,OAAD,CAdW;AAerB5Z,WAAK,EAAE,CAAC;AAAEiI,YAAI,EAAE,oDAAR;AAAgB2R,YAAI,EAAE,CAAC,cAAD;AAAtB,OAAD,CAfc;AAgBrB3Z,aAAO,EAAE,CAAC;AAAEgI,YAAI,EAAE,oDAAR;AAAgB2R,YAAI,EAAE,CAAC,gBAAD;AAAtB,OAAD,CAhBY;AAiBrB1Z,YAAM,EAAE,CAAC;AAAE+H,YAAI,EAAE,oDAAR;AAAgB2R,YAAI,EAAE,CAAC,eAAD;AAAtB,OAAD,CAjBa;AAkBrBzZ,aAAO,EAAE,CAAC;AAAE8H,YAAI,EAAE,oDAAR;AAAgB2R,YAAI,EAAE,CAAC,gBAAD;AAAtB,OAAD,CAlBY;AAmBrBxZ,WAAK,EAAE,CAAC;AAAE6H,YAAI,EAAE,oDAAR;AAAgB2R,YAAI,EAAE,CAAC,cAAD;AAAtB,OAAD;AAnBc,KAAzB;AAqBA;;AAAc,KAAC,YAAY;AAAE,sEAAyBwC,OAAzB,EAAkC,CAAC;AACxDnU,YAAI,EAAE,uDADkD;AAExD2R,YAAI,EAAE,CAAC;AACC2B,kBAAQ,EAAE,WADX;AAECyE,kBAAQ,EAAE,SAFX;AAGCxE,cAAI,EAAE;AACF,qBAAS,UADP;AAEF,yCAA6B,UAF3B;AAGF,yCAA6B;AAH3B,WAHP;AAQC6E,mBAAS,EAAE,CAAC;AAAEH,mBAAO,EAAEtF,eAAX;AAA4BuF,uBAAW,EAAE/D;AAAzC,WAAD;AARZ,SAAD;AAFkD,OAAD,CAAlC,EAYrB,YAAY;AAAE,eAAO,CAAC;AAAEnU,cAAI,EAAE;AAAR,SAAD,EAA8B;AAAEA,cAAI,EAAE1D,SAAR;AAAmBoV,oBAAU,EAAE,CAAC;AAC3E1R,gBAAI,EAAE,oDADqE;AAE3E2R,gBAAI,EAAE,CAACuC,aAAD;AAFqE,WAAD,EAG3E;AACClU,gBAAI,EAAE;AADP,WAH2E,EAK3E;AACCA,gBAAI,EAAE;AADP,WAL2E;AAA/B,SAA9B,EAOX;AAAEA,cAAI,EAAE1D,SAAR;AAAmBoV,oBAAU,EAAE,CAAC;AAClC1R,gBAAI,EAAE,oDAD4B;AAElC2R,gBAAI,EAAE,CAAC,wDAAD;AAF4B,WAAD;AAA/B,SAPW,EAUX;AAAE3R,cAAI,EAAE;AAAR,SAVW,EAUc;AAAEA,cAAI,EAAE;AAAR,SAVd,EAUiD;AAAEA,cAAI,EAAE1D,SAAR;AAAmBoV,oBAAU,EAAE,CAAC;AAC9F1R,gBAAI,EAAE;AADwF,WAAD,EAE9F;AACCA,gBAAI,EAAE,oDADP;AAEC2R,gBAAI,EAAE,CAACoC,eAAD;AAFP,WAF8F;AAA/B,SAVjD,EAeX;AAAE/T,cAAI,EAAE,gEAAR;AAA+B0R,oBAAU,EAAE,CAAC;AAC9C1R,gBAAI,EAAE;AADwC,WAAD;AAA3C,SAfW,EAiBX;AAAEA,cAAI,EAAEiS;AAAR,SAjBW,EAiBS;AAAEjS,cAAI,EAAE;AAAR,SAjBT,CAAP;AAiBsD,OA7B/C,EA6BiD;AAAEnI,eAAO,EAAE,CAAC;AAC9EmI,cAAI,EAAE,oDADwE;AAE9E2R,cAAI,EAAE,CAAC,gBAAD;AAFwE,SAAD,CAAX;AAGlE7Z,gBAAQ,EAAE,CAAC;AACXkI,cAAI,EAAE,oDADK;AAEX2R,cAAI,EAAE,CAAC,iBAAD;AAFK,SAAD,CAHwD;AAMlE5Z,aAAK,EAAE,CAAC;AACRiI,cAAI,EAAE,oDADE;AAER2R,cAAI,EAAE,CAAC,cAAD;AAFE,SAAD,CAN2D;AASlE3Z,eAAO,EAAE,CAAC;AACVgI,cAAI,EAAE,oDADI;AAEV2R,cAAI,EAAE,CAAC,gBAAD;AAFI,SAAD,CATyD;AAYlE1Z,cAAM,EAAE,CAAC;AACT+H,cAAI,EAAE,oDADG;AAET2R,cAAI,EAAE,CAAC,eAAD;AAFG,SAAD,CAZ0D;AAelEzZ,eAAO,EAAE,CAAC;AACV8H,cAAI,EAAE,oDADI;AAEV2R,cAAI,EAAE,CAAC,gBAAD;AAFI,SAAD,CAfyD;AAkBlExZ,aAAK,EAAE,CAAC;AACR6H,cAAI,EAAE,oDADE;AAER2R,cAAI,EAAE,CAAC,cAAD;AAFE,SAAD,CAlB2D;AAqBlEhZ,gBAAQ,EAAE,CAAC;AACXqH,cAAI,EAAE,mDADK;AAEX2R,cAAI,EAAE,CAAC,iBAAD;AAFK,SAAD,CArBwD;AAwBlEja,sBAAc,EAAE,CAAC;AACjBsI,cAAI,EAAE,mDADW;AAEjB2R,cAAI,EAAE,CAAC,mBAAD;AAFW,SAAD,CAxBkD;AA2BlErN,gBAAQ,EAAE,CAAC;AACXtE,cAAI,EAAE,mDADK;AAEX2R,cAAI,EAAE,CAAC,iBAAD;AAFK,SAAD,CA3BwD;AA8BlEvN,yBAAiB,EAAE,CAAC;AACpBpE,cAAI,EAAE,mDADc;AAEpB2R,cAAI,EAAE,CAAC,0BAAD;AAFc,SAAD,CA9B+C;AAiClE/P,oBAAY,EAAE,CAAC;AACf5B,cAAI,EAAE,mDADS;AAEf2R,cAAI,EAAE,CAAC,qBAAD;AAFS,SAAD,CAjCoD;AAoClEpV,uBAAe,EAAE,CAAC;AAClByD,cAAI,EAAE,mDADY;AAElB2R,cAAI,EAAE,CAAC,iBAAD;AAFY,SAAD,CApCiD;AAuClEyE,2BAAmB,EAAE,CAAC;AACtBpW,cAAI,EAAE,mDADgB;AAEtB2R,cAAI,EAAE,CAAC,oBAAD;AAFgB,SAAD,CAvC6C;AA0ClEra,gBAAQ,EAAE,CAAC;AACX0I,cAAI,EAAE,6DADK;AAEX2R,cAAI,EAAE,CAACiB,aAAD,EAAgB;AAAEuF,uBAAW,EAAE;AAAf,WAAhB;AAFK,SAAD,CA1CwD;AA6ClEpc,wBAAgB,EAAE,CAAC;AACnBiE,cAAI,EAAE,0DADa;AAEnB2R,cAAI,EAAE,CAACiC,cAAD;AAFa,SAAD,CA7CgD;AAgDlE5X,4BAAoB,EAAE,CAAC;AACvBgE,cAAI,EAAE,0DADiB;AAEvB2R,cAAI,EAAE,CAAC6B,kBAAD;AAFiB,SAAD,CAhD4C;AAmDlEG,YAAI,EAAE,CAAC;AACP3T,cAAI,EAAE,mDADC;AAEP2R,cAAI,EAAE,CAAC,aAAD;AAFC,SAAD,CAnD4D;AAsDlEmE,wBAAgB,EAAE,CAAC;AACnB9V,cAAI,EAAE,mDADa;AAEnB2R,cAAI,EAAE,CAAC,yBAAD;AAFa,SAAD;AAtDgD,OA7BjD;AAsFb,KAtFF;;AAuFd,QAAI,KAAJ,EAAW,CA0JV;AACD;;;;;;;;AAMA,aAAS0E,0BAAT,CAAoCvlB,OAApC,EAA6CwiB,QAA7C,EAAuD;AACnD;AACA,UAAI+E,cAAc;AAAI;AAAkBvnB,aAAO,CAAC8a,aAAhD;;AACA,aAAOyM,cAAP,EAAuB;AACnB;AACA,YAAIA,cAAc,CAACC,OAAf,GAAyBD,cAAc,CAACC,OAAf,CAAuBhF,QAAvB,CAAzB;AACE;AAAkB+E,sBAApB,CAAsCE,iBAAtC,CAAwDjF,QAAxD,CADJ,EACuE;AACnE,iBAAO+E,cAAP;AACH;;AACDA,sBAAc,GAAGA,cAAc,CAACzM,aAAhC;AACH;;AACD,aAAO,IAAP;AACH;AAED;;;;;;AAKA;;;;;;;;;QAOM4M,gB;AACF,kCAAc;AAAA;;AACV;;;AAGA,aAAKC,MAAL,GAAc,IAAIjhB,GAAJ,EAAd;AACA,aAAKG,SAAL,GAAiB,KAAjB;AACH;AACD;;;;;;;;;AAYA;;;sCAGc;AACV,eAAK8gB,MAAL,CAAYhkB,KAAZ;AACH;;;4BAbc;AAAE,iBAAO,KAAKkD,SAAZ;AAAwB;AACzC;;;;;0BAIalG,K,EAAO;AAChB,eAAKkG,SAAL,GAAiB,oFAAsBlG,KAAtB,CAAjB;AACH;;;;;;AAQL+mB,oBAAgB,CAAClH,IAAjB,GAAwB,SAASoH,wBAAT,CAAkClH,CAAlC,EAAqC;AAAE,aAAO,KAAKA,CAAC,IAAIgH,gBAAV,GAAP;AAAuC,KAAtG;;AACAA,oBAAgB,CAACvF,IAAjB,GAAwB,gEAAyB;AAAEjT,UAAI,EAAEwY,gBAAR;AAA0BtF,eAAS,EAAE,CAAC,CAAC,EAAD,EAAK,kBAAL,EAAyB,EAAzB,CAAD,CAArC;AAAqEE,YAAM,EAAE;AAAEza,gBAAQ,EAAE,CAAC,0BAAD,EAA6B,UAA7B;AAAZ,OAA7E;AAAqIof,cAAQ,EAAE,CAAC,kBAAD;AAA/I,KAAzB,CAAxB;AACAS,oBAAgB,CAACnF,cAAjB,GAAkC;AAC9B1a,cAAQ,EAAE,CAAC;AAAEqH,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,0BAAD;AAArB,OAAD;AADoB,KAAlC;AAGA;;AAAc,KAAC,YAAY;AAAE,sEAAyB6G,gBAAzB,EAA2C,CAAC;AACjExY,YAAI,EAAE,uDAD2D;AAEjE2R,YAAI,EAAE,CAAC;AACC2B,kBAAQ,EAAE,oBADX;AAECyE,kBAAQ,EAAE;AAFX,SAAD;AAF2D,OAAD,CAA3C,EAMrB,YAAY;AAAE,eAAO,EAAP;AAAY,OANL,EAMO;AAAEpf,gBAAQ,EAAE,CAAC;AACrCqH,cAAI,EAAE,mDAD+B;AAErC2R,cAAI,EAAE,CAAC,0BAAD;AAF+B,SAAD;AAAZ,OANP;AASb,KATF;;AAUd,QAAI,KAAJ,EAAW,CAaV;AAED;;;;;;AAKA;;;;;;AAIA,QAAIgH,gBAAgB,GAAG,CAAvB;AACA;;;;;;;AAMA,aAASC,mBAAT,GAA+B,CAAG;;AAClC,QAAMC,EAAE,GAAGvc,SAAX;AACA;;;;;QAIMwc,W;AACF;;;;;;;;;AASA,2BAAYhoB,OAAZ,EAAqBwjB,QAArB,EAA+BC,kBAA/B,EAAmDF,IAAnD,EAAyD0E,MAAzD,EAAiEC,iBAAjE,EAAoF7H,MAApF,EAA4F;AAAA;;AAAA;;AACxF,aAAKrgB,OAAL,GAAeA,OAAf;AACA,aAAKyjB,kBAAL,GAA0BA,kBAA1B;AACA,aAAKF,IAAL,GAAYA,IAAZ;AACA,aAAK0E,MAAL,GAAcA,MAAd;AACA,aAAKC,iBAAL,GAAyBA,iBAAzB;AACA;;;;AAGA,aAAKxE,UAAL,GAAkB,IAAI,4CAAJ,EAAlB;AACA;;;;;;AAKA,aAAK/H,WAAL,GAAmB,EAAnB;AACA;;;;;AAIA,aAAKwM,EAAL,2BAA2BN,gBAAgB,EAA3C;AACA;;;;;AAIA,aAAKpP,cAAL;AAAuB;;;AAGvB;AAAA,iBAAM,IAAN;AAAA,SAHA;AAIA;;;;;AAGA,aAAKrR,OAAL,GAAe,IAAI,0DAAJ,EAAf;AACA;;;;AAGA,aAAKF,OAAL,GAAe,IAAI,0DAAJ,EAAf;AACA;;;;;AAIA,aAAKC,MAAL,GAAc,IAAI,0DAAJ,EAAd;AACA;;;;AAGA,aAAKuR,MAAL,GAAc,IAAI,0DAAJ,EAAd;AACA;;;;;;;;AAOA,aAAK0P,cAAL,GAAsB,IAAI1hB,GAAJ,EAAtB;AACA,aAAKud,YAAL,GAAoBT,QAAQ,CAAC6E,cAAT,CAAwBroB,OAAxB,CAApB;AACA,aAAKikB,YAAL,CAAkBpB,IAAlB,GAAyB,IAAzB;;AACA,YAAIxC,MAAJ,EAAY;AACR,eAAK2D,eAAL,CAAqB3D,MAArB;AACH;;AACD,aAAK4D,YAAL,CAAkBxL,cAAlB;AAAoC;;;;;AAKpC,kBAACK,IAAD,EAAO1I,IAAP,EAAgB;AACZ,iBAAO,OAAI,CAACqI,cAAL,CAAoBK,IAAI,CAAC+J,IAAzB,EAA+BzS,IAAI,CAACyS,IAApC,CAAP;AACH,SAPD;;AAQA,aAAKyF,2BAAL,CAAiC,KAAKrE,YAAtC;;AACA,aAAKG,aAAL,CAAmB,KAAKH,YAAxB;;AACA+D,mBAAW,CAACO,UAAZ,CAAuBtN,IAAvB,CAA4B,IAA5B;;AACA,YAAIgN,MAAJ,EAAY;AACRA,gBAAM,CAACN,MAAP,CAAcrb,GAAd,CAAkB,IAAlB;AACH;AACJ;AACD;;;;;;;;;AAkBA;;;;;gCAKQ2D,I,EAAM;AACV,eAAKmY,cAAL,CAAoB9b,GAApB,CAAwB2D,IAAxB;;AACA,cAAI,KAAKgU,YAAL,CAAkB9a,UAAlB,EAAJ,EAAoC;AAChC,iBAAKqf,iBAAL;AACH;AACJ;AACD;;;;;;;;mCAKWvY,I,EAAM;AACb,eAAKmY,cAAL,WAA2BnY,IAA3B;;AACA,cAAI,KAAKgU,YAAL,CAAkB9a,UAAlB,EAAJ,EAAoC;AAChC,iBAAKqf,iBAAL;AACH;AACJ;AACD;;;;;;;yCAIiB;AACb,iBAAO5W,KAAK,CAACsF,IAAN,CAAW,KAAKkR,cAAhB,EAAgCzK,IAAhC;AAAsC;;;;;AAK7C,oBAACC,CAAD,EAAIC,CAAJ,EAAU;AACN;AACA,gBAAM4K,gBAAgB,GAAG7K,CAAC,CAACiG,QAAF,CAAWnG,iBAAX,GAA+BgL,uBAA/B,CAAuD7K,CAAC,CAACgG,QAAF,CAAWnG,iBAAX,EAAvD,CAAzB,CAFM,CAGN;AACA;AACA;;;AACA,mBAAO+K,gBAAgB,GAAGE,IAAI,CAACC,2BAAxB,GAAsD,CAAC,CAAvD,GAA2D,CAAlE;AACH,WAZM,CAAP;AAaH;AACD;;;;;;sCAGc;AACV;AACA,cAAMrO,KAAK,GAAGyN,WAAW,CAACO,UAAZ,CAAuBznB,OAAvB,CAA+B,IAA/B,CAAd;;AACA,cAAIyZ,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZyN,uBAAW,CAACO,UAAZ,CAAuB9Q,MAAvB,CAA8B8C,KAA9B,EAAqC,CAArC;AACH;;AACD,cAAI,KAAK0N,MAAT,EAAiB;AACb,iBAAKA,MAAL,CAAYN,MAAZ,WAA0B,IAA1B;AACH;;AACD,eAAKS,cAAL,CAAoBzkB,KAApB;;AACA,eAAKsgB,YAAL,CAAkBoB,OAAlB;;AACA,eAAK3B,UAAL,CAAgBlc,IAAhB;;AACA,eAAKkc,UAAL,CAAgBtX,QAAhB;AACH;AACD;;;;;;;;;gCAMQ;AACJ,eAAK6X,YAAL,CAAkB5V,KAAlB;AACH;AACD;;;;;;;;;;;;;;;6BAYK4B,I,EAAMH,Y,EAAcK,iB,EAAmBJ,sB,EAAwB;AAChE,eAAKkU,YAAL,CAAkB7T,IAAlB,CAAuBH,IAAI,CAAC4T,QAA5B,EAAsC/T,YAAtC,EAAoDK,iBAAiB,CAAC8T,YAAtE,EAAoFlU,sBAApF,EAA4G;AAAEpN,aAAC,EAAE,CAAL;AAAQC,aAAC,EAAE;AAAX,WAA5G;AACH;AACD;;;;;;;;;;;;8BASMqN,I,EAAMhN,Q,EAAUC,Q,EAAU;AAC5B,eAAK+gB,YAAL,CAAkBzT,KAAlB,CAAwBP,IAAI,CAAC4T,QAA7B,EAAuC5gB,QAAvC,EAAiDC,QAAjD;AACH;AACD;;;;;;;;;;6BAOK+M,I,EAAM;AACP,eAAKgU,YAAL,CAAkB1T,IAAlB,CAAuBN,IAAI,CAAC4T,QAA5B;AACH;AACD;;;;;;;;;;qCAOa5T,I,EAAM;AACf,iBAAO,KAAKgU,YAAL,CAAkBzV,YAAlB,CAA+ByB,IAAI,CAAC4T,QAApC,CAAP;AACH;AACD;;;;;;;;;oDAM4B8B,G,EAAK;AAAA;;AAC7B,cAAI,KAAKpC,IAAT,EAAe;AACX,iBAAKA,IAAL,CAAU5X,MAAV,CACK6N,IADL,CACU,iEAAU,KAAK+J,IAAL,CAAU5iB,KAApB,CADV,EACsC,iEAAU,KAAK+iB,UAAf,CADtC,EAEK9X,SAFL;AAEgB;;;;AAIhB,sBAAAjL,KAAK;AAAA,qBAAIglB,GAAG,CAACM,aAAJ,CAAkBtlB,KAAlB,CAAJ;AAAA,aANL;AAOH;;AACDglB,aAAG,CAAC7e,aAAJ,CAAkB8E,SAAlB;AAA6B;;;AAG7B,sBAAM;AACF;AACA,gBAAMyQ,QAAQ,GAAG,0EAAY,OAAI,CAACV,WAAjB,EAA8B7Z,GAA9B;AAAmC;;;;AAIpD,sBAAAsO,IAAI,EAAI;AACJ,qBAAO,OAAOA,IAAP,KAAgB,QAAhB;AACF;AAAkB4X,yBAAW,CAACO,UAAZ,CAAuBjnB,IAAvB;AAA6B;;;;AAIhD,wBAAAunB,IAAI;AAAA,uBAAIA,IAAI,CAACV,EAAL,KAAY/X,IAAhB;AAAA,eAJe,CADhB,GAK4BA,IALnC;AAMH,aAXgB,CAAjB;;AAYA,gBAAI,OAAI,CAAC6X,MAAT,EAAiB;AACb,qBAAI,CAACA,MAAL,CAAYN,MAAZ,CAAmB3jB,OAAnB;AAA4B;;;;AAI5B,wBAAAoM,IAAI,EAAI;AACJ,oBAAIiM,QAAQ,CAACvb,OAAT,CAAiBsP,IAAjB,MAA2B,CAAC,CAAhC,EAAmC;AAC/BiM,0BAAQ,CAACpB,IAAT,CAAc7K,IAAd;AACH;AACJ,eARD;AASH,aAxBC,CAyBF;AACA;AACA;;;AACA,gBAAI,CAAC,OAAI,CAAC0Y,0BAAN,IAAoC,OAAI,CAACZ,iBAA7C,EAAgE;AAC5D;AACA,kBAAMa,iBAAiB,GAAG,OAAI,CAACb,iBAAL,CACrBc,2BADqB,CACO,OAAI,CAAChpB,OADZ,EAErB8B,GAFqB;AAEhB;;;;AAIV,wBAAAmnB,UAAU;AAAA,uBAAIA,UAAU,CAACC,aAAX,GAA2BxK,aAA/B;AAAA,eANgB,CAA1B;;AAOA,qBAAI,CAACuF,YAAL,CAAkBrK,qBAAlB,CAAwCmP,iBAAxC,EAT4D,CAU5D;AACA;;;AACA,qBAAI,CAACD,0BAAL,GAAkC,IAAlC;AACH;;AACDnD,eAAG,CAAC9d,QAAJ,GAAe,OAAI,CAACA,QAApB;AACA8d,eAAG,CAACnS,QAAJ,GAAe,OAAI,CAACA,QAApB;AACAmS,eAAG,CAAClV,eAAJ,GAAsB,oFAAsB,OAAI,CAACA,eAA3B,CAAtB;AACAkV,eAAG,CAACnN,kBAAJ,GAAyB,oFAAsB,OAAI,CAACA,kBAA3B,CAAzB;AACAmN,eAAG,CACEhK,WADL,CACiBU,QAAQ,CAACZ,MAAT;AAAiB;;;;AAIlC,sBAAArL,IAAI;AAAA,qBAAIA,IAAI,IAAIA,IAAI,KAAK,OAArB;AAAA,aAJa,EAIetO,GAJf;AAIoB;;;;AAIrC,sBAAA+mB,IAAI;AAAA,qBAAIA,IAAI,CAAC5E,YAAT;AAAA,aARa,CADjB,EAUKkF,eAVL,CAUqB,OAAI,CAACtN,WAV1B;AAWH,WA5DD;AA6DH;AACD;;;;;;;;;sCAMc8J,G,EAAK;AAAA;;AACfA,aAAG,CAAC7e,aAAJ,CAAkB8E,SAAlB;AAA6B;;;AAG7B,sBAAM;AACF,mBAAI,CAAC4c,iBAAL;;AACA,mBAAI,CAAC/E,kBAAL,CAAwB0C,YAAxB;AACH,WAND;AAOAR,aAAG,CAACze,OAAJ,CAAY0E,SAAZ;AAAuB;;;;AAIvB,oBAAAzH,KAAK,EAAI;AACL,mBAAI,CAAC+C,OAAL,CAAagf,IAAb,CAAkB;AACd1Z,uBAAS,EAAE,OADG;AAEdyD,kBAAI,EAAE9L,KAAK,CAAC8L,IAAN,CAAW4S,IAFH;AAGd/S,0BAAY,EAAE3L,KAAK,CAAC2L;AAHN,aAAlB;AAKH,WAVD;AAWA6V,aAAG,CAACxe,MAAJ,CAAWyE,SAAX;AAAsB;;;;AAItB,oBAAAzH,KAAK,EAAI;AACL,mBAAI,CAACgD,MAAL,CAAY+e,IAAZ,CAAiB;AACb1Z,uBAAS,EAAE,OADE;AAEbyD,kBAAI,EAAE9L,KAAK,CAAC8L,IAAN,CAAW4S;AAFJ,aAAjB;;AAIA,mBAAI,CAACY,kBAAL,CAAwB0C,YAAxB;AACH,WAVD;AAWAR,aAAG,CAACjN,MAAJ,CAAW9M,SAAX;AAAsB;;;;AAItB,oBAAAzH,KAAK,EAAI;AACL,mBAAI,CAACuU,MAAL,CAAYwN,IAAZ,CAAiB;AACbhW,2BAAa,EAAE/L,KAAK,CAAC+L,aADR;AAEbJ,0BAAY,EAAE3L,KAAK,CAAC2L,YAFP;AAGbtD,uBAAS,EAAE,OAHE;AAIbyD,kBAAI,EAAE9L,KAAK,CAAC8L,IAAN,CAAW4S;AAJJ,aAAjB;AAMH,WAXD;AAYA8C,aAAG,CAACve,OAAJ,CAAYwE,SAAZ;AAAuB;;;;AAIvB,oBAAAzH,KAAK,EAAI;AACL,mBAAI,CAACiD,OAAL,CAAa8e,IAAb,CAAkB;AACdhW,2BAAa,EAAE/L,KAAK,CAAC+L,aADP;AAEdJ,0BAAY,EAAE3L,KAAK,CAAC2L,YAFN;AAGdK,+BAAiB,EAAEhM,KAAK,CAACgM,iBAAN,CAAwB0S,IAH7B;AAIdrW,uBAAS,EAAErI,KAAK,CAACqI,SAAN,CAAgBqW,IAJb;AAKd5S,kBAAI,EAAE9L,KAAK,CAAC8L,IAAN,CAAW4S,IALH;AAMd9S,oCAAsB,EAAE5L,KAAK,CAAC4L,sBANhB;AAOd5F,sBAAQ,EAAEhG,KAAK,CAACgG;AAPF,aAAlB,EADK,CAUL;AACA;;;AACA,mBAAI,CAACsZ,kBAAL,CAAwB0C,YAAxB;AACH,WAjBD;AAkBH;AACD;;;;;;;;;wCAMgB9F,M,EAAQ;AAAA,cACZ7M,QADY,GAC6E6M,MAD7E,CACZ7M,QADY;AAAA,cACF4S,gBADE,GAC6E/F,MAD7E,CACF+F,gBADE;AAAA,cACgB3V,eADhB,GAC6E4P,MAD7E,CACgB5P,eADhB;AAAA,cACiC2Y,sBADjC,GAC6E/I,MAD7E,CACiC+I,sBADjC;AAAA,cACyDC,eADzD,GAC6EhJ,MAD7E,CACyDgJ,eADzD;AAEpB,eAAKxhB,QAAL,GAAgBue,gBAAgB,IAAI,IAApB,GAA2B,KAA3B,GAAmCA,gBAAnD;AACA,eAAK3V,eAAL,GAAuBA,eAAe,IAAI,IAAnB,GAA0B,KAA1B,GAAkCA,eAAzD;AACA,eAAK+H,kBAAL,GAA0B4Q,sBAAsB,IAAI,IAA1B,GAAiC,KAAjC,GAAyCA,sBAAnE;AACA,eAAKvN,WAAL,GAAmBwN,eAAe,IAAI,UAAtC;;AACA,cAAI7V,QAAJ,EAAc;AACV,iBAAKA,QAAL,GAAgBA,QAAhB;AACH;AACJ;AACD;;;;;;;;4CAKoB;AAChB,eAAKyQ,YAAL,CAAkBqF,SAAlB,CAA4B,KAAKC,cAAL,GAAsBznB,GAAtB;AAA2B;;;;AAIvD,oBAAAmO,IAAI;AAAA,mBAAIA,IAAI,CAAC4T,QAAT;AAAA,WAJwB,CAA5B;AAKH;;;4BA5Sc;AACX,iBAAO,KAAKhd,SAAL,IAAmB,CAAC,CAAC,KAAKohB,MAAP,IAAiB,KAAKA,MAAL,CAAYpgB,QAAvD;AACH;AACD;;;;;0BAIalH,K,EAAO;AAChB;AACA;AACA;AACA;AACA,eAAKsjB,YAAL,CAAkBpc,QAAlB,GAA6B,KAAKhB,SAAL,GAAiB,oFAAsBlG,KAAtB,CAA9C;AACH;;;;;;AAiSLqnB,eAAW,CAACxH,IAAZ,GAAmB,SAASgJ,mBAAT,CAA6B9I,CAA7B,EAAgC;AAAE,aAAO,KAAKA,CAAC,IAAIsH,WAAV,EAAuB,gEAAyB,wDAAzB,CAAvB,EAAoE,gEAAyB7G,QAAzB,CAApE,EAAwG,gEAAyB,+DAAzB,CAAxG,EAA4J,gEAAyB,gEAAzB,EAAgD,CAAhD,CAA5J,EAAgN,gEAAyBuG,gBAAzB,EAA2C,EAA3C,CAAhN,EAAgQ,gEAAyB,uEAAzB,CAAhQ,EAAmT,gEAAyBzE,eAAzB,EAA0C,CAA1C,CAAnT,CAAP;AAA0W,KAA/Z;;AACA+E,eAAW,CAAC7F,IAAZ,GAAmB,gEAAyB;AAAEjT,UAAI,EAAE8Y,WAAR;AAAqB5F,eAAS,EAAE,CAAC,CAAC,EAAD,EAAK,aAAL,EAAoB,EAApB,CAAD,EAA0B,CAAC,eAAD,CAA1B,CAAhC;AAA8EC,eAAS,EAAE,CAAC,CAAD,EAAI,eAAJ,CAAzF;AAA+GwE,cAAQ,EAAE,CAAzH;AAA4HC,kBAAY,EAAE,SAAS2C,wBAAT,CAAkCjD,EAAlC,EAAsCC,GAAtC,EAA2C;AAAE,YAAID,EAAE,GAAG,CAAT,EAAY;AACvO,uEAAsB,IAAtB,EAA4BC,GAAG,CAAC0B,EAAhC;;AACA,oEAAmB,wBAAnB,EAA6C1B,GAAG,CAAC5e,QAAjD,EAA2D,wBAA3D,EAAqF4e,GAAG,CAACxC,YAAJ,CAAiB9a,UAAjB,EAArF,EAAoH,yBAApH,EAA+Isd,GAAG,CAACxC,YAAJ,CAAiBpF,WAAjB,EAA/I;AACH;AAAE,OAHqC;AAGnCyD,YAAM,EAAE;AAAE3G,mBAAW,EAAE,CAAC,wBAAD,EAA2B,aAA3B,CAAf;AAA0DwM,UAAE,EAAE,IAA9D;AAAoE1P,sBAAc,EAAE,CAAC,2BAAD,EAA8B,gBAA9B,CAApF;AAAqI5Q,gBAAQ,EAAE,CAAC,qBAAD,EAAwB,UAAxB,CAA/I;AAAoL4I,uBAAe,EAAE,CAAC,4BAAD,EAA+B,iBAA/B,CAArM;AAAwP+H,0BAAkB,EAAE,CAAC,+BAAD,EAAkC,oBAAlC,CAA5Q;AAAqUqD,mBAAW,EAAE,CAAC,wBAAD,EAA2B,aAA3B,CAAlV;AAA6XrI,gBAAQ,EAAE,CAAC,qBAAD,EAAwB,UAAxB,CAAvY;AAA4aqP,YAAI,EAAE,CAAC,iBAAD,EAAoB,MAApB;AAAlb,OAH2B;AAGsbmE,aAAO,EAAE;AAAE5f,eAAO,EAAE,oBAAX;AAAiCF,eAAO,EAAE,oBAA1C;AAAgEC,cAAM,EAAE,mBAAxE;AAA6FuR,cAAM,EAAE;AAArG,OAH/b;AAG2jBuO,cAAQ,EAAE,CAAC,aAAD,CAHrkB;AAGslBC,cAAQ,EAAE,CAAC,iEAA0B,CAC3pB;AACA;AAAEC,eAAO,EAAEO,gBAAX;AAA6BgC,gBAAQ,EAAE3B;AAAvC,OAF2pB,EAG3pB;AAAEZ,eAAO,EAAE/D,aAAX;AAA0BgE,mBAAW,EAAEY;AAAvC,OAH2pB,CAA1B,CAAD;AAHhmB,KAAzB,CAAnB;AAQA;;;;AAGAA,eAAW,CAACO,UAAZ,GAAyB,EAAzB;AACA;;AACAP,eAAW,CAACrH,cAAZ,GAA6B;AAAA,aAAM,CAC/B;AAAEzR,YAAI,EAAE;AAAR,OAD+B,EAE/B;AAAEA,YAAI,EAAEiS;AAAR,OAF+B,EAG/B;AAAEjS,YAAI,EAAE;AAAR,OAH+B,EAI/B;AAAEA,YAAI,EAAE,gEAAR;AAAwB0R,kBAAU,EAAE,CAAC;AAAE1R,cAAI,EAAE;AAAR,SAAD;AAApC,OAJ+B,EAK/B;AAAEA,YAAI,EAAEwY,gBAAR;AAA0B9G,kBAAU,EAAE,CAAC;AAAE1R,cAAI,EAAE;AAAR,SAAD,EAAqB;AAAEA,cAAI,EAAE;AAAR,SAArB;AAAtC,OAL+B,EAM/B;AAAEA,YAAI,EAAE;AAAR,OAN+B,EAO/B;AAAEA,YAAI,EAAE1D,SAAR;AAAmBoV,kBAAU,EAAE,CAAC;AAAE1R,cAAI,EAAE;AAAR,SAAD,EAAqB;AAAEA,cAAI,EAAE,oDAAR;AAAgB2R,cAAI,EAAE,CAACoC,eAAD;AAAtB,SAArB;AAA/B,OAP+B,CAAN;AAAA,KAA7B;;AASA+E,eAAW,CAACzF,cAAZ,GAA6B;AACzB5G,iBAAW,EAAE,CAAC;AAAEzM,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,wBAAD;AAArB,OAAD,CADY;AAEzBgC,UAAI,EAAE,CAAC;AAAE3T,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,iBAAD;AAArB,OAAD,CAFmB;AAGzBhF,iBAAW,EAAE,CAAC;AAAE3M,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,wBAAD;AAArB,OAAD,CAHY;AAIzBsH,QAAE,EAAE,CAAC;AAAEjZ,YAAI,EAAE;AAAR,OAAD,CAJqB;AAKzBsE,cAAQ,EAAE,CAAC;AAAEtE,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,qBAAD;AAArB,OAAD,CALe;AAMzBhZ,cAAQ,EAAE,CAAC;AAAEqH,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,qBAAD;AAArB,OAAD,CANe;AAOzBpQ,qBAAe,EAAE,CAAC;AAAEvB,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,4BAAD;AAArB,OAAD,CAPQ;AAQzBpI,oBAAc,EAAE,CAAC;AAAEvJ,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,2BAAD;AAArB,OAAD,CARS;AASzBrI,wBAAkB,EAAE,CAAC;AAAEtJ,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,+BAAD;AAArB,OAAD,CATK;AAUzBzZ,aAAO,EAAE,CAAC;AAAE8H,YAAI,EAAE,oDAAR;AAAgB2R,YAAI,EAAE,CAAC,oBAAD;AAAtB,OAAD,CAVgB;AAWzB3Z,aAAO,EAAE,CAAC;AAAEgI,YAAI,EAAE,oDAAR;AAAgB2R,YAAI,EAAE,CAAC,oBAAD;AAAtB,OAAD,CAXgB;AAYzB1Z,YAAM,EAAE,CAAC;AAAE+H,YAAI,EAAE,oDAAR;AAAgB2R,YAAI,EAAE,CAAC,mBAAD;AAAtB,OAAD,CAZiB;AAazBnI,YAAM,EAAE,CAAC;AAAExJ,YAAI,EAAE,oDAAR;AAAgB2R,YAAI,EAAE,CAAC,mBAAD;AAAtB,OAAD;AAbiB,KAA7B;AAeA;;AAAc,KAAC,YAAY;AAAE,sEAAyBmH,WAAzB,EAAsC,CAAC;AAC5D9Y,YAAI,EAAE,uDADsD;AAE5D2R,YAAI,EAAE,CAAC;AACC2B,kBAAQ,EAAE,8BADX;AAECyE,kBAAQ,EAAE,aAFX;AAGCK,mBAAS,EAAE,CACP;AACA;AAAEH,mBAAO,EAAEO,gBAAX;AAA6BgC,oBAAQ,EAAE3B;AAAvC,WAFO,EAGP;AAAEZ,mBAAO,EAAE/D,aAAX;AAA0BgE,uBAAW,EAAEY;AAAvC,WAHO,CAHZ;AAQCvF,cAAI,EAAE;AACF,qBAAS,eADP;AAEF,oBAAQ,IAFN;AAGF,8CAAkC,UAHhC;AAIF,8CAAkC,2BAJhC;AAKF,+CAAmC;AALjC;AARP,SAAD;AAFsD,OAAD,CAAtC,EAkBrB,YAAY;AAAE,eAAO,CAAC;AAAEvT,cAAI,EAAE;AAAR,SAAD,EAA8B;AAAEA,cAAI,EAAEiS;AAAR,SAA9B,EAAkD;AAAEjS,cAAI,EAAE;AAAR,SAAlD,EAAsF;AAAEA,cAAI,EAAE,gEAAR;AAA+B0R,oBAAU,EAAE,CAAC;AAC/I1R,gBAAI,EAAE;AADyI,WAAD;AAA3C,SAAtF,EAEX;AAAEA,cAAI,EAAEwY,gBAAR;AAA0B9G,oBAAU,EAAE,CAAC;AACzC1R,gBAAI,EAAE;AADmC,WAAD,EAEzC;AACCA,gBAAI,EAAE;AADP,WAFyC;AAAtC,SAFW,EAMX;AAAEA,cAAI,EAAE;AAAR,SANW,EAMwB;AAAEA,cAAI,EAAE1D,SAAR;AAAmBoV,oBAAU,EAAE,CAAC;AACrE1R,gBAAI,EAAE;AAD+D,WAAD,EAErE;AACCA,gBAAI,EAAE,oDADP;AAEC2R,gBAAI,EAAE,CAACoC,eAAD;AAFP,WAFqE;AAA/B,SANxB,CAAP;AAWF,OA7BS,EA6BP;AAAEtH,mBAAW,EAAE,CAAC;AAC1BzM,cAAI,EAAE,mDADoB;AAE1B2R,cAAI,EAAE,CAAC,wBAAD;AAFoB,SAAD,CAAf;AAGVsH,UAAE,EAAE,CAAC;AACLjZ,cAAI,EAAE;AADD,SAAD,CAHM;AAKVuJ,sBAAc,EAAE,CAAC;AACjBvJ,cAAI,EAAE,mDADW;AAEjB2R,cAAI,EAAE,CAAC,2BAAD;AAFW,SAAD,CALN;AAQVzZ,eAAO,EAAE,CAAC;AACV8H,cAAI,EAAE,oDADI;AAEV2R,cAAI,EAAE,CAAC,oBAAD;AAFI,SAAD,CARC;AAWV3Z,eAAO,EAAE,CAAC;AACVgI,cAAI,EAAE,oDADI;AAEV2R,cAAI,EAAE,CAAC,oBAAD;AAFI,SAAD,CAXC;AAcV1Z,cAAM,EAAE,CAAC;AACT+H,cAAI,EAAE,oDADG;AAET2R,cAAI,EAAE,CAAC,mBAAD;AAFG,SAAD,CAdE;AAiBVnI,cAAM,EAAE,CAAC;AACTxJ,cAAI,EAAE,oDADG;AAET2R,cAAI,EAAE,CAAC,mBAAD;AAFG,SAAD,CAjBE;AAoBVhZ,gBAAQ,EAAE,CAAC;AACXqH,cAAI,EAAE,mDADK;AAEX2R,cAAI,EAAE,CAAC,qBAAD;AAFK,SAAD,CApBA;AAuBVpQ,uBAAe,EAAE,CAAC;AAClBvB,cAAI,EAAE,mDADY;AAElB2R,cAAI,EAAE,CAAC,4BAAD;AAFY,SAAD,CAvBP;AA0BVrI,0BAAkB,EAAE,CAAC;AACrBtJ,cAAI,EAAE,mDADe;AAErB2R,cAAI,EAAE,CAAC,+BAAD;AAFe,SAAD,CA1BV;AA6BVhF,mBAAW,EAAE,CAAC;AACd3M,cAAI,EAAE,mDADQ;AAEd2R,cAAI,EAAE,CAAC,wBAAD;AAFQ,SAAD,CA7BH;AAgCVrN,gBAAQ,EAAE,CAAC;AACXtE,cAAI,EAAE,mDADK;AAEX2R,cAAI,EAAE,CAAC,qBAAD;AAFK,SAAD,CAhCA;AAmCVgC,YAAI,EAAE,CAAC;AACP3T,cAAI,EAAE,mDADC;AAEP2R,cAAI,EAAE,CAAC,iBAAD;AAFC,SAAD;AAnCI,OA7BO;AAmEb,KAnEF;;AAoEd,QAAI,KAAJ,EAAW,CAyIV;AAED;;;;;;;QAKM8I,c;;;;AAENA,kBAAc,CAACC,IAAf,GAAsB,+DAAwB;AAAE1a,UAAI,EAAEya;AAAR,KAAxB,CAAtB;AACAA,kBAAc,CAACE,IAAf,GAAsB,+DAAwB;AAAE9I,aAAO,EAAE,SAAS+I,sBAAT,CAAgCpJ,CAAhC,EAAmC;AAAE,eAAO,KAAKA,CAAC,IAAIiJ,cAAV,GAAP;AAAqC,OAArF;AAAuFrC,eAAS,EAAE,CACxInG,QADwI,CAAlG;AAEvC4I,aAAO,EAAE,CAAC,0EAAD;AAF8B,KAAxB,CAAtB;;AAGA,KAAC,YAAY;AAAE,OAAC,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD,iEAA0BL,cAA1B,EAA0C;AAAEM,oBAAY,EAAE,wBAAY;AAAE,iBAAO,CAACjC,WAAD,EACzIN,gBADyI,EAEzIrE,OAFyI,EAGzIvB,aAHyI,EAIzIgB,cAJyI,EAKzIJ,kBALyI,CAAP;AAK5G,SAL8E;AAK5EwH,eAAO,EAAE,mBAAY;AAAE,iBAAO,CAAC,0EAAD,EACtDlC,WADsD,EAEtDN,gBAFsD,EAGtDrE,OAHsD,EAItDvB,aAJsD,EAKtDgB,cALsD,EAMtDJ,kBANsD,CAAP;AAMzB;AAX8E,OAA1C,CAAnD;AAWqB,KAXpC;AAYA;;;AAAc,KAAC,YAAY;AAAE,sEAAyBiH,cAAzB,EAAyC,CAAC;AAC/Dza,YAAI,EAAE,sDADyD;AAE/D2R,YAAI,EAAE,CAAC;AACCoJ,sBAAY,EAAE,CACVjC,WADU,EAEVN,gBAFU,EAGVrE,OAHU,EAIVvB,aAJU,EAKVgB,cALU,EAMVJ,kBANU,CADf;AASCwH,iBAAO,EAAE,CACL,0EADK,EAELlC,WAFK,EAGLN,gBAHK,EAILrE,OAJK,EAKLvB,aALK,EAMLgB,cANK,EAOLJ,kBAPK,CATV;AAkBC4E,mBAAS,EAAE,CACPnG,QADO;AAlBZ,SAAD;AAFyD,OAAD,CAAzC,EAwBrB,IAxBqB,EAwBf,IAxBe;AAwBP,KAxBR;AA0Bd;;;;;;AAMA;;;AAMA;;;;;;;;;;;;;;;;;;ACn1LA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAOA;;;;;;AAKA;;;;;;;AASA,QAAMgJ,GAAG,GAAG,CAAC,QAAD,CAAZ;AACA,QAAMC,GAAG,GAAG,CAAC,GAAD,CAAZ;;AACA,aAASC,6BAAT,GAAyC,CAAG;;AAC5C,QAAI,KAAJ,EAAW,CAGV;AACD;;;;;;;AAKA,QAAMC,iCAAiC,GAAG,IAAI,4DAAJ,CAAmB,mCAAnB,CAA1C;AACA;;;;;;;AAMA,QAAMC,sCAAsC,GAAG;AAC3CpD,aAAO,EAAE,gEADkC;AAE3CC,iBAAW,EAAE;AAAY;;;AAGzB;AAAA,eAAMoD,oBAAN;AAAA,OAHa,CAF8B;AAM3CC,WAAK,EAAE;AANoC,KAA/C;AAQA;;;;;QAIMC,4B;;;AAEN;;;AACA,QAAI7C,gBAAgB,GAAG,CAAvB;AACA;;;;QAGM8C,qB;AACF;;;;AAIA,mCAAY/qB,MAAZ,EAAoBe,KAApB,EAA2B;AAAA;;AACvB,WAAKf,MAAL,GAAcA,MAAd;AACA,WAAKe,KAAL,GAAaA,KAAb;AACH,K;;AAEL,QAAI,KAAJ,EAAW,CAWV;AACD;;;;;QAGM6pB,oB;AACF;;;;AAIA,oCAAYI,eAAZ,EAA6BC,cAA7B,EAA6C;AAAA;;AACzC,aAAKD,eAAL,GAAuBA,eAAvB;AACA,aAAKE,SAAL,GAAiB,KAAjB;AACA,aAAKC,SAAL,GAAiB,KAAjB;AACA,aAAKlkB,SAAL,GAAiB,KAAjB;AACA;;;;;AAIA,aAAKmkB,6BAAL;AAAsC;;;AAGtC,oBAAM,CAAG,CAHT;AAIA;;;;;AAGA,aAAKC,UAAL;AAAmB;;;AAGnB,oBAAM,CAAG,CAHT;;AAIA,aAAKC,KAAL,qCAAwCrD,gBAAgB,EAAxD;AACA;;;;;;AAKA,aAAKsD,WAAL,GAAmB,IAAI,0DAAJ,EAAnB;AACA;;;;AAGA,aAAKxf,MAAL,GAAc,IAAI,0DAAJ,EAAd;AACA,aAAKyf,UAAL,GACIP,cAAc,IAAIA,cAAc,CAACO,UAAjC,GAA8CP,cAAc,CAACO,UAA7D,GAA0E,UAD9E;AAEH;AACD;;;;;;;;;AAkGA;;;mCAGW;AACP,eAAKC,eAAL,GAAuB,IAAI,uEAAJ,CAAmB,KAAKC,QAAxB,EAAkC9f,SAAlC,EAA6C,KAA7C,CAAvB;AACH;AACD;;;;;;6CAGqB;AAAA;;AACjB,wCAAK6f,eAAL,EAAqBE,MAArB,iDAA+B,KAAKC,cAAL,CAAoB/P,MAApB;AAA4B;;;;AAI3D,oBAAAgQ,MAAM;AAAA,mBAAIA,MAAM,CAACC,OAAX;AAAA,WAJyB,CAA/B;AAKH;AACD;;;;;;;;mCAKW/qB,K,EAAO;AACd,eAAKA,KAAL,GAAaA,KAAb;;AACA,eAAKiqB,eAAL,CAAqBzE,YAArB;AACH,S,CACD;;AACA;;;;;;;yCAIiBwF,E,EAAI;AACjB,eAAKX,6BAAL,GAAqCW,EAArC;AACH,S,CACD;;AACA;;;;;;;0CAIkBA,E,EAAI;AAClB,eAAKV,UAAL,GAAkBU,EAAlB;AACH,S,CACD;;AACA;;;;;;;yCAIiBC,U,EAAY;AACzB,eAAK/jB,QAAL,GAAgB+jB,UAAhB;AACH;AACD;;;;;;;2CAImB;AACf;AACA,cAAMC,QAAQ,GAAG,KAAKA,QAAtB;AACA;;AACA,cAAMjsB,MAAM,GAAGgS,KAAK,CAACC,OAAN,CAAcga,QAAd,IAA0BA,QAAQ,CAACA,QAAQ,CAACpkB,MAAT,GAAkB,CAAnB,CAAlC,GAA0DokB,QAAzE;AACA;;AACA,cAAM1nB,KAAK,GAAG,IAAIwmB,qBAAJ;AAA2B;AAAkB/qB,gBAA7C,EAAuD,KAAKe,KAA5D,CAAd;;AACA,eAAKqqB,6BAAL,CAAmC7mB,KAAK,CAACxD,KAAzC;;AACA,eAAKgL,MAAL,CAAYua,IAAZ,CAAiB/hB,KAAjB;AACH;AACD;;;;;;;;;;;0CAQkBsnB,M,EAAQF,M,EAAkD;AAAA;;AAAA,cAA1CO,WAA0C,uEAA5B,KAA4B;AAAA,cAArBC,WAAqB,uEAAP,KAAO;;AACxE;AACA;AACA,cAAI,CAAC,KAAKT,QAAN,IAAkB,KAAKO,QAAvB,IAAmC,CAACJ,MAAM,CAACC,OAA/C,EAAwD;AAClD;AAAkB,iBAAKG,QAAzB,CAAqCH,OAArC,GAA+C,KAA/C;AACH;;AACD,cAAI,KAAKL,eAAT,EAA0B;AACtB,gBAAIE,MAAJ,EAAY;AACR,mBAAKF,eAAL,CAAqBE,MAArB,CAA4BE,MAA5B;AACH,aAFD,MAGK;AACD,mBAAKJ,eAAL,CAAqBW,QAArB,CAA8BP,MAA9B;AACH;AACJ,WAPD,MAQK;AACDM,uBAAW,GAAG,IAAd;AACH,WAhBuE,CAiBxE;AACA;AACA;;;AACA,cAAIA,WAAJ,EAAiB;AACbha,mBAAO,CAACC,OAAR,GAAkB/E,IAAlB;AAAwB;;;AAGxB;AAAA,qBAAM,OAAI,CAACgf,iBAAL,CAAuBH,WAAvB,CAAN;AAAA,aAHA;AAIH,WALD,MAMK;AACD,iBAAKG,iBAAL,CAAuBH,WAAvB;AACH;AACJ;AACD;;;;;;;;oCAKYL,M,EAAQ;AAChB,iBAAO,KAAKJ,eAAL,IAAwB,KAAKA,eAAL,CAAqBa,UAArB,CAAgCT,MAAhC,CAA/B;AACH;AACD;;;;;;;;sCAKcA,M,EAAQ;AAClB,cAAI,OAAO,KAAKU,SAAZ,KAA0B,WAA9B,EAA2C;AACvC,mBAAO,KAAP;AACH;;AACD,cAAI,KAAKb,QAAL,IAAiB1Z,KAAK,CAACC,OAAN,CAAc,KAAKsa,SAAnB,CAArB,EAAoD;AAChD,mBAAO,KAAKA,SAAL,CAAeC,IAAf;AAAqB;;;;AAI5B,sBAAAzrB,KAAK;AAAA,qBAAI8qB,MAAM,CAAC9qB,KAAP,IAAgB,IAAhB,IAAwBA,KAAK,KAAK8qB,MAAM,CAAC9qB,KAA7C;AAAA,aAJE,CAAP;AAKH;;AACD,iBAAO8qB,MAAM,CAAC9qB,KAAP,KAAiB,KAAKwrB,SAA7B;AACH;AACD;;;;;;;;;6CAMqBxrB,K,EAAO;AAAA;;AACxB,eAAKwrB,SAAL,GAAiBxrB,KAAjB;;AACA,cAAI,CAAC,KAAK6qB,cAAV,EAA0B;AACtB;AACH;;AACD,cAAI,KAAKF,QAAL,IAAiB3qB,KAArB,EAA4B;AACxB,gBAAI,CAACiR,KAAK,CAACC,OAAN,CAAclR,KAAd,CAAL,EAA2B;AACvB,oBAAM6kB,KAAK,CAAC,oDAAD,CAAX;AACH;;AACD,iBAAK6G,eAAL;;AACA1rB,iBAAK,CAACqD,OAAN;AAAe;;;;AAIf,sBAACsoB,YAAD;AAAA,qBAAkB,OAAI,CAACC,YAAL,CAAkBD,YAAlB,CAAlB;AAAA,aAJA;AAKH,WAVD,MAWK;AACD,iBAAKD,eAAL;;AACA,iBAAKE,YAAL,CAAkB5rB,KAAlB;AACH;AACJ;AACD;;;;;;;;0CAKkB;AACd,eAAK0qB,eAAL,CAAqB1nB,KAArB;;AACA,eAAK6nB,cAAL,CAAoBxnB,OAApB;AAA6B;;;;AAI7B,oBAAAynB,MAAM;AAAA,mBAAIA,MAAM,CAACC,OAAP,GAAiB,KAArB;AAAA,WAJN;AAKH;AACD;;;;;;;;;qCAMa/qB,K,EAAO;AAChB;AACA,cAAM6rB,mBAAmB,GAAG,KAAKhB,cAAL,CAAoBlqB,IAApB;AAA0B;;;;AAItD,oBAAAmqB,MAAM,EAAI;AACN,mBAAOA,MAAM,CAAC9qB,KAAP,IAAgB,IAAhB,IAAwB8qB,MAAM,CAAC9qB,KAAP,KAAiBA,KAAhD;AACH,WAN2B,CAA5B;;AAOA,cAAI6rB,mBAAJ,EAAyB;AACrBA,+BAAmB,CAACd,OAApB,GAA8B,IAA9B;;AACA,iBAAKL,eAAL,CAAqBE,MAArB,CAA4BiB,mBAA5B;AACH;AACJ;AACD;;;;;;;;;0CAMkBV,W,EAAa;AAC3B;AACA,cAAIA,WAAJ,EAAiB;AACb,iBAAKW,gBAAL;AACH,WAJ0B,CAK3B;AACA;;;AACA,eAAKtB,WAAL,CAAiBjF,IAAjB,CAAsB,KAAKvlB,KAA3B;AACH;;;4BAvSU;AAAE,iBAAO,KAAKuqB,KAAZ;AAAoB;AACjC;;;;;0BAISvqB,K,EAAO;AAAA;;AACZ,eAAKuqB,KAAL,GAAavqB,KAAb;;AACA,cAAI,KAAK6qB,cAAT,EAAyB;AACrB,iBAAKA,cAAL,CAAoBxnB,OAApB;AAA6B;;;;AAI7B,sBAAAynB,MAAM,EAAI;AACNA,oBAAM,CAAC9pB,IAAP,GAAc,OAAI,CAACupB,KAAnB;;AACAO,oBAAM,CAACiB,aAAP;AACH,aAPD;AAQH;AACJ;AACD;;;;;;;4BAIe;AAAE,iBAAO,KAAK5B,SAAZ;AAAwB;AACzC;;;;;0BAIanqB,K,EAAO;AAChB,eAAKmqB,SAAL,GAAiB,oFAAsBnqB,KAAtB,CAAjB;AACH;AACD;;;;;;;4BAIY;AACR;AACA,cAAMkrB,QAAQ,GAAG,KAAKR,eAAL,GAAuB,KAAKA,eAAL,CAAqBQ,QAA5C,GAAuD,EAAxE;;AACA,cAAI,KAAKP,QAAT,EAAmB;AACf,mBAAOO,QAAQ,CAAC/pB,GAAT;AAAc;;;;AAIrB,sBAAA2pB,MAAM;AAAA,qBAAIA,MAAM,CAAC9qB,KAAX;AAAA,aAJC,CAAP;AAKH;;AACD,iBAAOkrB,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAAR,CAAYlrB,KAA1B,GAAkC6K,SAAzC;AACH;AACD;;;;;0BAIU2J,Q,EAAU;AAChB,eAAKwX,oBAAL,CAA0BxX,QAA1B;;AACA,eAAKgW,WAAL,CAAiBjF,IAAjB,CAAsB,KAAKvlB,KAA3B;AACH;AACD;;;;;;;4BAIe;AACX;AACA,cAAMkrB,QAAQ,GAAG,KAAKR,eAAL,GAAuB,KAAKA,eAAL,CAAqBQ,QAA5C,GAAuD,EAAxE;AACA,iBAAO,KAAKP,QAAL,GAAgBO,QAAhB,GAA4BA,QAAQ,CAAC,CAAD,CAAR,IAAe,IAAlD;AACH;AACD;;;;;;;4BAIe;AAAE,iBAAO,KAAKd,SAAZ;AAAwB;AACzC;;;;;0BAIapqB,K,EAAO;AAChB,eAAKoqB,SAAL,GAAiB,oFAAsBpqB,KAAtB,CAAjB;AACH;AACD;;;;;;;4BAIe;AAAE,iBAAO,KAAKkG,SAAZ;AAAwB;AACzC;;;;;0BAIalG,K,EAAO;AAChB,eAAKkG,SAAL,GAAiB,oFAAsBlG,KAAtB,CAAjB;;AACA,cAAI,KAAK6qB,cAAT,EAAyB;AACrB,iBAAKA,cAAL,CAAoBxnB,OAApB;AAA6B;;;;AAI7B,sBAAAynB,MAAM;AAAA,qBAAIA,MAAM,CAACiB,aAAP,EAAJ;AAAA,aAJN;AAKH;AACJ;;;;;;AA4MLlC,wBAAoB,CAAChK,IAArB,GAA4B,SAASoM,4BAAT,CAAsClM,CAAtC,EAAyC;AAAE,aAAO,KAAKA,CAAC,IAAI8J,oBAAV,EAAgC,gEAAyB,+DAAzB,CAAhC,EAAoF,gEAAyBF,iCAAzB,EAA4D,CAA5D,CAApF,CAAP;AAA6J,KAApO;;AACAE,wBAAoB,CAACrI,IAArB,GAA4B,gEAAyB;AAAEjT,UAAI,EAAEsb,oBAAR;AAA8BpI,eAAS,EAAE,CAAC,CAAC,yBAAD,CAAD,CAAzC;AAAwEkE,oBAAc,EAAE,SAASuG,mCAAT,CAA6CrG,EAA7C,EAAiDC,GAAjD,EAAsDC,QAAtD,EAAgE;AAAE,YAAIF,EAAE,GAAG,CAAT,EAAY;AACnN,uEAAsBE,QAAtB,EAAgCoG,eAAhC,EAAiD,IAAjD;AACH;;AAAC,YAAItG,EAAE,GAAG,CAAT,EAAY;AACV,cAAIG,EAAJ;;AACA,uEAAsBA,EAAE,GAAG,2DAA3B,MAAqDF,GAAG,CAAC+E,cAAJ,GAAqB7E,EAA1E;AACH;AAAE,OAL8C;AAK5CtE,eAAS,EAAE,CAAC,MAAD,EAAS,OAAT,EAAkB,CAAlB,EAAqB,yBAArB,CALiC;AAKgBwE,cAAQ,EAAE,CAL1B;AAK6BC,kBAAY,EAAE,SAASiG,iCAAT,CAA2CvG,EAA3C,EAA+CC,GAA/C,EAAoD;AAAE,YAAID,EAAE,GAAG,CAAT,EAAY;AAC1J,oEAAmB,eAAnB,EAAoCC,GAAG,CAAC5e,QAAxC;;AACA,oEAAmB,4BAAnB,EAAiD4e,GAAG,CAACuG,QAArD,EAA+D,6CAA/D,EAA8GvG,GAAG,CAAC2E,UAAJ,KAAmB,UAAjI;AACH;AAAE,OAR8C;AAQ5C9I,YAAM,EAAE;AAAE8I,kBAAU,EAAE,YAAd;AAA4BzpB,YAAI,EAAE,MAAlC;AAA0CqrB,gBAAQ,EAAE,UAApD;AAAgErsB,aAAK,EAAE,OAAvE;AAAgF2qB,gBAAQ,EAAE,UAA1F;AAAsGzjB,gBAAQ,EAAE;AAAhH,OARoC;AAQ0Fmf,aAAO,EAAE;AAAEmE,mBAAW,EAAE,aAAf;AAA8Bxf,cAAM,EAAE;AAAtC,OARnG;AAQqJsb,cAAQ,EAAE,CAAC,sBAAD,CAR/J;AAQyLC,cAAQ,EAAE,CAAC,iEAA0B,CACvQqD,sCADuQ,EAEvQ;AAAEpD,eAAO,EAAEuD,4BAAX;AAAyCtD,mBAAW,EAAEoD;AAAtD,OAFuQ,CAA1B,CAAD;AARnM,KAAzB,CAA5B;AAYA;;AACAA,wBAAoB,CAAC7J,cAArB,GAAsC;AAAA,aAAM,CACxC;AAAEzR,YAAI,EAAE;AAAR,OADwC,EAExC;AAAEA,YAAI,EAAE1D,SAAR;AAAmBoV,kBAAU,EAAE,CAAC;AAAE1R,cAAI,EAAE;AAAR,SAAD,EAAqB;AAAEA,cAAI,EAAE,oDAAR;AAAgB2R,cAAI,EAAE,CAACyJ,iCAAD;AAAtB,SAArB;AAA/B,OAFwC,CAAN;AAAA,KAAtC;;AAIAE,wBAAoB,CAACjI,cAArB,GAAsC;AAClCiJ,oBAAc,EAAE,CAAC;AAAEtc,YAAI,EAAE,6DAAR;AAAyB2R,YAAI,EAAE,CAAC;AAAY;;;AAGjD;AAAA,iBAAMiM,eAAN;AAAA,SAHqC,CAAD,EAGX;AACrB;AACA;AACAzF,qBAAW,EAAE;AAHQ,SAHW;AAA/B,OAAD,CADkB;AASlC+D,gBAAU,EAAE,CAAC;AAAElc,YAAI,EAAE;AAAR,OAAD,CATsB;AAUlCvN,UAAI,EAAE,CAAC;AAAEuN,YAAI,EAAE;AAAR,OAAD,CAV4B;AAWlC8d,cAAQ,EAAE,CAAC;AAAE9d,YAAI,EAAE;AAAR,OAAD,CAXwB;AAYlCvO,WAAK,EAAE,CAAC;AAAEuO,YAAI,EAAE;AAAR,OAAD,CAZ2B;AAalCic,iBAAW,EAAE,CAAC;AAAEjc,YAAI,EAAE;AAAR,OAAD,CAbqB;AAclCoc,cAAQ,EAAE,CAAC;AAAEpc,YAAI,EAAE;AAAR,OAAD,CAdwB;AAelCrH,cAAQ,EAAE,CAAC;AAAEqH,YAAI,EAAE;AAAR,OAAD,CAfwB;AAgBlCvD,YAAM,EAAE,CAAC;AAAEuD,YAAI,EAAE;AAAR,OAAD;AAhB0B,KAAtC;AAkBA;;AAAc,KAAC,YAAY;AAAE,sEAAyBsb,oBAAzB,EAA+C,CAAC;AACrEtb,YAAI,EAAE,uDAD+D;AAErE2R,YAAI,EAAE,CAAC;AACC2B,kBAAQ,EAAE,yBADX;AAEC8E,mBAAS,EAAE,CACPiD,sCADO,EAEP;AAAEpD,mBAAO,EAAEuD,4BAAX;AAAyCtD,uBAAW,EAAEoD;AAAtD,WAFO,CAFZ;AAMC/H,cAAI,EAAE;AACF,oBAAQ,OADN;AAEF,qBAAS,yBAFP;AAGF,oCAAwB,UAHtB;AAIF,kDAAsC,UAJpC;AAKF,mEAAuD;AALrD,WANP;AAaCwE,kBAAQ,EAAE;AAbX,SAAD;AAF+D,OAAD,CAA/C,EAiBrB,YAAY;AAAE,eAAO,CAAC;AAAE/X,cAAI,EAAE;AAAR,SAAD,EAAqC;AAAEA,cAAI,EAAE1D,SAAR;AAAmBoV,oBAAU,EAAE,CAAC;AAClF1R,gBAAI,EAAE;AAD4E,WAAD,EAElF;AACCA,gBAAI,EAAE,oDADP;AAEC2R,gBAAI,EAAE,CAACyJ,iCAAD;AAFP,WAFkF;AAA/B,SAArC,CAAP;AAKF,OAtBS,EAsBP;AAAEa,mBAAW,EAAE,CAAC;AAC1Bjc,cAAI,EAAE;AADoB,SAAD,CAAf;AAEVvD,cAAM,EAAE,CAAC;AACTuD,cAAI,EAAE;AADG,SAAD,CAFE;AAIVkc,kBAAU,EAAE,CAAC;AACblc,cAAI,EAAE;AADO,SAAD,CAJF;AAMVvN,YAAI,EAAE,CAAC;AACPuN,cAAI,EAAE;AADC,SAAD,CANI;AAQV8d,gBAAQ,EAAE,CAAC;AACX9d,cAAI,EAAE;AADK,SAAD,CARA;AAUVvO,aAAK,EAAE,CAAC;AACRuO,cAAI,EAAE;AADE,SAAD,CAVG;AAYVoc,gBAAQ,EAAE,CAAC;AACXpc,cAAI,EAAE;AADK,SAAD,CAZA;AAcVrH,gBAAQ,EAAE,CAAC;AACXqH,cAAI,EAAE;AADK,SAAD,CAdA;AAgBVsc,sBAAc,EAAE,CAAC;AACjBtc,cAAI,EAAE,6DADW;AAEjB2R,cAAI,EAAE,CAAC;AAAa;;;AAED;AAAA,mBAAMiM,eAAN;AAAA,WAFZ,CAAD,EAEsC;AACpC;AACA;AACAzF,uBAAW,EAAE;AAHuB,WAFtC;AAFW,SAAD;AAhBN,OAtBO;AA+Cb,KA/CF;;AAgDd,QAAI,KAAJ,EAAW,CA+EV,C,CACD;;AACA;;;;;QAGM4F,mB;;;AAEN;;;AACA,QAAMC,yBAAyB,GAAG,kFAAmBD,mBAAnB,CAAlC;AACA;;;;;QAGMH,e;;;;;AACF;;;;;;;;AAQA,+BAAYK,WAAZ,EAAyB1J,kBAAzB,EAA6C2J,WAA7C,EAA0DC,aAA1D,EACA;AACAC,qBAFA,EAEiBzC,cAFjB,EAEiC;AAAA;;AAAA;;AAC7B;AACA,gBAAKpH,kBAAL,GAA0BA,kBAA1B;AACA,gBAAK2J,WAAL,GAAmBA,WAAnB;AACA,gBAAKC,aAAL,GAAqBA,aAArB;AACA,gBAAKE,iBAAL,GAAyB,KAAzB;AACA,gBAAKC,QAAL,GAAgB,KAAhB;AACA;;;;AAGA,gBAAKC,cAAL,GAAsB,IAAtB;AACA,gBAAK5mB,SAAL,GAAiB,KAAjB;AACA;;;;AAGA,gBAAK8E,MAAL,GAAc,IAAI,0DAAJ,EAAd;AACA;;AACA,YAAM+hB,cAAc,GAAGC,MAAM,CAACL,eAAD,CAA7B;AACA,gBAAKM,QAAL,GAAiBF,cAAc,IAAIA,cAAc,KAAK,CAAtC,GAA2CA,cAA3C,GAA4D,IAA5E;AACA,gBAAKG,iBAAL,GAAyBV,WAAzB;AACA,gBAAK/B,UAAL,GACIP,cAAc,IAAIA,cAAc,CAACO,UAAjC,GAA8CP,cAAc,CAACO,UAA7D,GAA0E,UAD9E;AApB6B;AAsBhC;AACD;;;;;;;;;AAqDA;;;mCAGW;AACP;AACA,cAAM0C,KAAK,GAAG,KAAKD,iBAAnB;AACA,eAAKN,iBAAL,GAAyBO,KAAK,IAAI,CAACA,KAAK,CAACxC,QAAzC;AACA,eAAKyC,KAAL,GAAa,KAAKR,iBAAL,GAAyB,OAAzB,GAAmC,UAAhD;AACA,eAAKpF,EAAL,GAAU,KAAKA,EAAL,gCAAgCN,gBAAgB,EAAhD,CAAV;;AACA,cAAI,KAAK0F,iBAAT,EAA4B;AACxB,iBAAK5rB,IAAL,GAAYmsB,KAAK,CAACnsB,IAAlB;AACH;;AACD,cAAImsB,KAAJ,EAAW;AACP,gBAAIA,KAAK,CAACE,aAAN,CAAoB,IAApB,CAAJ,EAA+B;AAC3B,mBAAKtC,OAAL,GAAe,IAAf;AACH,aAFD,MAGK,IAAIoC,KAAK,CAACG,WAAN,CAAkB,IAAlB,MAA4B,KAAKT,QAArC,EAA+C;AAChD;AACA;AACA;AACA;AACAM,mBAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKV,QAAnC;AACH;AACJ;;AACD,eAAKH,aAAL,CAAmBc,OAAnB,CAA2B,KAAKf,WAAhC,EAA6C,IAA7C;AACH;AACD;;;;;;sCAGc;AACV;AACA,cAAMU,KAAK,GAAG,KAAKD,iBAAnB;;AACA,eAAKR,aAAL,CAAmBe,cAAnB,CAAkC,KAAKhB,WAAvC,EAHU,CAIV;AACA;;;AACA,cAAIU,KAAK,IAAIA,KAAK,CAACG,WAAN,CAAkB,IAAlB,CAAb,EAAsC;AAClCH,iBAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAA9B,EAAqC,KAArC,EAA4C,IAA5C;AACH;AACJ;AACD;;;;;;;;8BAKM9N,O,EAAS;AACX,eAAKiO,cAAL,CAAoB3P,aAApB,CAAkC4P,KAAlC,CAAwClO,OAAxC;AACH;AACD;;;;;;;yCAIiB;AACb;AACA,cAAMmO,UAAU,GAAG,KAAKhB,iBAAL,GAAyB,IAAzB,GAAgC,CAAC,KAAKC,QAAzD;;AACA,cAAIe,UAAU,KAAK,KAAKf,QAAxB,EAAkC;AAC9B,iBAAKA,QAAL,GAAgBe,UAAhB;;AACA,gBAAI,KAAKV,iBAAT,EAA4B;AACxB,mBAAKA,iBAAL,CAAuBK,iBAAvB,CAAyC,IAAzC,EAA+C,KAAKV,QAApD,EAA8D,IAA9D;;AACA,mBAAKK,iBAAL,CAAuB5C,UAAvB;AACH;AACJ,WATY,CAUb;;;AACA,eAAKtf,MAAL,CAAYua,IAAZ,CAAiB,IAAIyE,qBAAJ,CAA0B,IAA1B,EAAgC,KAAKhqB,KAArC,CAAjB;AACH;AACD;;;;;;;;;wCAMgB;AACZ;AACA;AACA,eAAK8iB,kBAAL,CAAwB0C,YAAxB;AACH;;;4BA3Hc;AAAE,2BAAU,KAAKgC,EAAf;AAA6B;AAC9C;;;;;;;4BAIiB;AACb,iBAAO,KAAK0F,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBzC,UAAhD,GAA6D,KAAKoD,WAAzE;AACH;AACD;;;;;0BAIe7tB,K,EAAO;AAClB,eAAK6tB,WAAL,GAAmB7tB,KAAnB;AACH;AACD;;;;;;;4BAIc;AACV,iBAAO,KAAKktB,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBI,WAAvB,CAAmC,IAAnC,CAAzB,GAAoE,KAAKT,QAAhF;AACH;AACD;;;;;0BAIY7sB,K,EAAO;AACf;AACA,cAAMwU,QAAQ,GAAG,oFAAsBxU,KAAtB,CAAjB;;AACA,cAAIwU,QAAQ,KAAK,KAAKqY,QAAtB,EAAgC;AAC5B,iBAAKA,QAAL,GAAgBrY,QAAhB;;AACA,gBAAI,KAAK0Y,iBAAT,EAA4B;AACxB,mBAAKA,iBAAL,CAAuBK,iBAAvB,CAAyC,IAAzC,EAA+C,KAAKV,QAApD;AACH;;AACD,iBAAK/J,kBAAL,CAAwB0C,YAAxB;AACH;AACJ;AACD;;;;;;;4BAIe;AACX,iBAAO,KAAKtf,SAAL,IAAmB,KAAKgnB,iBAAL,IAA0B,KAAKA,iBAAL,CAAuBhmB,QAA3E;AACH;AACD;;;;;0BAIalH,K,EAAO;AAAE,eAAKkG,SAAL,GAAiB,oFAAsBlG,KAAtB,CAAjB;AAAgD;;;;MAtF5CusB,yB;;AAmK9BJ,mBAAe,CAACtM,IAAhB,GAAuB,SAASiO,uBAAT,CAAiC/N,CAAjC,EAAoC;AAAE,aAAO,KAAKA,CAAC,IAAIoM,eAAV,EAA2B,gEAAyBtC,oBAAzB,EAA+C,CAA/C,CAA3B,EAA8E,gEAAyB,+DAAzB,CAA9E,EAAkI,gEAAyB,wDAAzB,CAAlI,EAA+K,gEAAyB,8DAAzB,CAA/K,EAA8N,gEAAyB,UAAzB,CAA9N,EAAoQ,gEAAyBF,iCAAzB,EAA4D,CAA5D,CAApQ,CAAP;AAA6U,KAA1Y;;AACAwC,mBAAe,CAAC4B,IAAhB,GAAuB,gEAAyB;AAAExf,UAAI,EAAE4d,eAAR;AAAyB1K,eAAS,EAAE,CAAC,CAAC,mBAAD,CAAD,CAApC;AAA6DuM,eAAS,EAAE,SAASC,qBAAT,CAA+BpI,EAA/B,EAAmCC,GAAnC,EAAwC;AAAE,YAAID,EAAE,GAAG,CAAT,EAAY;AACtK,oEAAmB2D,GAAnB,EAAwB,IAAxB;AACH;;AAAC,YAAI3D,EAAE,GAAG,CAAT,EAAY;AACV,cAAIG,EAAJ;;AACA,uEAAsBA,EAAE,GAAG,2DAA3B,MAAqDF,GAAG,CAAC4H,cAAJ,GAAqB1H,EAAE,CAACC,KAA7E;AACH;AAAE,OALyC;AAKvCvE,eAAS,EAAE,CAAC,CAAD,EAAI,mBAAJ,CAL4B;AAKFwE,cAAQ,EAAE,EALR;AAKYC,kBAAY,EAAE,SAAS+H,4BAAT,CAAsCrI,EAAtC,EAA0CC,GAA1C,EAA+C;AAAE,YAAID,EAAE,GAAG,CAAT,EAAY;AAC/H,mEAAkB,OAAlB,EAA2B,SAASsI,wCAAT,GAAoD;AAAE,mBAAOrI,GAAG,CAAC6H,KAAJ,EAAP;AAAqB,WAAtG;AACH;;AAAC,YAAI9H,EAAE,GAAG,CAAT,EAAY;AACV,oEAAmB,UAAnB,EAA+B,IAAI,CAAnC,EAAsC,IAAtC,EAA4CC,GAAG,CAAC0B,EAAhD,EAAoD,MAApD,EAA4D,IAA5D;;AACA,oEAAmB,8BAAnB,EAAmD,CAAC1B,GAAG,CAACoH,iBAAxD,EAA2E,2BAA3E,EAAwGpH,GAAG,CAACiF,OAA5G,EAAqH,4BAArH,EAAmJjF,GAAG,CAAC5e,QAAvJ,EAAiK,uCAAjK,EAA0M4e,GAAG,CAAC2E,UAAJ,KAAmB,UAA7N;AACH;AAAE,OAVyC;AAUvC9I,YAAM,EAAE;AAAEyM,qBAAa,EAAE,eAAjB;AAAkCtB,sBAAc,EAAE,CAAC,iBAAD,EAAoB,gBAApB,CAAlD;AAAyFG,gBAAQ,EAAE,UAAnG;AAA+GxC,kBAAU,EAAE,YAA3H;AAAyIM,eAAO,EAAE,SAAlJ;AAA6J7jB,gBAAQ,EAAE,UAAvK;AAAmLsgB,UAAE,EAAE,IAAvL;AAA6LxmB,YAAI,EAAE,MAAnM;AAA2MqtB,iBAAS,EAAE,CAAC,YAAD,EAAe,WAAf,CAAtN;AAAmPruB,aAAK,EAAE;AAA1P,OAV+B;AAUsOqmB,aAAO,EAAE;AAAErb,cAAM,EAAE;AAAV,OAV/O;AAUqQsb,cAAQ,EAAE,CAAC,iBAAD,CAV/Q;AAUoSC,cAAQ,EAAE,CAAC,wEAAD,CAV9S;AAUmV+H,wBAAkB,EAAE7E,GAVvW;AAU4W8E,WAAK,EAAE,CAVnX;AAUsXC,UAAI,EAAE,CAV5X;AAU+XC,YAAM,EAAE,CAAC,CAAC,MAAD,EAAS,QAAT,EAAmB,CAAnB,EAAsB,0BAAtB,EAAkD,qBAAlD,EAAyE,CAAzE,EAA4E,IAA5E,EAAkF,UAAlF,EAA8F,OAA9F,CAAD,EAAyG,CAAC,QAAD,EAAW,EAAX,CAAzG,EAAyH,CAAC,CAAD,EAAI,iCAAJ,CAAzH,EAAiK,CAAC,CAAD,EAAI,iCAAJ,CAAjK,EAAyM,CAAC,WAAD,EAAc,EAAd,EAAkB,CAAlB,EAAqB,0BAArB,EAAiD,CAAjD,EAAoD,kBAApD,EAAwE,mBAAxE,CAAzM,CAVvY;AAU+qBpkB,cAAQ,EAAE,SAASqkB,wBAAT,CAAkC7I,EAAlC,EAAsCC,GAAtC,EAA2C;AAAE,YAAID,EAAE,GAAG,CAAT,EAAY;AAC1xB;;AACA,uEAAsB,CAAtB,EAAyB,QAAzB,EAAmC,CAAnC,EAAsC,CAAtC;;AACA,mEAAkB,OAAlB,EAA2B,SAAS8I,gDAAT,GAA4D;AAAE,mBAAO7I,GAAG,CAAC8I,cAAJ,EAAP;AAA8B,WAAvH;;AACA,uEAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC;;AACA,qEAAoB,CAApB;;AACA;;AACA;;AACA,kEAAiB,CAAjB,EAAoB,KAApB,EAA2B,CAA3B;;AACA,kEAAiB,CAAjB,EAAoB,KAApB,EAA2B,CAA3B;AACH;;AAAC,YAAI/I,EAAE,GAAG,CAAT,EAAY;AACV,cAAMgJ,GAAG,GAAG,0DAAmB,CAAnB,CAAZ;;AACA,mEAAkB,IAAlB,EAAwB/I,GAAG,CAACgJ,QAA5B,EAAsC,UAAtC,EAAkDhJ,GAAG,CAAC5e,QAAJ,IAAgB,IAAlE;;AACA,oEAAmB,UAAnB,EAA+B4e,GAAG,CAAC5e,QAAJ,GAAe,IAAI,CAAnB,GAAuB4e,GAAG,CAACmH,QAA1D,EAAoE,cAApE,EAAoFnH,GAAG,CAACiF,OAAxF,EAAiG,MAAjG,EAAyGjF,GAAG,CAAC9kB,IAAJ,IAAY,IAArH,EAA2H,YAA3H,EAAyI8kB,GAAG,CAACuI,SAA7I,EAAwJ,iBAAxJ,EAA2KvI,GAAG,CAACgH,cAA/K;;AACA,kEAAiB,CAAjB;;AACA,mEAAkB,kBAAlB,EAAsC+B,GAAtC,EAA2C,mBAA3C,EAAgE/I,GAAG,CAACsI,aAAJ,IAAqBtI,GAAG,CAAC5e,QAAzF;AACH;AAAE,OA1ByC;AA0BvC6nB,gBAAU,EAAE,CAAC,gEAAD,CA1B2B;AA0BP3V,YAAM,EAAE,CAAC,6wFAAD,CA1BD;AA0BkxF4V,mBAAa,EAAE,CA1BjyF;AA0BoyFC,qBAAe,EAAE;AA1BrzF,KAAzB,CAAvB;AA2BA;;AACA9C,mBAAe,CAACnM,cAAhB,GAAiC;AAAA,aAAM,CACnC;AAAEzR,YAAI,EAAEsb,oBAAR;AAA8B5J,kBAAU,EAAE,CAAC;AAAE1R,cAAI,EAAE;AAAR,SAAD;AAA1C,OADmC,EAEnC;AAAEA,YAAI,EAAE;AAAR,OAFmC,EAGnC;AAAEA,YAAI,EAAE;AAAR,OAHmC,EAInC;AAAEA,YAAI,EAAE;AAAR,OAJmC,EAKnC;AAAEA,YAAI,EAAE2gB,MAAR;AAAgBjP,kBAAU,EAAE,CAAC;AAAE1R,cAAI,EAAE,uDAAR;AAAmB2R,cAAI,EAAE,CAAC,UAAD;AAAzB,SAAD;AAA5B,OALmC,EAMnC;AAAE3R,YAAI,EAAE1D,SAAR;AAAmBoV,kBAAU,EAAE,CAAC;AAAE1R,cAAI,EAAE;AAAR,SAAD,EAAqB;AAAEA,cAAI,EAAE,oDAAR;AAAgB2R,cAAI,EAAE,CAACyJ,iCAAD;AAAtB,SAArB;AAA/B,OANmC,CAAN;AAAA,KAAjC;;AAQAwC,mBAAe,CAACvK,cAAhB,GAAiC;AAC7ByM,eAAS,EAAE,CAAC;AAAE9f,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,YAAD;AAArB,OAAD,CADkB;AAE7B4M,oBAAc,EAAE,CAAC;AAAEve,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,iBAAD;AAArB,OAAD,CAFa;AAG7BwN,oBAAc,EAAE,CAAC;AAAEnf,YAAI,EAAE,uDAAR;AAAmB2R,YAAI,EAAE,CAAC,QAAD;AAAzB,OAAD,CAHa;AAI7BsH,QAAE,EAAE,CAAC;AAAEjZ,YAAI,EAAE;AAAR,OAAD,CAJyB;AAK7BvN,UAAI,EAAE,CAAC;AAAEuN,YAAI,EAAE;AAAR,OAAD,CALuB;AAM7BvO,WAAK,EAAE,CAAC;AAAEuO,YAAI,EAAE;AAAR,OAAD,CANsB;AAO7B0e,cAAQ,EAAE,CAAC;AAAE1e,YAAI,EAAE;AAAR,OAAD,CAPmB;AAQ7Bkc,gBAAU,EAAE,CAAC;AAAElc,YAAI,EAAE;AAAR,OAAD,CARiB;AAS7Bwc,aAAO,EAAE,CAAC;AAAExc,YAAI,EAAE;AAAR,OAAD,CAToB;AAU7BrH,cAAQ,EAAE,CAAC;AAAEqH,YAAI,EAAE;AAAR,OAAD,CAVmB;AAW7BvD,YAAM,EAAE,CAAC;AAAEuD,YAAI,EAAE;AAAR,OAAD;AAXqB,KAAjC;AAaA;;AAAc,KAAC,YAAY;AAAE,sEAAyB4d,eAAzB,EAA0C,CAAC;AAChE5d,YAAI,EAAE,uDAD0D;AAEhE2R,YAAI,EAAE,CAAC;AACC2B,kBAAQ,EAAE,mBADX;AAECxX,kBAAQ,EAAE,ivBAFX;AAGC2kB,uBAAa,EAAE,gEAAkBG,IAHlC;AAIC7I,kBAAQ,EAAE,iBAJX;AAKC2I,yBAAe,EAAE,sEAAwBG,MAL1C;AAMCzN,gBAAM,EAAE,CAAC,eAAD,CANT;AAOCG,cAAI,EAAE;AACF,oDAAwC,oBADtC;AAEF,iDAAqC,SAFnC;AAGF,kDAAsC,UAHpC;AAIF,6DAAiD,2BAJ/C;AAKF,qBAAS,mBALP;AAMF;AACA;AACA,+BAAmB,IARjB;AASF,yBAAa,IATX;AAUF,2BAAe,MAVb;AAWF,uBAAW;AAXT,WAPP;AAoBC1I,gBAAM,EAAE,CAAC,6wFAAD;AApBT,SAAD;AAF0D,OAAD,CAA1C,EAwBrB,YAAY;AAAE,eAAO,CAAC;AAAE7K,cAAI,EAAEsb,oBAAR;AAA8B5J,oBAAU,EAAE,CAAC;AACzD1R,gBAAI,EAAE;AADmD,WAAD;AAA1C,SAAD,EAEX;AAAEA,cAAI,EAAE;AAAR,SAFW,EAEyB;AAAEA,cAAI,EAAE;AAAR,SAFzB,EAEsD;AAAEA,cAAI,EAAE;AAAR,SAFtD,EAEqF;AAAEA,cAAI,EAAE2gB,MAAR;AAAgBjP,oBAAU,EAAE,CAAC;AAC/H1R,gBAAI,EAAE,uDADyH;AAE/H2R,gBAAI,EAAE,CAAC,UAAD;AAFyH,WAAD;AAA5B,SAFrF,EAKX;AAAE3R,cAAI,EAAE1D,SAAR;AAAmBoV,oBAAU,EAAE,CAAC;AAClC1R,gBAAI,EAAE;AAD4B,WAAD,EAElC;AACCA,gBAAI,EAAE,oDADP;AAEC2R,gBAAI,EAAE,CAACyJ,iCAAD;AAFP,WAFkC;AAA/B,SALW,CAAP;AAUF,OAlCS,EAkCP;AAAEmD,sBAAc,EAAE,CAAC;AAC7Bve,cAAI,EAAE,mDADuB;AAE7B2R,cAAI,EAAE,CAAC,iBAAD;AAFuB,SAAD,CAAlB;AAGVlV,cAAM,EAAE,CAAC;AACTuD,cAAI,EAAE;AADG,SAAD,CAHE;AAKV0e,gBAAQ,EAAE,CAAC;AACX1e,cAAI,EAAE;AADK,SAAD,CALA;AAOVkc,kBAAU,EAAE,CAAC;AACblc,cAAI,EAAE;AADO,SAAD,CAPF;AASVwc,eAAO,EAAE,CAAC;AACVxc,cAAI,EAAE;AADI,SAAD,CATC;AAWVrH,gBAAQ,EAAE,CAAC;AACXqH,cAAI,EAAE;AADK,SAAD,CAXA;AAaViZ,UAAE,EAAE,CAAC;AACLjZ,cAAI,EAAE;AADD,SAAD,CAbM;AAeVvN,YAAI,EAAE,CAAC;AACPuN,cAAI,EAAE;AADC,SAAD,CAfI;AAiBV8f,iBAAS,EAAE,CAAC;AACZ9f,cAAI,EAAE,mDADM;AAEZ2R,cAAI,EAAE,CAAC,YAAD;AAFM,SAAD,CAjBD;AAoBVwN,sBAAc,EAAE,CAAC;AACjBnf,cAAI,EAAE,uDADW;AAEjB2R,cAAI,EAAE,CAAC,QAAD;AAFW,SAAD,CApBN;AAuBVlgB,aAAK,EAAE,CAAC;AACRuO,cAAI,EAAE;AADE,SAAD;AAvBG,OAlCO;AA2Db,KA3DF;;AA4Dd,QAAI,KAAJ,EAAW,CA8FV;AAED;;;;;;;QAKM8gB,qB;;;;AAENA,yBAAqB,CAACpG,IAAtB,GAA6B,+DAAwB;AAAE1a,UAAI,EAAE8gB;AAAR,KAAxB,CAA7B;AACAA,yBAAqB,CAACnG,IAAtB,GAA6B,+DAAwB;AAAE9I,aAAO,EAAE,SAASkP,6BAAT,CAAuCvP,CAAvC,EAA0C;AAAE,eAAO,KAAKA,CAAC,IAAIsP,qBAAV,GAAP;AAA4C,OAAnG;AAAqGjG,aAAO,EAAE,CAAC,CAAC,sEAAD,EAAkB,sEAAlB,CAAD,EAC3J,sEAD2J;AAA9G,KAAxB,CAA7B;;AAEA,KAAC,YAAY;AAAE,OAAC,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD,iEAA0BgG,qBAA1B,EAAiD;AAAE/F,oBAAY,EAAE,wBAAY;AAAE,iBAAO,CAACO,oBAAD,EAChJsC,eADgJ,CAAP;AACtH,SADwF;AACtF/C,eAAO,EAAE,mBAAY;AAAE,iBAAO,CAAC,sEAAD,EAAkB,sEAAlB,CAAP;AAA4C,SADmB;AACjBG,eAAO,EAAE,mBAAY;AAAE,iBAAO,CAAC,sEAAD,EACxHM,oBADwH,EAExHsC,eAFwH,CAAP;AAE9F;AAHwF,OAAjD,CAAnD;AAGkB,KAHjC;AAIA;;;AAAc,KAAC,YAAY;AAAE,sEAAyBkD,qBAAzB,EAAgD,CAAC;AACtE9gB,YAAI,EAAE,sDADgE;AAEtE2R,YAAI,EAAE,CAAC;AACCkJ,iBAAO,EAAE,CAAC,sEAAD,EAAkB,sEAAlB,CADV;AAECG,iBAAO,EAAE,CAAC,sEAAD,EAAkBM,oBAAlB,EAAwCsC,eAAxC,CAFV;AAGC7C,sBAAY,EAAE,CAACO,oBAAD,EAAuBsC,eAAvB;AAHf,SAAD;AAFgE,OAAD,CAAhD,EAOrB,IAPqB,EAOf,IAPe;AAOP,KAPR;AASd;;;;;;AAMA;;;AAMA;;;;;;;;;;;;;;;;;;AC3+BA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAYA;;;;;;AAKA;;;;;;;;AAOA;;;;;;AAUA,aAASoD,yCAAT,CAAmD1J,EAAnD,EAAuDC,GAAvD,EAA4D,CAAG;;AAC/D,aAAS0J,cAAT,GAA0B,CAAG;;AAC7B,QAAI,KAAJ,EAAW,CAqBV;AACD;;;;;;QAIMC,e,GACF,2BAAc;AAAA;;AACV;;;AAGA,WAAKC,IAAL,GAAY,QAAZ;AACA;;;;AAGA,WAAKC,UAAL,GAAkB,EAAlB;AACA;;;;AAGA,WAAKC,WAAL,GAAmB,IAAnB;AACA;;;;AAGA,WAAKC,aAAL,GAAqB,EAArB;AACA;;;;AAGA,WAAKC,YAAL,GAAoB,KAApB;AACA;;;;AAGA,WAAKjuB,KAAL,GAAa,EAAb;AACA;;;;AAGA,WAAKC,MAAL,GAAc,EAAd;AACA;;;;AAGA,WAAKiuB,QAAL,GAAgB,MAAhB;AACA;;;;AAGA,WAAK7N,IAAL,GAAY,IAAZ;AACA;;;;AAGA,WAAK8N,eAAL,GAAuB,IAAvB;AACA;;;;AAGA,WAAKC,cAAL,GAAsB,IAAtB;AACA;;;;AAGA,WAAK5B,SAAL,GAAiB,IAAjB;AACA;;;;AAGA,WAAK6B,SAAL,GAAiB,IAAjB;AACA;;;;;AAIA,WAAKC,YAAL,GAAoB,IAApB;AACA;;;;;;AAKA,WAAKC,iBAAL,GAAyB,IAAzB,CA/DU,CAgEV;AACH,K;;AAEL,QAAI,KAAJ,EAAW,CA+HV;AAED;;;;;;AAKA;;;;;;;AAKA,QAAMC,mBAAmB,GAAG;AACxB;;;AAGAC,qBAAe,EAAE,oEAAQ,iBAAR,EAA2B,CACxC;AACA;AACA;AACA,wEAAM,YAAN,EAAoB,kEAAM;AAAEC,eAAO,EAAE,CAAX;AAAc7kB,iBAAS,EAAE;AAAzB,OAAN,CAApB,CAJwC,EAKxC,kEAAM,OAAN,EAAe,kEAAM;AAAEA,iBAAS,EAAE;AAAb,OAAN,CAAf,CALwC,EAMxC,uEAAW,YAAX,EAAyB,oEAAQ,kCAAR,EAA4C,kEAAM;AAAEA,iBAAS,EAAE,MAAb;AAAqB6kB,eAAO,EAAE;AAA9B,OAAN,CAA5C,CAAzB,CANwC,EAOxC,uEAAW,sBAAX,EAAmC,oEAAQ,qCAAR,EAA+C,kEAAM;AAAEA,eAAO,EAAE;AAAX,OAAN,CAA/C,CAAnC,CAPwC,CAA3B;AAJO,KAA5B;AAeA;;;;;;AAKA;;;;;;;AAMA,aAASC,yCAAT,GAAqD;AACjD,YAAM3L,KAAK,CAAC,uEAAD,CAAX;AACH;AACD;;;;;;;QAKM4L,kB;;;;;AACF;;;;;;;AAOA,kCAAYhE,WAAZ,EAAyBiE,iBAAzB,EAA4C5N,kBAA5C,EAAgElgB,SAAhE,EAA2EoC,OAA3E,EAAoF;AAAA;;AAAA;;AAChF;AACA,gBAAKynB,WAAL,GAAmBA,WAAnB;AACA,gBAAKiE,iBAAL,GAAyBA,iBAAzB;AACA,gBAAK5N,kBAAL,GAA0BA,kBAA1B;AACA,gBAAK9d,OAAL,GAAeA,OAAf;AACA;;;;AAGA,gBAAK2rB,oCAAL,GAA4C,IAA5C;AACA;;;;AAGA,gBAAKC,MAAL,GAAc,OAAd;AACA;;;;AAGA,gBAAKC,sBAAL,GAA8B,IAAI,0DAAJ,EAA9B;AACA;;;;;;;AAMA,gBAAKC,eAAL;AAAwB;;;;AAIxB,kBAACC,MAAD,EAAY;AACR,cAAI,QAAKC,aAAL,CAAmBC,WAAnB,EAAJ,EAAsC;AAClCT,qDAAyC;AAC5C;;AACD,kBAAKU,6BAAL;;AACA,iBAAO,QAAKF,aAAL,CAAmBF,eAAnB,CAAmCC,MAAnC,CAAP;AACH,SAVD;;AAWA,gBAAKI,eAAL,GAAuBnsB,OAAO,CAACirB,cAAR,IAA0B,IAAjD;AACA,gBAAKrtB,SAAL,GAAiBA,SAAjB;AApCgF;AAqCnF;AACD;;;;;;;;;;8CAMsBmuB,M,EAAQ;AAC1B,cAAI,KAAKC,aAAL,CAAmBC,WAAnB,EAAJ,EAAsC;AAClCT,qDAAyC;AAC5C;;AACD,eAAKU,6BAAL;;AACA,iBAAO,KAAKF,aAAL,CAAmBI,qBAAnB,CAAyCL,MAAzC,CAAP;AACH;AACD;;;;;;;;;6CAMqBA,M,EAAQ;AACzB,cAAI,KAAKC,aAAL,CAAmBC,WAAnB,EAAJ,EAAsC;AAClCT,qDAAyC;AAC5C;;AACD,eAAKU,6BAAL;;AACA,iBAAO,KAAKF,aAAL,CAAmBK,oBAAnB,CAAwCN,MAAxC,CAAP;AACH;AACD;;;;;;;0CAIkB;AACd,cAAI,CAAC,KAAKO,cAAL,EAAL,EAA4B;AACxB;AACA,gBAAMC,eAAe,GAAG,KAAKC,aAAL,GAAqBC,mBAArB,EAAxB;;AACA,gBAAI,CAACF,eAAL,EAAsB;AAClB,mBAAK9E,WAAL,CAAiB1O,aAAjB,CAA+B4P,KAA/B;AACH;AACJ;AACJ;AACD;;;;;;;;qCAKa;AACT;AACA;AACA;AACA,cAAI,KAAK3oB,OAAL,CAAakrB,SAAjB,EAA4B;AACxB,iBAAKsB,aAAL,GAAqBE,4BAArB;AACH,WAFD,MAGK,IAAI,CAAC,KAAKJ,cAAL,EAAL,EAA4B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAK7E,WAAL,CAAiB1O,aAAjB,CAA+B4P,KAA/B;AACH;AACJ;AACD;;;;;;;;wCAKgB;AACZ;AACA,cAAMgE,OAAO,GAAG,KAAKhB,oCAArB,CAFY,CAGZ;;AACA,cAAI,KAAK3rB,OAAL,CAAamrB,YAAb,IAA6BwB,OAA7B,IAAwC,OAAOA,OAAO,CAAChE,KAAf,KAAyB,UAArE,EAAiF;AAC7E;AACA,gBAAMiE,aAAa,GAAG,KAAKhvB,SAAL,CAAegvB,aAArC;AACA;;AACA,gBAAMvyB,OAAO,GAAG,KAAKotB,WAAL,CAAiB1O,aAAjC,CAJ6E,CAK7E;AACA;AACA;AACA;;AACA,gBAAI,CAAC6T,aAAD,IAAkBA,aAAa,KAAK,KAAKhvB,SAAL,CAAe0K,IAAnD,IAA2DskB,aAAa,KAAKvyB,OAA7E,IACAA,OAAO,CAACgF,QAAR,CAAiButB,aAAjB,CADJ,EACqC;AACjCD,qBAAO,CAAChE,KAAR;AACH;AACJ;;AACD,cAAI,KAAKkE,UAAT,EAAqB;AACjB,iBAAKA,UAAL,CAAgB7lB,OAAhB;AACH;AACJ;AACD;;;;;;;;wDAKgC;AAAA;;AAC5B,cAAI,KAAKpJ,SAAT,EAAoB;AAChB,iBAAK+tB,oCAAL;AAA6C;AAAkB,iBAAK/tB,SAAL,CAAegvB,aAA9E,CADgB,CAEhB;;AACA,gBAAI,KAAKnF,WAAL,CAAiB1O,aAAjB,CAA+B4P,KAAnC,EAA0C;AACtC;AACA;AACA;AACAvc,qBAAO,CAACC,OAAR,GAAkB/E,IAAlB;AAAwB;;;AAGxB;AAAA,uBAAM,OAAI,CAACmgB,WAAL,CAAiB1O,aAAjB,CAA+B4P,KAA/B,EAAN;AAAA,eAHA;AAIH;AACJ;AACJ;AACD;;;;;;;;yCAKiB;AACb;AACA,cAAMtuB,OAAO,GAAG,KAAKotB,WAAL,CAAiB1O,aAAjC;AACA;;AACA,cAAM6T,aAAa,GAAG,KAAKhvB,SAAL,CAAegvB,aAArC;AACA,iBAAOvyB,OAAO,KAAKuyB,aAAZ,IAA6BvyB,OAAO,CAACgF,QAAR,CAAiButB,aAAjB,CAApC;AACH;AACD;;;;;;;;wCAKgB;AACZ,cAAI,CAAC,KAAKC,UAAV,EAAsB;AAClB,iBAAKA,UAAL,GAAkB,KAAKnB,iBAAL,CAAuBoB,MAAvB,CAA8B,KAAKrF,WAAL,CAAiB1O,aAA/C,CAAlB;AACH;;AACD,iBAAO,KAAK8T,UAAZ;AACH;AACD;;;;;;;;yCAKiBruB,K,EAAO;AACpB,cAAIA,KAAK,CAACuuB,OAAN,KAAkB,OAAtB,EAA+B;AAC3B,iBAAKC,UAAL;AACH,WAFD,MAGK,IAAIxuB,KAAK,CAACuuB,OAAN,KAAkB,MAAtB,EAA8B;AAC/B,iBAAKE,aAAL;AACH;;AACD,eAAKpB,sBAAL,CAA4BtL,IAA5B,CAAiC/hB,KAAjC;AACH;AACD;;;;;;;;0CAKkBA,K,EAAO;AACrB,eAAKqtB,sBAAL,CAA4BtL,IAA5B,CAAiC/hB,KAAjC;AACH;AACD;;;;;;;8CAIsB;AAClB,eAAKotB,MAAL,GAAc,MAAd,CADkB,CAElB;AACA;;AACA,eAAK9N,kBAAL,CAAwB0C,YAAxB;AACH;;;;MA/M4B,oE;;AAiNjCiL,sBAAkB,CAAC5Q,IAAnB,GAA0B,SAASqS,0BAAT,CAAoCnS,CAApC,EAAuC;AAAE,aAAO,KAAKA,CAAC,IAAI0Q,kBAAV,EAA8B,gEAAyB,wDAAzB,CAA9B,EAA2E,gEAAyB,kEAAzB,CAA3E,EAA8H,gEAAyB,+DAAzB,CAA9H,EAAkL,gEAAyB,wDAAzB,EAAmC,CAAnC,CAAlL,EAAyN,gEAAyBhB,eAAzB,CAAzN,CAAP;AAA6Q,KAAhV;;AACAgB,sBAAkB,CAAC1C,IAAnB,GAA0B,gEAAyB;AAAExf,UAAI,EAAEkiB,kBAAR;AAA4BhP,eAAS,EAAE,CAAC,CAAC,sBAAD,CAAD,CAAvC;AAAmEuM,eAAS,EAAE,SAASmE,wBAAT,CAAkCtM,EAAlC,EAAsCC,GAAtC,EAA2C;AAAE,YAAID,EAAE,GAAG,CAAT,EAAY;AAClL,0EAAyB,mEAAzB,EAA0C,IAA1C;AACH;;AAAC,YAAIA,EAAE,GAAG,CAAT,EAAY;AACV,cAAIG,EAAJ;;AACA,uEAAsBA,EAAE,GAAG,2DAA3B,MAAqDF,GAAG,CAACkL,aAAJ,GAAoBhL,EAAE,CAACC,KAA5E;AACH;AAAE,OAL4C;AAK1CvE,eAAS,EAAE,CAAC,UAAD,EAAa,IAAb,EAAmB,YAAnB,EAAiC,MAAjC,EAAyC,CAAzC,EAA4C,sBAA5C,CAL+B;AAKsCwE,cAAQ,EAAE,CALhD;AAKmDC,kBAAY,EAAE,SAASiM,+BAAT,CAAyCvM,EAAzC,EAA6CC,GAA7C,EAAkD;AAAE,YAAID,EAAE,GAAG,CAAT,EAAY;AAC5K,yFAAwC,wBAAxC,EAAkE,SAASwM,qEAAT,CAA+EC,MAA/E,EAAuF;AAAE,mBAAOxM,GAAG,CAACyM,iBAAJ,CAAsBD,MAAtB,CAAP;AAAuC,WAAlM,EAAoM,uBAApM,EAA6N,SAASE,oEAAT,CAA8EF,MAA9E,EAAsF;AAAE,mBAAOxM,GAAG,CAAC2M,gBAAJ,CAAqBH,MAArB,CAAP;AAAsC,WAA3V;AACH;;AAAC,YAAIzM,EAAE,GAAG,CAAT,EAAY;AACV,oEAAmB,IAAnB,EAAyBC,GAAG,CAAC4M,GAA7B,EAAkC,MAAlC,EAA0C5M,GAAG,CAAC9gB,OAAJ,CAAY0qB,IAAtD,EAA4D,iBAA5D,EAA+E5J,GAAG,CAAC9gB,OAAJ,CAAYqpB,SAAZ,GAAwB,IAAxB,GAA+BvI,GAAG,CAACqL,eAAlH,EAAmI,YAAnI,EAAiJrL,GAAG,CAAC9gB,OAAJ,CAAYqpB,SAA7J,EAAwK,kBAAxK,EAA4LvI,GAAG,CAAC9gB,OAAJ,CAAYgrB,eAAZ,IAA+B,IAA3N;;AACA,qFAAoC,kBAApC,EAAwDlK,GAAG,CAAC8K,MAA5D;AACH;AAAE,OAV4C;AAU1CrK,cAAQ,EAAE,CAAC,wEAAD,CAVgC;AAUKgI,WAAK,EAAE,CAVZ;AAUeC,UAAI,EAAE,CAVrB;AAUwBC,YAAM,EAAE,CAAC,CAAC,iBAAD,EAAoB,EAApB,CAAD,CAVhC;AAU2DpkB,cAAQ,EAAE,SAASsoB,2BAAT,CAAqC9M,EAArC,EAAyCC,GAAzC,EAA8C;AAAE,YAAID,EAAE,GAAG,CAAT,EAAY;AAC5K,mEAAkB,CAAlB,EAAqB0J,yCAArB,EAAgE,CAAhE,EAAmE,CAAnE,EAAsE,aAAtE,EAAqF,CAArF;AACH;AAAE,OAZ4C;AAY1CR,gBAAU,EAAE,CAAC,mEAAD,CAZ8B;AAYJ3V,YAAM,EAAE,CAAC,o7BAAD,CAZJ;AAY47B4V,mBAAa,EAAE,CAZ38B;AAY88B9M,UAAI,EAAE;AAAE0Q,iBAAS,EAAE,CAACvC,mBAAmB,CAACC,eAArB;AAAb;AAZp9B,KAAzB,CAA1B;AAaA;;AACAG,sBAAkB,CAACzQ,cAAnB,GAAoC;AAAA,aAAM,CACtC;AAAEzR,YAAI,EAAE;AAAR,OADsC,EAEtC;AAAEA,YAAI,EAAE;AAAR,OAFsC,EAGtC;AAAEA,YAAI,EAAE;AAAR,OAHsC,EAItC;AAAEA,YAAI,EAAE1D,SAAR;AAAmBoV,kBAAU,EAAE,CAAC;AAAE1R,cAAI,EAAE;AAAR,SAAD,EAAqB;AAAEA,cAAI,EAAE,oDAAR;AAAgB2R,cAAI,EAAE,CAAC,wDAAD;AAAtB,SAArB;AAA/B,OAJsC,EAKtC;AAAE3R,YAAI,EAAEkhB;AAAR,OALsC,CAAN;AAAA,KAApC;;AAOAgB,sBAAkB,CAAC7O,cAAnB,GAAoC;AAChCoP,mBAAa,EAAE,CAAC;AAAEziB,YAAI,EAAE,uDAAR;AAAmB2R,YAAI,EAAE,CAAC,mEAAD,EAAkB;AAAE,oBAAQ;AAAV,SAAlB;AAAzB,OAAD;AADiB,KAApC;AAGA;;AAAc,KAAC,YAAY;AAAE,sEAAyBuQ,kBAAzB,EAA6C,CAAC;AACnEliB,YAAI,EAAE,uDAD6D;AAEnE2R,YAAI,EAAE,CAAC;AACC2B,kBAAQ,EAAE,sBADX;AAECxX,kBAAQ,EAAE,+CAFX;AAGC2kB,uBAAa,EAAE,gEAAkBG,IAHlC;AAIC;AACA;AACAF,yBAAe,EAAE,sEAAwB4D,OAN1C;AAOCC,oBAAU,EAAE,CAACzC,mBAAmB,CAACC,eAArB,CAPb;AAQCxO,cAAI,EAAE;AACF,qBAAS,sBADP;AAEF,wBAAY,IAFV;AAGF,0BAAc,MAHZ;AAIF,yBAAa,KAJX;AAKF,2BAAe,cALb;AAMF,sCAA0B,4CANxB;AAOF,iCAAqB,mBAPnB;AAQF,uCAA2B,iCARzB;AASF,kCAAsB,QATpB;AAUF,wCAA4B,2BAV1B;AAWF,uCAA2B;AAXzB,WARP;AAqBC1I,gBAAM,EAAE,CAAC,o7BAAD;AArBT,SAAD;AAF6D,OAAD,CAA7C,EAyBrB,YAAY;AAAE,eAAO,CAAC;AAAE7K,cAAI,EAAE;AAAR,SAAD,EAA8B;AAAEA,cAAI,EAAE;AAAR,SAA9B,EAAiE;AAAEA,cAAI,EAAE;AAAR,SAAjE,EAAqG;AAAEA,cAAI,EAAE1D,SAAR;AAAmBoV,oBAAU,EAAE,CAAC;AAClJ1R,gBAAI,EAAE;AAD4I,WAAD,EAElJ;AACCA,gBAAI,EAAE,oDADP;AAEC2R,gBAAI,EAAE,CAAC,wDAAD;AAFP,WAFkJ;AAA/B,SAArG,EAKX;AAAE3R,cAAI,EAAEkhB;AAAR,SALW,CAAP;AAKyB,OA9BlB,EA8BoB;AAAEuB,qBAAa,EAAE,CAAC;AACvDziB,cAAI,EAAE,uDADiD;AAEvD2R,cAAI,EAAE,CAAC,mEAAD,EAAkB;AAAE,sBAAQ;AAAV,WAAlB;AAFiD,SAAD;AAAjB,OA9BpB;AAiCb,KAjCF;;AAkCd,QAAI,KAAJ,EAAW,CAuEV;AAED;;;;;AAKA;AACA;;AACA;;;AACA,QAAI6S,QAAQ,GAAG,CAAf;AACA;;AACA,QAAMC,cAAc,GAAG;AACnBC,UAAI,EAAE,CADa;AACVC,aAAO,EAAE,CADC;AACEC,YAAM,EAAE;AADV,KAAvB;AAGA;;;;;QAIMC,Y;AACF;;;;;AAKA,4BAAYC,WAAZ,EAAyBC,kBAAzB,EAA8E;AAAA;;AAAA,YAAjC9L,EAAiC,4FAAduL,QAAQ,EAAM;;AAAA;;AAC1E,aAAKM,WAAL,GAAmBA,WAAnB;AACA,aAAKC,kBAAL,GAA0BA,kBAA1B;AACA,aAAK9L,EAAL,GAAUA,EAAV;AACA;;;;AAGA,aAAKsI,YAAL,GAAoB,KAAKwD,kBAAL,CAAwBtuB,OAAxB,CAAgC8qB,YAApD;AACA;;;;AAGA,aAAKyD,YAAL,GAAoB,IAAI,4CAAJ,EAApB;AACA;;;;AAGA,aAAKC,YAAL,GAAoB,IAAI,4CAAJ,EAApB;AACA;;;;AAGA,aAAKC,aAAL,GAAqB,IAAI,4CAAJ,EAArB;AACA;;;;AAGA,aAAK7C,MAAL,GAAc;AAAE;AAAhB,SAvB0E,CAwB1E;;AACA0C,0BAAkB,CAACZ,GAAnB,GAAyBlL,EAAzB,CAzB0E,CA0B1E;;AACA8L,0BAAkB,CAACzC,sBAAnB,CAA0ChY,IAA1C,CAA+C;AAAQ;;;;AAIvD,kBAAArV,KAAK;AAAA,iBAAIA,KAAK,CAACkwB,SAAN,KAAoB,MAApB,IAA8BlwB,KAAK,CAACuuB,OAAN,KAAkB,OAApD;AAAA,SAJ0C,CAA/C,EAIoE,4DAAK,CAAL,CAJpE,EAKK9mB,SALL;AAKgB;;;AAGhB,oBAAM;AACF,iBAAI,CAACsoB,YAAL,CAAkB1sB,IAAlB;;AACA,iBAAI,CAAC0sB,YAAL,CAAkB9nB,QAAlB;AACH,SAXD,EA3B0E,CAuC1E;;;AACA6nB,0BAAkB,CAACzC,sBAAnB,CAA0ChY,IAA1C,CAA+C;AAAQ;;;;AAIvD,kBAAArV,KAAK;AAAA,iBAAIA,KAAK,CAACkwB,SAAN,KAAoB,MAApB,IAA8BlwB,KAAK,CAACuuB,OAAN,KAAkB,MAApD;AAAA,SAJ0C,CAA/C,EAImE,4DAAK,CAAL,CAJnE,EAI4E9mB,SAJ5E;AAIuF;;;AAGvF,oBAAM;AACF0G,sBAAY,CAAC,OAAI,CAACgiB,qBAAN,CAAZ;;AACA,iBAAI,CAACC,kBAAL;AACH,SAVD;;AAWAP,mBAAW,CAACQ,WAAZ,GAA0B5oB,SAA1B;AAAqC;;;AAGrC,oBAAM;AACF,iBAAI,CAACwoB,aAAL,CAAmB5sB,IAAnB,CAAwB,OAAI,CAACitB,OAA7B;;AACA,iBAAI,CAACL,aAAL,CAAmBhoB,QAAnB;;AACA,iBAAI,CAAC+nB,YAAL,CAAkB3sB,IAAlB,CAAuB,OAAI,CAACitB,OAA5B;;AACA,iBAAI,CAACN,YAAL,CAAkB/nB,QAAlB;;AACA,iBAAI,CAACsoB,iBAAL;AAA0B;AAAkB,cAA5C;;AACA,iBAAI,CAACV,WAAL,CAAiB3O,OAAjB;AACH,SAVD;;AAWA2O,mBAAW,CAACW,aAAZ,GACKnb,IADL,CACU;AAAQ;;;;AAIlB,kBAAArV,KAAK,EAAI;AACL,iBAAOA,KAAK,CAACywB,OAAN,KAAkB,6DAAlB,IAA4B,CAAC,OAAI,CAACnE,YAAlC,IAAkD,CAAC,8EAAetsB,KAAf,CAA1D;AACH,SANS,CADV,EAQKyH,SARL;AAQgB;;;;AAIhB,kBAAAzH,KAAK,EAAI;AACLA,eAAK,CAAC8D,cAAN;;AACA,iBAAI,CAAC4sB,KAAL;AACH,SAfD;;AAgBAb,mBAAW,CAACc,aAAZ,GAA4BlpB,SAA5B;AAAuC;;;AAGvC,oBAAM;AACF,cAAI,OAAI,CAAC6kB,YAAT,EAAuB;AACnB,mBAAI,CAACwD,kBAAL,CAAwBc,eAAxB;AACH,WAFD,MAGK;AACD,mBAAI,CAACF,KAAL;AACH;AACJ,SAVD;AAWH;AACD;;;;;;;;;8BAKMG,Y,EAAc;AAAA;;AAChB,eAAKP,OAAL,GAAeO,YAAf,CADgB,CAEhB;;AACA,eAAKf,kBAAL,CAAwBzC,sBAAxB,CAA+ChY,IAA/C,CAAoD;AAAQ;;;;AAI5D,oBAAArV,KAAK;AAAA,mBAAIA,KAAK,CAACkwB,SAAN,KAAoB,OAAxB;AAAA,WAJ+C,CAApD,EAIwC,4DAAK,CAAL,CAJxC,EAKKzoB,SALL;AAKgB;;;;AAIhB,oBAAAzH,KAAK,EAAI;AACL,mBAAI,CAACiwB,aAAL,CAAmB5sB,IAAnB,CAAwBwtB,YAAxB;;AACA,mBAAI,CAACZ,aAAL,CAAmBhoB,QAAnB;;AACA,mBAAI,CAAC4nB,WAAL,CAAiBiB,cAAjB,GAHK,CAIL;AACA;AACA;AACA;AACA;;;AACA,mBAAI,CAACX,qBAAL,GAA6B9hB,UAAU;AAAE;;;AAGzC;AAAA,qBAAM,OAAI,CAAC+hB,kBAAL,EAAN;AAAA,aAHuC,EAGLpwB,KAAK,CAAC+wB,SAAN,GAAkB,GAHb,CAAvC;AAIH,WAtBD;;AAuBA,eAAKjB,kBAAL,CAAwBkB,mBAAxB;;AACA,eAAK5D,MAAL,GAAc;AAAE;AAAhB;AACH;AACD;;;;;;;sCAIc;AACV,iBAAO,KAAK2C,YAAL,CAAkB5sB,YAAlB,EAAP;AACH;AACD;;;;;;;sCAIc;AACV,iBAAO,KAAK6sB,YAAL,CAAkB7sB,YAAlB,EAAP;AACH;AACD;;;;;;;uCAIe;AACX,iBAAO,KAAK8sB,aAAL,CAAmB9sB,YAAnB,EAAP;AACH;AACD;;;;;;;wCAIgB;AACZ,iBAAO,KAAK0sB,WAAL,CAAiBc,aAAjB,EAAP;AACH;AACD;;;;;;;wCAIgB;AACZ,iBAAO,KAAKd,WAAL,CAAiBW,aAAjB,EAAP;AACH;AACD;;;;;;;;;;uCAOe7vB,Q,EAAU;AACrB;AACA,cAAIswB,QAAQ;AAAI;AAAkB,cAAnB,CAA0BC,oBAA1B,EAAf;;AACA,cAAIvwB,QAAQ,KAAKA,QAAQ,CAACvC,IAAT,IAAiBuC,QAAQ,CAACzC,KAA/B,CAAZ,EAAmD;AAC/CyC,oBAAQ,CAACvC,IAAT,GAAgB6yB,QAAQ,CAAC7yB,IAAT,CAAcuC,QAAQ,CAACvC,IAAvB,CAAhB,GAA+C6yB,QAAQ,CAAC/yB,KAAT,CAAeyC,QAAQ,CAACzC,KAAxB,CAA/C;AACH,WAFD,MAGK;AACD+yB,oBAAQ,CAACE,kBAAT;AACH;;AACD,cAAIxwB,QAAQ,KAAKA,QAAQ,CAAC1C,GAAT,IAAgB0C,QAAQ,CAACxC,MAA9B,CAAZ,EAAmD;AAC/CwC,oBAAQ,CAAC1C,GAAT,GAAegzB,QAAQ,CAAChzB,GAAT,CAAa0C,QAAQ,CAAC1C,GAAtB,CAAf,GAA4CgzB,QAAQ,CAAC9yB,MAAT,CAAgBwC,QAAQ,CAACxC,MAAzB,CAA5C;AACH,WAFD,MAGK;AACD8yB,oBAAQ,CAACG,gBAAT;AACH;;AACA;AAAkB,cAAnB,CAA0BvB,WAA1B,CAAsCwB,cAAtC;;AACA;AAAQ;AAAkB;AAA1B;AACH;AACD;;;;;;;;;;;qCAQoC;AAAA,cAAzBhzB,KAAyB,uEAAjB,EAAiB;AAAA,cAAbC,MAAa,uEAAJ,EAAI;;AAC/B;AAAkB,cAAnB,CAA0B4yB,oBAA1B,GAAiD7yB,KAAjD,CAAuDA,KAAvD,EAA8DC,MAA9D,CAAqEA,MAArE;;AACC;AAAkB,cAAnB,CAA0BuxB,WAA1B,CAAsCwB,cAAtC;;AACA;AAAQ;AAAkB;AAA1B;AACH;AACD;;;;;;;;;;sCAOcC,O,EAAS;AAClB;AAAkB,cAAnB,CAA0BzB,WAA1B,CAAsC0B,aAAtC,CAAoDD,OAApD;;AACA;AAAQ;AAAkB;AAA1B;AACH;AACD;;;;;;;;;;yCAOiBA,O,EAAS;AACrB;AAAkB,cAAnB,CAA0BzB,WAA1B,CAAsC2B,gBAAtC,CAAuDF,OAAvD;;AACA;AAAQ;AAAkB;AAA1B;AACH;AACD;;;;;;;mCAIW;AACP,iBAAO,KAAKlE,MAAZ;AACH;AACD;;;;;;;;;6CAMqB;AACjB,eAAKA,MAAL,GAAc;AAAE;AAAhB;;AACA,eAAKyC,WAAL,CAAiB3O,OAAjB;AACH;AACD;;;;;;;;+CAKuB;AACnB;AAAQ;AAAkB,iBAAK2O,WAAL,CAAiB4B,SAAjB,GAA6BC;AAAvD;AACH;;;;;;AAEL,QAAI,KAAJ,EAAW,CAwDV;AAED;;;;;;AAKA;;;;;;AAIA,QAAMC,eAAe,GAAG,IAAI,4DAAJ,CAAmB,eAAnB,CAAxB;AACA;;;;;AAIA,QAAMC,0BAA0B,GAAG,IAAI,4DAAJ,CAAmB,4BAAnB,CAAnC;AACA;;;;;AAIA,QAAMC,0BAA0B,GAAG,IAAI,4DAAJ,CAAmB,4BAAnB,CAAnC;AACA;;;;;;AAKA,aAASC,kCAAT,CAA4CC,OAA5C,EAAqD;AACjD;AAAQ;;;AAGR;AAAA,iBAAMA,OAAO,CAACC,gBAAR,CAAyBC,KAAzB,EAAN;AAAA;AAHA;AAIH;AACD;;;;;;;AAKA,aAASC,2CAAT,CAAqDH,OAArD,EAA8D;AAC1D;AAAQ;;;AAGR;AAAA,iBAAMA,OAAO,CAACC,gBAAR,CAAyBC,KAAzB,EAAN;AAAA;AAHA;AAIH;AACD;;;;;;AAIA,QAAME,mCAAmC,GAAG;AACxCnP,aAAO,EAAE6O,0BAD+B;AAExCO,UAAI,EAAE,CAAC,4DAAD,CAFkC;AAGxCC,gBAAU,EAAEH;AAH4B,KAA5C;AAKA;;;;QAGMI,S;AACF;;;;;;;;;AASA,yBAAYC,QAAZ,EAAsBC,SAAtB;AACA;;;;AAIAC,eALA,EAKWC,eALX,EAK4BC,cAL5B,EAK4CC,aAL5C,EAK2DC,iBAL3D,EAK8E;AAAA;;AAAA;;AAC1E,aAAKN,QAAL,GAAgBA,QAAhB;AACA,aAAKC,SAAL,GAAiBA,SAAjB;AACA,aAAKE,eAAL,GAAuBA,eAAvB;AACA,aAAKE,aAAL,GAAqBA,aAArB;AACA,aAAKC,iBAAL,GAAyBA,iBAAzB;AACA,aAAKC,uBAAL,GAA+B,EAA/B;AACA,aAAKC,0BAAL,GAAkC,IAAI,4CAAJ,EAAlC;AACA,aAAKC,uBAAL,GAA+B,IAAI,4CAAJ,EAA/B;AACA,aAAKC,mBAAL,GAA2B,IAAI1zB,GAAJ,EAA3B,CAT0E,CAU1E;;AACA;;;;;AAIA,aAAK2zB,cAAL;AAAuB;AAAkB;AAAO;;;AAGhD;AAAA,iBAAM,OAAI,CAACC,WAAL,CAAiB7vB,MAAjB,GACF,OAAI,CAAC8vB,eADH,GAEF,OAAI,CAACA,eAAL,CAAqB/d,IAArB,CAA0B,iEAAUhO,SAAV,CAA1B,CAFJ;AAAA,SAHyC,CAAzC;AAMA,aAAKgsB,eAAL,GAAuBV,cAAvB;AACH;AACD;;;;;;;;;AAsBA;;;;;;;;6BAQKW,sB,EAAwBpX,M,EAAQ;AAAA;;AACjCA,gBAAM,GAAGqX,oBAAoB,CAACrX,MAAD,EAAS,KAAKwW,eAAL,IAAwB,IAAIzG,eAAJ,EAAjC,CAA7B;;AACA,cAAI/P,MAAM,CAAC8H,EAAP,IAAa,KAAKwP,aAAL,CAAmBtX,MAAM,CAAC8H,EAA1B,CAAjB,EAAgD;AAC5C,kBAAM3C,KAAK,4BAAoBnF,MAAM,CAAC8H,EAA3B,sDAAX;AACH;AACD;;;AACA,cAAMyP,UAAU,GAAG,KAAKC,cAAL,CAAoBxX,MAApB,CAAnB;AACA;;;AACA,cAAM4Q,eAAe,GAAG,KAAK6G,sBAAL,CAA4BF,UAA5B,EAAwCvX,MAAxC,CAAxB;AACA;;;AACA,cAAM0X,SAAS,GAAG,KAAKC,oBAAL,CAA0BP,sBAA1B,EAAkDxG,eAAlD,EAAmE2G,UAAnE,EAA+EvX,MAA/E,CAAlB,CAViC,CAWjC;;;AACA,cAAI,CAAC,KAAKiX,WAAL,CAAiB7vB,MAAtB,EAA8B;AAC1B,iBAAKwwB,4CAAL;AACH;;AACD,eAAKX,WAAL,CAAiBrc,IAAjB,CAAsB8c,SAAtB;AACAA,mBAAS,CAACG,WAAV,GAAwBtsB,SAAxB;AAAmC;;;AAGnC;AAAA,mBAAM,OAAI,CAACusB,iBAAL,CAAuBJ,SAAvB,CAAN;AAAA,WAHA;AAIA,eAAKK,WAAL,CAAiB5wB,IAAjB,CAAsBuwB,SAAtB;AACA,iBAAOA,SAAP;AACH;AACD;;;;;;;mCAIW;AACP,eAAKM,aAAL,CAAmB,KAAKf,WAAxB;AACH;AACD;;;;;;;;sCAKcnP,E,EAAI;AACd,iBAAO,KAAKmP,WAAL,CAAiBh2B,IAAjB;AAAuB;;;;AAI9B,oBAAAg3B,MAAM;AAAA,mBAAIA,MAAM,CAACnQ,EAAP,KAAcA,EAAlB;AAAA,WAJC,CAAP;AAKH;AACD;;;;;;sCAGc;AACV;AACA;AACA,eAAKkQ,aAAL,CAAmB,KAAKpB,uBAAxB;;AACA,eAAKC,0BAAL,CAAgC9qB,QAAhC;;AACA,eAAK+qB,uBAAL,CAA6B/qB,QAA7B;AACH;AACD;;;;;;;;;uCAMeiU,M,EAAQ;AACnB;AACA,cAAMkY,aAAa,GAAG,KAAKC,iBAAL,CAAuBnY,MAAvB,CAAtB;;AACA,iBAAO,KAAKqW,QAAL,CAAcjE,MAAd,CAAqB8F,aAArB,CAAP;AACH;AACD;;;;;;;;;0CAMkBE,Y,EAAc;AAC5B;AACA,cAAMC,KAAK,GAAG,IAAI,kEAAJ,CAAkB;AAC5B7C,4BAAgB,EAAE,KAAKa,QAAL,CAAc5xB,QAAd,GAAyB6zB,MAAzB,EADU;AAE5B7B,0BAAc,EAAE2B,YAAY,CAAC3B,cAAb,IAA+B,KAAKU,eAAL,EAFnB;AAG5BlH,sBAAU,EAAEmI,YAAY,CAACnI,UAHG;AAI5BC,uBAAW,EAAEkI,YAAY,CAAClI,WAJE;AAK5BhkB,qBAAS,EAAEksB,YAAY,CAAClsB,SALI;AAM5BqsB,oBAAQ,EAAEH,YAAY,CAACG,QANK;AAO5BC,qBAAS,EAAEJ,YAAY,CAACI,SAPI;AAQ5BnI,oBAAQ,EAAE+H,YAAY,CAAC/H,QARK;AAS5BoI,qBAAS,EAAEL,YAAY,CAACK,SATI;AAU5BC,+BAAmB,EAAEN,YAAY,CAAC1H;AAVN,WAAlB,CAAd;;AAYA,cAAI0H,YAAY,CAACjI,aAAjB,EAAgC;AAC5BkI,iBAAK,CAAClI,aAAN,GAAsBiI,YAAY,CAACjI,aAAnC;AACH;;AACD,iBAAOkI,KAAP;AACH;AACD;;;;;;;;;;+CAOuBxC,O,EAAS7V,M,EAAQ;AACpC;AACA,cAAM2Y,YAAY,GAAG3Y,MAAM,IAAIA,MAAM,CAAC4Y,gBAAjB,IAAqC5Y,MAAM,CAAC4Y,gBAAP,CAAwBC,QAAlF;AACA;;AACA,cAAMA,QAAQ,GAAG,uDAASzG,MAAT,CAAgB;AAC7BllB,kBAAM,EAAEyrB,YAAY,IAAI,KAAKrC,SADA;AAE7BrP,qBAAS,EAAE,CAAC;AAAEH,qBAAO,EAAEiJ,eAAX;AAA4B1G,sBAAQ,EAAErJ;AAAtC,aAAD;AAFkB,WAAhB,CAAjB;AAIA;;;AACA,cAAM8Y,eAAe,GAAG,IAAI,mEAAJ,CAAoB/H,kBAApB,EAAwC/Q,MAAM,CAAC4Y,gBAA/C,EAAiEC,QAAjE,EAA2E7Y,MAAM,CAAC+Y,wBAAlF,CAAxB;AACA;;AACA,cAAMC,YAAY,GAAGnD,OAAO,CAACoD,MAAR,CAAeH,eAAf,CAArB;AACA,iBAAOE,YAAY,CAAC9Y,QAApB;AACH;AACD;;;;;;;;;;;;;;6CAWqBkX,sB,EAAwBxG,e,EAAiB2G,U,EAAYvX,M,EAAQ;AAC9E;AACA;;AACA;AACA,cAAM0X,SAAS,GAAG,IAAIhE,YAAJ,CAAiB6D,UAAjB,EAA6B3G,eAA7B,EAA8C5Q,MAAM,CAAC8H,EAArD,CAAlB;;AACA,cAAIsP,sBAAsB,YAAY,yDAAtC,EAAmD;AAC/CxG,2BAAe,CAACe,oBAAhB,CAAqC,IAAI,kEAAJ,CAAmByF,sBAAnB;AAA4C;AAAkB,gBAA9D;AAAuE;AAAkB;AAAE8B,uBAAS,EAAElZ,MAAM,CAACwC,IAApB;AAA0BkV,uBAAS,EAATA;AAA1B,aAAzF,CAArC;AACH,WAFD,MAGK;AACD;AACA,gBAAMmB,QAAQ,GAAG,KAAKM,eAAL,CAAqBnZ,MAArB,EAA6B0X,SAA7B,EAAwC9G,eAAxC,CAAjB;AACA;;;AACA,gBAAMwI,UAAU,GAAGxI,eAAe,CAACc,qBAAhB,CAAsC,IAAI,mEAAJ,CAAoB0F,sBAApB,EAA4CpX,MAAM,CAAC4Y,gBAAnD,EAAqEC,QAArE,CAAtC,CAAnB;AACAnB,qBAAS,CAACrD,iBAAV,GAA8B+E,UAAU,CAAClZ,QAAzC;AACH;;AACDwX,mBAAS,CACJ2B,UADL,CACgBrZ,MAAM,CAAC7d,KADvB,EAC8B6d,MAAM,CAAC5d,MADrC,EAEK+yB,cAFL,CAEoBnV,MAAM,CAACvb,QAF3B;AAGA,iBAAOizB,SAAP;AACH;AACD;;;;;;;;;;;;;wCAUgB1X,M,EAAQ0X,S,EAAW9G,e,EAAiB;AAChD;AACA,cAAM+H,YAAY,GAAG3Y,MAAM,IAAIA,MAAM,CAAC4Y,gBAAjB,IAAqC5Y,MAAM,CAAC4Y,gBAAP,CAAwBC,QAAlF,CAFgD,CAGhD;AACA;AACA;AACA;;AACA;;AACA,cAAM5R,SAAS,GAAG,CACd;AAAEH,mBAAO,EAAEiK,kBAAX;AAA+B1H,oBAAQ,EAAEuH;AAAzC,WADc,EAEd;AAAE9J,mBAAO,EAAE2O,eAAX;AAA4BpM,oBAAQ,EAAErJ,MAAM,CAACwC;AAA7C,WAFc,EAGd;AAAEsE,mBAAO,EAAE4M,YAAX;AAAyBrK,oBAAQ,EAAEqO;AAAnC,WAHc,CAAlB;;AAKA,cAAI1X,MAAM,CAAC9T,SAAP,KACC,CAACysB,YAAD,IAAiB,CAACA,YAAY,CAAC10B,GAAb,CAAiB,gEAAjB,EAAiC,IAAjC,CADnB,CAAJ,EACgE;AAC5DgjB,qBAAS,CAACrM,IAAV,CAAe;AACXkM,qBAAO,EAAE,gEADE;AAEXuC,sBAAQ,EAAE;AAAE/oB,qBAAK,EAAE0f,MAAM,CAAC9T,SAAhB;AAA2BZ,sBAAM,EAAE;AAAnC;AAFC,aAAf;AAIH;;AACD,iBAAO,uDAAS8mB,MAAT,CAAgB;AAAEllB,kBAAM,EAAEyrB,YAAY,IAAI,KAAKrC,SAA/B;AAA0CrP,qBAAS,EAATA;AAA1C,WAAhB,CAAP;AACH;AACD;;;;;;;;;0CAMkByQ,S,EAAW;AACzB;AACA,cAAMxd,KAAK,GAAG,KAAK+c,WAAL,CAAiBx2B,OAAjB,CAAyBi3B,SAAzB,CAAd;;AACA,cAAIxd,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZ,iBAAK+c,WAAL,CAAiB7f,MAAjB,CAAwB8C,KAAxB,EAA+B,CAA/B,EADY,CAEZ;AACA;;AACA,gBAAI,CAAC,KAAK+c,WAAL,CAAiB7vB,MAAtB,EAA8B;AAC1B,mBAAK2vB,mBAAL,CAAyBpzB,OAAzB;AAAkC;;;;;AAKlC,wBAAC21B,aAAD,EAAgB35B,OAAhB,EAA4B;AACxB,oBAAI25B,aAAJ,EAAmB;AACf35B,yBAAO,CAACiK,YAAR,CAAqB,aAArB,EAAoC0vB,aAApC;AACH,iBAFD,MAGK;AACD35B,yBAAO,CAAC0V,eAAR,CAAwB,aAAxB;AACH;AACJ,eAZD;;AAaA,mBAAK0hB,mBAAL,CAAyBzzB,KAAzB;;AACA,mBAAK4zB,eAAL,CAAqB/vB,IAArB;AACH;AACJ;AACJ;AACD;;;;;;;;uEAK+C;AAC3C;AACA,cAAMoyB,gBAAgB,GAAG,KAAK5C,iBAAL,CAAuB6C,mBAAvB,EAAzB,CAF2C,CAG3C;;;AACA,cAAID,gBAAgB,CAAC9e,aAArB,EAAoC;AAChC;AACA,gBAAMuB,QAAQ,GAAGud,gBAAgB,CAAC9e,aAAjB,CAA+Bgf,QAAhD;;AACA,iBAAK,IAAInkB,CAAC,GAAG0G,QAAQ,CAAC5U,MAAT,GAAkB,CAA/B,EAAkCkO,CAAC,GAAG,CAAC,CAAvC,EAA0CA,CAAC,EAA3C,EAA+C;AAC3C;AACA,kBAAIyE,OAAO,GAAGiC,QAAQ,CAAC1G,CAAD,CAAtB;;AACA,kBAAIyE,OAAO,KAAKwf,gBAAZ,IACAxf,OAAO,CAACqL,QAAR,KAAqB,QADrB,IAEArL,OAAO,CAACqL,QAAR,KAAqB,OAFrB,IAGA,CAACrL,OAAO,CAAC2f,YAAR,CAAqB,WAArB,CAHL,EAGwC;AACpC,qBAAK3C,mBAAL,CAAyBvzB,GAAzB,CAA6BuW,OAA7B,EAAsCA,OAAO,CAAC4f,YAAR,CAAqB,aAArB,CAAtC;;AACA5f,uBAAO,CAACnQ,YAAR,CAAqB,aAArB,EAAoC,MAApC;AACH;AACJ;AACJ;AACJ;AACD;;;;;;;;;sCAMcgwB,O,EAAS;AACnB;AACA,cAAItkB,CAAC,GAAGskB,OAAO,CAACxyB,MAAhB;;AACA,iBAAOkO,CAAC,EAAR,EAAY;AACR;AACA;AACA;AACA;AACAskB,mBAAO,CAACtkB,CAAD,CAAP,CAAWkf,KAAX;AACH;AACJ;;;4BA/QiB;AACd,iBAAO,KAAKkC,aAAL,GAAqB,KAAKA,aAAL,CAAmBO,WAAxC,GAAsD,KAAKL,uBAAlE;AACH;AACD;;;;;;;4BAIkB;AACd,iBAAO,KAAKF,aAAL,GAAqB,KAAKA,aAAL,CAAmBqB,WAAxC,GAAsD,KAAKjB,uBAAlE;AACH;AACD;;;;;;4BAGsB;AAClB;AACA,cAAM5pB,MAAM,GAAG,KAAKwpB,aAApB;AACA,iBAAOxpB,MAAM,GAAGA,MAAM,CAACgqB,eAAV,GAA4B,KAAKL,0BAA9C;AACH;;;;;;AAgQLT,aAAS,CAACjW,IAAV,GAAiB,SAAS0Z,iBAAT,CAA2BxZ,CAA3B,EAA8B;AAAE,aAAO,KAAKA,CAAC,IAAI+V,SAAV,EAAqB,uDAAgB,4DAAhB,CAArB,EAAsD,uDAAgB,sDAAhB,CAAtD,EAAwF,uDAAgB,wDAAhB,EAAiC,CAAjC,CAAxF,EAA6H,uDAAgBV,0BAAhB,EAA4C,CAA5C,CAA7H,EAA6K,uDAAgBC,0BAAhB,CAA7K,EAA0N,uDAAgBS,SAAhB,EAA2B,EAA3B,CAA1N,EAA0P,uDAAgB,qEAAhB,CAA1P,CAAP;AAA6S,KAA9V;;AACAA,aAAS,CAAC3V,KAAV,GAAkB,iEAA0B;AAAEE,WAAK,EAAEyV,SAAT;AAAoB1V,aAAO,EAAE0V,SAAS,CAACjW;AAAvC,KAA1B,CAAlB;AACA;;AACAiW,aAAS,CAAC9V,cAAV,GAA2B;AAAA,aAAM,CAC7B;AAAEzR,YAAI,EAAE;AAAR,OAD6B,EAE7B;AAAEA,YAAI,EAAE;AAAR,OAF6B,EAG7B;AAAEA,YAAI,EAAE,wDAAR;AAAkB0R,kBAAU,EAAE,CAAC;AAAE1R,cAAI,EAAE;AAAR,SAAD;AAA9B,OAH6B,EAI7B;AAAEA,YAAI,EAAEkhB,eAAR;AAAyBxP,kBAAU,EAAE,CAAC;AAAE1R,cAAI,EAAE;AAAR,SAAD,EAAqB;AAAEA,cAAI,EAAE,oDAAR;AAAgB2R,cAAI,EAAE,CAACkV,0BAAD;AAAtB,SAArB;AAArC,OAJ6B,EAK7B;AAAE7mB,YAAI,EAAE1D,SAAR;AAAmBoV,kBAAU,EAAE,CAAC;AAAE1R,cAAI,EAAE,oDAAR;AAAgB2R,cAAI,EAAE,CAACmV,0BAAD;AAAtB,SAAD;AAA/B,OAL6B,EAM7B;AAAE9mB,YAAI,EAAEunB,SAAR;AAAmB7V,kBAAU,EAAE,CAAC;AAAE1R,cAAI,EAAE;AAAR,SAAD,EAAqB;AAAEA,cAAI,EAAE;AAAR,SAArB;AAA/B,OAN6B,EAO7B;AAAEA,YAAI,EAAE;AAAR,OAP6B,CAAN;AAAA,KAA3B;AASA;;;AAAc,KAAC,YAAY;AAAE,sEAAyBunB,SAAzB,EAAoC,CAAC;AAC1DvnB,YAAI,EAAE;AADoD,OAAD,CAApC,EAErB,YAAY;AAAE,eAAO,CAAC;AAAEA,cAAI,EAAE;AAAR,SAAD,EAA2B;AAAEA,cAAI,EAAE;AAAR,SAA3B,EAAsD;AAAEA,cAAI,EAAE,wDAAR;AAAyB0R,oBAAU,EAAE,CAAC;AACzG1R,gBAAI,EAAE;AADmG,WAAD;AAArC,SAAtD,EAEX;AAAEA,cAAI,EAAEkhB,eAAR;AAAyBxP,oBAAU,EAAE,CAAC;AACxC1R,gBAAI,EAAE;AADkC,WAAD,EAExC;AACCA,gBAAI,EAAE,oDADP;AAEC2R,gBAAI,EAAE,CAACkV,0BAAD;AAFP,WAFwC;AAArC,SAFW,EAOX;AAAE7mB,cAAI,EAAE1D,SAAR;AAAmBoV,oBAAU,EAAE,CAAC;AAClC1R,gBAAI,EAAE,oDAD4B;AAElC2R,gBAAI,EAAE,CAACmV,0BAAD;AAF4B,WAAD;AAA/B,SAPW,EAUX;AAAE9mB,cAAI,EAAEunB,SAAR;AAAmB7V,oBAAU,EAAE,CAAC;AAClC1R,gBAAI,EAAE;AAD4B,WAAD,EAElC;AACCA,gBAAI,EAAE;AADP,WAFkC;AAA/B,SAVW,EAcX;AAAEA,cAAI,EAAE;AAAR,SAdW,CAAP;AAciC,OAhB1B,EAgB4B,IAhB5B;AAgBoC,KAhBnD;;AAiBd,QAAI,KAAJ,EAAW,CAyDV;AACD;;;;;;;;AAMA,aAASwoB,oBAAT,CAA8BrX,MAA9B,EAAsCwK,cAAtC,EAAsD;AAClD,aAAOsP,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBvP,cAAlB,CAAd,EAAiDxK,MAAjD,CAAP;AACH;AAED;;;;;;AAKA;;;;;;AAIA,QAAIga,gBAAgB,GAAG,CAAvB;AACA;;;;QAGMC,c;AACF;;;;;AAKA,8BAAYvC,SAAZ,EAAuB3K,WAAvB,EAAoCmN,OAApC,EAA6C;AAAA;;AACzC,aAAKxC,SAAL,GAAiBA,SAAjB;AACA,aAAK3K,WAAL,GAAmBA,WAAnB;AACA,aAAKmN,OAAL,GAAeA,OAAf;AACA;;;;AAGA,aAAKrrB,IAAL,GAAY,QAAZ;AACH;AACD;;;;;;;mCAGW;AACP,cAAI,CAAC,KAAK6oB,SAAV,EAAqB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAKA,SAAL;AAAkB;AAAkByC,4BAAgB,CAAC,KAAKpN,WAAN,EAAmB,KAAKmN,OAAL,CAAajD,WAAhC,CAApD;AACH;AACJ;AACD;;;;;;;oCAIY7S,O,EAAS;AACjB;AACA,cAAMgW,aAAa,GAAGhW,OAAO,CAAC,iBAAD,CAAP,IAA8BA,OAAO,CAAC,uBAAD,CAA3D;;AACA,cAAIgW,aAAJ,EAAmB;AACf,iBAAKzF,YAAL,GAAoByF,aAAa,CAACnO,YAAlC;AACH;AACJ;;;;;;AAELgO,kBAAc,CAAC9Z,IAAf,GAAsB,SAASka,sBAAT,CAAgCha,CAAhC,EAAmC;AAAE,aAAO,KAAKA,CAAC,IAAI4Z,cAAV,EAA0B,gEAAyBvG,YAAzB,EAAuC,CAAvC,CAA1B,EAAqE,gEAAyB,wDAAzB,CAArE,EAAkH,gEAAyB0C,SAAzB,CAAlH,CAAP;AAAgK,KAA3N;;AACA6D,kBAAc,CAACnY,IAAf,GAAsB,gEAAyB;AAAEjT,UAAI,EAAEorB,cAAR;AAAwBlY,eAAS,EAAE,CAAC,CAAC,EAAD,EAAK,kBAAL,EAAyB,EAAzB,CAAD,EAA+B,CAAC,EAAD,EAAK,gBAAL,EAAuB,EAAvB,CAA/B,CAAnC;AAA+FyE,cAAQ,EAAE,CAAzG;AAA4GC,kBAAY,EAAE,SAAS6T,2BAAT,CAAqCnU,EAArC,EAAyCC,GAAzC,EAA8C;AAAE,YAAID,EAAE,GAAG,CAAT,EAAY;AAC7N,mEAAkB,OAAlB,EAA2B,SAASoU,uCAAT,GAAmD;AAAE,mBAAOnU,GAAG,CAACsR,SAAJ,CAAclD,KAAd,CAAoBpO,GAAG,CAACuO,YAAxB,CAAP;AAA+C,WAA/H;AACH;;AAAC,YAAIxO,EAAE,GAAG,CAAT,EAAY;AACV,oEAAmB,YAAnB,EAAiCC,GAAG,CAACuI,SAAJ,IAAiB,IAAlD,EAAwD,MAAxD,EAAgEvI,GAAG,CAACvX,IAApE;AACH;AAAE,OAJwC;AAItCoT,YAAM,EAAE;AAAEpT,YAAI,EAAE,MAAR;AAAgB8lB,oBAAY,EAAE,CAAC,kBAAD,EAAqB,cAArB,CAA9B;AAAoEhG,iBAAS,EAAE,CAAC,YAAD,EAAe,WAAf,CAA/E;AAA4G6L,uBAAe,EAAE,CAAC,gBAAD,EAAmB,iBAAnB;AAA7H,OAJ8B;AAIwI5T,cAAQ,EAAE,CAAC,gBAAD,CAJlJ;AAIsKC,cAAQ,EAAE,CAAC,kEAAD;AAJhL,KAAzB,CAAtB;AAKA;;AACAoT,kBAAc,CAAC3Z,cAAf,GAAgC;AAAA,aAAM,CAClC;AAAEzR,YAAI,EAAE6kB,YAAR;AAAsBnT,kBAAU,EAAE,CAAC;AAAE1R,cAAI,EAAE;AAAR,SAAD;AAAlC,OADkC,EAElC;AAAEA,YAAI,EAAE;AAAR,OAFkC,EAGlC;AAAEA,YAAI,EAAEunB;AAAR,OAHkC,CAAN;AAAA,KAAhC;;AAKA6D,kBAAc,CAAC/X,cAAf,GAAgC;AAC5ByM,eAAS,EAAE,CAAC;AAAE9f,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,YAAD;AAArB,OAAD,CADiB;AAE5B3R,UAAI,EAAE,CAAC;AAAEA,YAAI,EAAE;AAAR,OAAD,CAFsB;AAG5B8lB,kBAAY,EAAE,CAAC;AAAE9lB,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,kBAAD;AAArB,OAAD,CAHc;AAI5Bga,qBAAe,EAAE,CAAC;AAAE3rB,YAAI,EAAE,mDAAR;AAAe2R,YAAI,EAAE,CAAC,gBAAD;AAArB,OAAD;AAJW,KAAhC;AAMA;;AAAc,KAAC,YAAY;AAAE,sEAAyByZ,cAAzB,EAAyC,CAAC;AAC/DprB,YAAI,EAAE,uDADyD;AAE/D2R,YAAI,EAAE,CAAC;AACC2B,kBAAQ,EAAE,sCADX;AAECyE,kBAAQ,EAAE,gBAFX;AAGCxE,cAAI,EAAE;AACF,uBAAW,+BADT;AAEF,iCAAqB,mBAFnB;AAGF,2BAAe;AAHb;AAHP,SAAD;AAFyD,OAAD,CAAzC,EAWrB,YAAY;AAAE,eAAO,CAAC;AAAEvT,cAAI,EAAE6kB,YAAR;AAAsBnT,oBAAU,EAAE,CAAC;AACjD1R,gBAAI,EAAE;AAD2C,WAAD;AAAlC,SAAD,EAEX;AAAEA,cAAI,EAAE;AAAR,SAFW,EAEkB;AAAEA,cAAI,EAAEunB;AAAR,SAFlB,CAAP;AAEgD,OAbzC,EAa2C;AAAEvnB,YAAI,EAAE,CAAC;AACrEA,cAAI,EAAE;AAD+D,SAAD,CAAR;AAE5D8lB,oBAAY,EAAE,CAAC;AACf9lB,cAAI,EAAE,mDADS;AAEf2R,cAAI,EAAE,CAAC,kBAAD;AAFS,SAAD,CAF8C;AAK5DmO,iBAAS,EAAE,CAAC;AACZ9f,cAAI,EAAE,mDADM;AAEZ2R,cAAI,EAAE,CAAC,YAAD;AAFM,SAAD,CALiD;AAQ5Dga,uBAAe,EAAE,CAAC;AAClB3rB,cAAI,EAAE,mDADY;AAElB2R,cAAI,EAAE,CAAC,gBAAD;AAFY,SAAD;AAR2C,OAb3C;AAwBb,KAxBF;;AAyBd,QAAI,KAAJ,EAAW,CA8BV;AACD;;;;;QAGMia,c;AACF;;;;;AAKA,8BAAYC,UAAZ,EAAwB3N,WAAxB,EAAqCmN,OAArC,EAA8C;AAAA;;AAC1C,aAAKQ,UAAL,GAAkBA,UAAlB;AACA,aAAK3N,WAAL,GAAmBA,WAAnB;AACA,aAAKmN,OAAL,GAAeA,OAAf;AACA,aAAKpS,EAAL,8BAA8BkS,gBAAgB,EAA9C;AACH;AACD;;;;;;;mCAGW;AAAA;;AACP,cAAI,CAAC,KAAKU,UAAV,EAAsB;AAClB,iBAAKA,UAAL;AAAmB;AAAkBP,4BAAgB,CAAC,KAAKpN,WAAN,EAAmB,KAAKmN,OAAL,CAAajD,WAAhC,CAArD;AACH;;AACD,cAAI,KAAKyD,UAAT,EAAqB;AACjBhpB,mBAAO,CAACC,OAAR,GAAkB/E,IAAlB;AAAwB;;;AAGxB,wBAAM;AACF;AACA,kBAAMT,SAAS,GAAG,OAAI,CAACuuB,UAAL,CAAgB9G,kBAAlC;;AACA,kBAAIznB,SAAS,IAAI,CAACA,SAAS,CAACslB,eAA5B,EAA6C;AACzCtlB,yBAAS,CAACslB,eAAV,GAA4B,OAAI,CAAC3J,EAAjC;AACH;AACJ,aATD;AAUH;AACJ;;;;;;AAEL2S,kBAAc,CAACta,IAAf,GAAsB,SAASwa,sBAAT,CAAgCta,CAAhC,EAAmC;AAAE,aAAO,KAAKA,CAAC,IAAIoa,cAAV,EAA0B,gEAAyB/G,YAAzB,EAAuC,CAAvC,CAA1B,EAAqE,gEAAyB,wDAAzB,CAArE,EAAkH,gEAAyB0C,SAAzB,CAAlH,CAAP;AAAgK,KAA3N;;AACAqE,kBAAc,CAAC3Y,IAAf,GAAsB,gEAAyB;AAAEjT,UAAI,EAAE4rB,cAAR;AAAwB1Y,eAAS,EAAE,CAAC,CAAC,EAAD,EAAK,kBAAL,EAAyB,EAAzB,CAAD,EAA+B,CAAC,EAAD,EAAK,gBAAL,EAAuB,EAAvB,CAA/B,CAAnC;AAA+FC,eAAS,EAAE,CAAC,CAAD,EAAI,kBAAJ,CAA1G;AAAmIwE,cAAQ,EAAE,CAA7I;AAAgJC,kBAAY,EAAE,SAASmU,2BAAT,CAAqCzU,EAArC,EAAyCC,GAAzC,EAA8C;AAAE,YAAID,EAAE,GAAG,CAAT,EAAY;AACjQ,uEAAsB,IAAtB,EAA4BC,GAAG,CAAC0B,EAAhC;AACH;AAAE,OAFwC;AAEtC7F,YAAM,EAAE;AAAE6F,UAAE,EAAE;AAAN,OAF8B;AAEhBlB,cAAQ,EAAE,CAAC,gBAAD;AAFM,KAAzB,CAAtB;AAGA;;AACA6T,kBAAc,CAACna,cAAf,GAAgC;AAAA,aAAM,CAClC;AAAEzR,YAAI,EAAE6kB,YAAR;AAAsBnT,kBAAU,EAAE,CAAC;AAAE1R,cAAI,EAAE;AAAR,SAAD;AAAlC,OADkC,EAElC;AAAEA,YAAI,EAAE;AAAR,OAFkC,EAGlC;AAAEA,YAAI,EAAEunB;AAAR,OAHkC,CAAN;AAAA,KAAhC;;AAKAqE,kBAAc,CAACvY,cAAf,GAAgC;AAC5B4F,QAAE,EAAE,CAAC;AAAEjZ,YAAI,EAAE;AAAR,OAAD;AADwB,KAAhC;AAGA;;AAAc,KAAC,YAAY;AAAE,sEAAyB4rB,cAAzB,EAAyC,CAAC;AAC/D5rB,YAAI,EAAE,uDADyD;AAE/D2R,YAAI,EAAE,CAAC;AACC2B,kBAAQ,EAAE,sCADX;AAECyE,kBAAQ,EAAE,gBAFX;AAGCxE,cAAI,EAAE;AACF,qBAAS,kBADP;AAEF,oBAAQ;AAFN;AAHP,SAAD;AAFyD,OAAD,CAAzC,EAUrB,YAAY;AAAE,eAAO,CAAC;AAAEvT,cAAI,EAAE6kB,YAAR;AAAsBnT,oBAAU,EAAE,CAAC;AACjD1R,gBAAI,EAAE;AAD2C,WAAD;AAAlC,SAAD,EAEX;AAAEA,cAAI,EAAE;AAAR,SAFW,EAEkB;AAAEA,cAAI,EAAEunB;AAAR,SAFlB,CAAP;AAEgD,OAZzC,EAY2C;AAAEtO,UAAE,EAAE,CAAC;AACnEjZ,cAAI,EAAE;AAD6D,SAAD;AAAN,OAZ3C;AAcb,KAdF;;AAed,QAAI,KAAJ,EAAW,CAkBV;AACD;;;;;QAGMgsB,gB;;;;AAENA,oBAAgB,CAAC1a,IAAjB,GAAwB,SAAS2a,wBAAT,CAAkCza,CAAlC,EAAqC;AAAE,aAAO,KAAKA,CAAC,IAAIwa,gBAAV,GAAP;AAAuC,KAAtG;;AACAA,oBAAgB,CAAC/Y,IAAjB,GAAwB,gEAAyB;AAAEjT,UAAI,EAAEgsB,gBAAR;AAA0B9Y,eAAS,EAAE,CAAC,CAAC,EAAD,EAAK,oBAAL,EAA2B,EAA3B,CAAD,EAAiC,CAAC,oBAAD,CAAjC,EAAyD,CAAC,EAAD,EAAK,kBAAL,EAAyB,EAAzB,CAAzD,CAArC;AAA6HC,eAAS,EAAE,CAAC,CAAD,EAAI,oBAAJ;AAAxI,KAAzB,CAAxB;AACA;;AAAc,KAAC,YAAY;AAAE,sEAAyB6Y,gBAAzB,EAA2C,CAAC;AACjEhsB,YAAI,EAAE,uDAD2D;AAEjE2R,YAAI,EAAE,CAAC;AACC2B,kBAAQ,gEADT;AAECC,cAAI,EAAE;AAAE,qBAAS;AAAX;AAFP,SAAD;AAF2D,OAAD,CAA3C,EAMrB,IANqB,EAMf,IANe;AAMP,KANR;AAOd;;;;;;QAIM2Y,gB;;;;AAENA,oBAAgB,CAAC5a,IAAjB,GAAwB,SAAS6a,wBAAT,CAAkC3a,CAAlC,EAAqC;AAAE,aAAO,KAAKA,CAAC,IAAI0a,gBAAV,GAAP;AAAuC,KAAtG;;AACAA,oBAAgB,CAACjZ,IAAjB,GAAwB,gEAAyB;AAAEjT,UAAI,EAAEksB,gBAAR;AAA0BhZ,eAAS,EAAE,CAAC,CAAC,EAAD,EAAK,oBAAL,EAA2B,EAA3B,CAAD,EAAiC,CAAC,oBAAD,CAAjC,EAAyD,CAAC,EAAD,EAAK,kBAAL,EAAyB,EAAzB,CAAzD,CAArC;AAA6HC,eAAS,EAAE,CAAC,CAAD,EAAI,oBAAJ;AAAxI,KAAzB,CAAxB;AACA;;AAAc,KAAC,YAAY;AAAE,sEAAyB+Y,gBAAzB,EAA2C,CAAC;AACjElsB,YAAI,EAAE,uDAD2D;AAEjE2R,YAAI,EAAE,CAAC;AACC2B,kBAAQ,gEADT;AAECC,cAAI,EAAE;AAAE,qBAAS;AAAX;AAFP,SAAD;AAF2D,OAAD,CAA3C,EAMrB,IANqB,EAMf,IANe;AAMP,KANR;AAOd;;;;;;;;AAMA,aAAS+X,gBAAT,CAA0Bx6B,OAA1B,EAAmCs3B,WAAnC,EAAgD;AAC5C;AACA,UAAI/pB,MAAM,GAAGvN,OAAO,CAAC0e,aAAR,CAAsB5D,aAAnC;;AACA,aAAOvN,MAAM,IAAI,CAACA,MAAM,CAACoE,SAAP,CAAiB3M,QAAjB,CAA0B,sBAA1B,CAAlB,EAAqE;AACjEuI,cAAM,GAAGA,MAAM,CAACuN,aAAhB;AACH;;AACD,aAAOvN,MAAM,GAAG+pB,WAAW,CAACh2B,IAAZ;AAAkB;;;;AAIlC,gBAAAg3B,MAAM;AAAA,eAAIA,MAAM,CAACnQ,EAAP;AAAe;AAAkB5a,cAAnB,CAA4B4a,EAA9C;AAAA,OAJU,CAAH,GAI8C,IAJ3D;AAKH;AAED;;;;;;;QAKMmT,e;;;;AAENA,mBAAe,CAAC1R,IAAhB,GAAuB,+DAAwB;AAAE1a,UAAI,EAAEosB;AAAR,KAAxB,CAAvB;AACAA,mBAAe,CAACzR,IAAhB,GAAuB,+DAAwB;AAAE9I,aAAO,EAAE,SAASwa,uBAAT,CAAiC7a,CAAjC,EAAoC;AAAE,eAAO,KAAKA,CAAC,IAAI4a,eAAV,GAAP;AAAsC,OAAvF;AAAyFhU,eAAS,EAAE,CAC3ImP,SAD2I,EAE3IH,mCAF2I,CAApG;AAGxCvM,aAAO,EAAE,CAAC,CACL,kEADK,EAEL,gEAFK,EAGL,sEAHK,CAAD,EAKR,sEALQ;AAH+B,KAAxB,CAAvB;;AASA,KAAC,YAAY;AAAE,OAAC,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD,iEAA0BsR,eAA1B,EAA2C;AAAErR,oBAAY,EAAE,wBAAY;AAAE,iBAAO,CAACmH,kBAAD,EAC1IkJ,cAD0I,EAE1IQ,cAF0I,EAG1IM,gBAH0I,EAI1IF,gBAJ0I,CAAP;AAI/G,SAJiF;AAI/EnR,eAAO,EAAE,mBAAY;AAAE,iBAAO,CAAC,kEAAD,EACpD,gEADoD,EAEpD,sEAFoD,CAAP;AAE1B,SANkF;AAMhFG,eAAO,EAAE,mBAAY;AAAE,iBAAO,CAACkH,kBAAD,EACnDkJ,cADmD,EAEnDQ,cAFmD,EAGnDI,gBAHmD,EAInDE,gBAJmD,EAKnD,sEALmD,CAAP;AAKzB;AAXkF,OAA3C,CAAnD;AAWkB,KAXjC;AAYA;;;AAAc,KAAC,YAAY;AAAE,sEAAyBE,eAAzB,EAA0C,CAAC;AAChEpsB,YAAI,EAAE,sDAD0D;AAEhE2R,YAAI,EAAE,CAAC;AACCkJ,iBAAO,EAAE,CACL,kEADK,EAEL,gEAFK,EAGL,sEAHK,CADV;AAMCG,iBAAO,EAAE,CACLkH,kBADK,EAELkJ,cAFK,EAGLQ,cAHK,EAILI,gBAJK,EAKLE,gBALK,EAML,sEANK,CANV;AAcCnR,sBAAY,EAAE,CACVmH,kBADU,EAEVkJ,cAFU,EAGVQ,cAHU,EAIVM,gBAJU,EAKVF,gBALU,CAdf;AAqBC5T,mBAAS,EAAE,CACPmP,SADO,EAEPH,mCAFO,CArBZ;AAyBCkF,yBAAe,EAAE,CAACpK,kBAAD;AAzBlB,SAAD;AAF0D,OAAD,CAA1C,EA6BrB,IA7BqB,EA6Bf,IA7Be;AA6BP,KA7BR;AA+Bd;;;;;;AAMA;;;AAMA;;;;;;;;;;;;;;;;;;ACtuDA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACCI;;AACI;;AAAuC;;AAAc;;AACzD;;;;;;AAFgD;;;;QDevCqK,kB;AAIX,kCAAmBC,YAAnB,EAAsDpD,MAAtD,EAAyE;AAAA;;AAAtD,aAAAoD,YAAA,GAAAA,YAAA;AAAmC,aAAApD,MAAA,GAAAA,MAAA;AAAqB;;;;mCAEhE;AAAA;;AACT,eAAKqD,GAAL,GAAW,KAAKD,YAAL,CACRE,aADQ,GAERhwB,SAFQ,CAEE,UAAAiwB,MAAM;AAAA,mBAAK,OAAI,CAACA,MAAL,GAAcA,MAAnB;AAAA,WAFR,CAAX;AAGD;;;sCAEa;AACZ,eAAKF,GAAL,CAASjwB,WAAT;AACD;;;6BAEIvH,K,EAA8B;AACjC,yFAAgB,KAAK03B,MAArB,EAA6B13B,KAAK,CAAC+L,aAAnC,EAAkD/L,KAAK,CAAC2L,YAAxD;AACA,eAAK4rB,YAAL,CAAkBI,UAAlB,CAA6B,KAAKD,MAAlC;AACD;;;0CACc;AAAA;;AACb,cAAM9D,SAAS,GAAG,KAAKO,MAAL,CAAYyD,IAAZ,CAAiB,oFAAjB,EAAuC;AACvDv5B,iBAAK,EAAE,OADgD;AAEvDqgB,gBAAI,EAAE;AAFiD,WAAvC,CAAlB;AAIAkV,mBAAS,CAACG,WAAV,GAAwBtsB,SAAxB,CAAkC,UAAAowB,MAAM,EAAI;AAC1C,gBAAIA,MAAJ,EAAY;AACV,qBAAI,CAACN,YAAL,CAAkBO,WAAlB,CAA8B;AAC5BC,qBAAK,EAAEF,MADqB;AAE5BG,wBAAQ,EAAE,OAAI,CAACN,MAAL,CAAYp0B;AAFM,eAA9B;AAID;AACF,WAPD;AAQD;;;;;;;uBAjCUg0B,kB,EAAkB,4H,EAAA,mI;AAAA,K;;;YAAlBA,kB;AAAkB,qC;AAAA,c;AAAA,a;AAAA,4U;AAAA;AAAA;AChB/B;;AAAoE;AAAA,mBAAsB,IAAArrB,IAAA,QAAtB;AAAkC,WAAlC;;AAChE;;AAIA;;AACI;;AAAyD;AAAA,mBAAS,IAAAgsB,eAAA,EAAT;AAA0B,WAA1B;;AAC3D;;AACF;;AACA;;AACJ;;;;AATuB;;AAAA;;;;;;;;;sEDeVX,kB,EAAkB;cAL9B,uDAK8B;eALpB;AACTjZ,kBAAQ,EAAE,gBADD;AAET6Z,qBAAW,EAAE,6BAFJ;AAGTC,mBAAS,EAAE,CAAC,6BAAD;AAHF,S;AAKoB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QENlBC,Y;AACX,4BAAoBC,MAApB,EAAqDC,EAArD,EAA2E;AAAA;;AAAvD,aAAAD,MAAA,GAAAA,MAAA;AAAiC,aAAAC,EAAA,GAAAA,EAAA;AAAwB;AAE7E;;;;;;;oCAGkB5Z,I,EAAa;;;;;;;;AAChB,2BAAM,KAAK2Z,MAAL,CAAYE,WAAlB;;;AAAPC,wB;qDACC,KAAKF,EAAL,CAAQG,UAAR,CAAmB,QAAnB,EAA6BtwB,GAA7B,CAAiC,MAAD,OAAC,CAAD,kBAClCuW,IADkC,CAAC,EAC/B;AACPga,yBAAG,EAAEF,IAAI,CAACE,GADH;AAEPC,2BAAK,EAAE,CAAC;AAAEC,mCAAW,EAAE,QAAf;AAAyBC,6BAAK,EAAE;AAAhC,uBAAD;AAFA,qBAD+B,CAAjC,C;;;;;;;;;AAKR;AAED;;;;;;oCAGYC,O,EAAiB;AAC3B,iBAAO,KAAKR,EAAL,CACJG,UADI,CACO,QADP,EAEJM,GAFI,CAEAD,OAFA,aAAP;AAID;AAED;;;;;;oCAGYA,O,EAAiBH,K,EAAe;AAC1C,iBAAO,KAAKL,EAAL,CACJG,UADI,CACO,QADP,EAEJM,GAFI,CAEAD,OAFA,EAGJE,MAHI,CAGG;AAAEL,iBAAK,EAALA;AAAF,WAHH,CAAP;AAID;AAED;;;;;;mCAGWG,O,EAAiBG,I,EAAY;AACtC,iBAAO,KAAKX,EAAL,CACJG,UADI,CACO,QADP,EAEJM,GAFI,CAEAD,OAFA,EAGJE,MAHI,CAGG;AACNL,iBAAK,EAAE,uDAAmBO,UAAnB,CAA8BC,WAA9B,CAA0CF,IAA1C;AADD,WAHH,CAAP;AAMD;AAED;;;;;;wCAGgB;AAAA;;AACd,iBAAO,KAAKZ,MAAL,CAAYe,SAAZ,CAAsB/jB,IAAtB,CACL,iEAAU,UAAAmjB,IAAI,EAAI;AAChB,gBAAIA,IAAJ,EAAU;AACR,qBAAO,OAAI,CAACF,EAAL,CACJG,UADI,CACc,QADd,EACwB,UAAAjX,GAAG;AAAA,uBAC9BA,GAAG,CAAC6X,KAAJ,CAAU,KAAV,EAAiB,IAAjB,EAAuBb,IAAI,CAACE,GAA5B,EAAiCY,OAAjC,CAAyC,UAAzC,CAD8B;AAAA,eAD3B,EAIJC,YAJI,CAIS;AAAEC,uBAAO,EAAE;AAAX,eAJT,CAAP;AAKD,aAND,MAMO;AACL,qBAAO,EAAP;AACD;AACF,WAVD,CADK,CAAP;AAaD;AAED;;;;;;mCAGW9B,M,EAAiB;AAC1B,cAAMY,EAAE,GAAG,wDAAX;AACA,cAAMmB,KAAK,GAAGnB,EAAE,CAACmB,KAAH,EAAd;AACA,cAAMC,IAAI,GAAGhC,MAAM,CAAC/5B,GAAP,CAAW,UAAA+b,CAAC;AAAA,mBAAI4e,EAAE,CAACG,UAAH,CAAc,QAAd,EAAwBM,GAAxB,CAA4Brf,CAAC,CAACsK,EAA9B,CAAJ;AAAA,WAAZ,CAAb;AACA0V,cAAI,CAAC75B,OAAL,CAAa,UAAC2hB,GAAD,EAAMmY,GAAN;AAAA,mBAAcF,KAAK,CAACT,MAAN,CAAaxX,GAAb,EAAkB;AAAEwW,sBAAQ,EAAE2B;AAAZ,aAAlB,CAAd;AAAA,WAAb;AACAF,eAAK,CAACG,MAAN;AACD;;;;;;;uBA3EUxB,Y,EAAY,0H,EAAA,gI;AAAA,K;;;aAAZA,Y;AAAY,eAAZA,YAAY,K;AAAA,kBAFX;;;;;sEAEDA,Y,EAAY;cAHxB,wDAGwB;eAHb;AACVtb,oBAAU,EAAE;AADF,S;AAGa,Q;;;;;;;;;;;;;;;;;;;;;;;;ACVzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACaQ;;AAAgF;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAC5E;;AAAkC;;AAAuB;;AAC7D;;;;;;AADc;;AAAA;;AAAwB;;AAAA;;;;;;QDDjC+c,c;AAGX,8BAAoBtC,YAApB,EAAwDpD,MAAxD,EAA2E;AAAA;;AAAvD,aAAAoD,YAAA,GAAAA,YAAA;AAAoC,aAAApD,MAAA,GAAAA,MAAA;AAAqB;;;;iCAEpEn0B,K,EAA8B;AACrC,yFAAgB,KAAK85B,KAAL,CAAWnB,KAA3B,EAAkC34B,KAAK,CAAC+L,aAAxC,EAAuD/L,KAAK,CAAC2L,YAA7D;AACA,eAAK4rB,YAAL,CAAkBwC,WAAlB,CAA8B,KAAKD,KAAL,CAAW9V,EAAzC,EAA6C,KAAK8V,KAAL,CAAWnB,KAAxD;AACD;;;mCAGUM,I,EAAaU,G,EAAY;AAAA;;AAClC,cAAMK,OAAO,GAAG;AAAEnB,iBAAK,EAAE;AAAT,WAAhB;AACA,cAAMjF,SAAS,GAAG,KAAKO,MAAL,CAAYyD,IAAZ,CAAiB,kFAAjB,EAAsC;AACtDv5B,iBAAK,EAAE,OAD+C;AAEtDqgB,gBAAI,EAAEua,IAAI,GACN;AAAEA,kBAAI,EAAE,MAAF,OAAE,CAAF,EAAE,EAAKA,IAAL,CAAR;AAAqBgB,mBAAK,EAAE,KAA5B;AAAmCnB,qBAAO,EAAE,KAAKgB,KAAL,CAAW9V,EAAvD;AAA2D2V,iBAAG,EAAHA;AAA3D,aADM,GAEN;AAAEV,kBAAI,EAAEe,OAAR;AAAiBC,mBAAK,EAAE;AAAxB;AAJkD,WAAtC,CAAlB;AAOArG,mBAAS,CAACG,WAAV,GAAwBtsB,SAAxB,CAAkC,UAAAowB,MAAM,EAAI;AAC1C,gBAAIA,MAAJ,EAAY;AACV,kBAAIA,MAAM,CAACoC,KAAX,EAAkB;AAChB,uBAAI,CAAC1C,YAAL,CAAkBwC,WAAlB,CAA8B,OAAI,CAACD,KAAL,CAAW9V,EAAzC,+BACK,OAAI,CAAC8V,KAAL,CAAWnB,KADhB,IAEEd,MAAM,CAACoB,IAFT;AAID,eALD,MAKO;AACL,oBAAMD,MAAM,GAAG,OAAI,CAACc,KAAL,CAAWnB,KAA1B;AACAK,sBAAM,CAAC1lB,MAAP,CAAcukB,MAAM,CAAC8B,GAArB,EAA0B,CAA1B,EAA6B9B,MAAM,CAACoB,IAApC;;AACA,uBAAI,CAAC1B,YAAL,CAAkBwC,WAAlB,CAA8B,OAAI,CAACD,KAAL,CAAW9V,EAAzC,EAA6C,OAAI,CAAC8V,KAAL,CAAWnB,KAAxD;AACD;AACF;AACF,WAbD;AAcD;;;uCAEc;AACb,eAAKpB,YAAL,CAAkB2C,WAAlB,CAA8B,KAAKJ,KAAL,CAAW9V,EAAzC;AACD;;;;;;;uBAtCU6V,c,EAAc,4H,EAAA,mI;AAAA,K;;;YAAdA,c;AAAc,gC;AAAA;AAAA;AAAA,O;AAAA,6B;AAAA,e;AAAA,a;AAAA,iU;AAAA;AAAA;;;ACb3B;;AACI;;AAEI;;AACA;;AACI;;AACJ;;AACA;;AACI;;AACJ;;AACJ;;AAEA;;AAAiE;AAAA,mBAAsB,IAAAM,QAAA,QAAtB;AAAsC,WAAtC;;AAC7D;;AAIA;;AAA2B;AAAA,mBAAS,IAAAC,UAAA,EAAT;AAAqB,WAArB;;AAC3B;;AAAU;;AAAG;;AACf;;AAEE;;AAAmB;AAAA,mBAAU,IAAAC,YAAA,EAAV;AAAwB,WAAxB;;AAA0B;;AACjD;;AACJ;;;;AAlBY;;AAAA;;AAGA;;AAAA;;AAK4B;;AAAA;;;;;;;;;sEDA3BR,c,EAAc;cAL1B,uDAK0B;eALhB;AACTxb,kBAAQ,EAAE,WADD;AAET6Z,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKgB,Q;;;;;;;;gBACxB;;;;;;;;;;;;;;;;;;;;AEdH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAsBamC,oB;AACX,oCACS1G,SADT,EAEkClV,IAFlC,EAE2C;AAAA;;AADlC,aAAAkV,SAAA,GAAAA,SAAA;AACyB,aAAAlV,IAAA,GAAAA,IAAA;AAC9B;;;;oCAEK;AACP,eAAKkV,SAAL,CAAelD,KAAf;AACD;;;;;;;uBARU4J,oB,EAAoB,sI,EAAA,gEAGrB,wEAHqB,C;AAGN,K;;;YAHdA,oB;AAAoB,uC;AAAA,e;AAAA,a;AAAA,2Q;AAAA;AAAA;AAhB7B;;AAAqB;;AAAK;;AAC1B;;AACA;;AAAG;;AAA8B;;AAC/B;;AACE;;AAAoC;AAAA;AAAA;;AAApC;;AACF;;AACF;;AACA;;AACE;;AAAmB;AAAA,mBAAS,IAAAC,SAAA,EAAT;AAAoB,WAApB;;AAAsB;;AAAM;;AAC/C;;AACE;;AACF;;AACF;;;;AARwC;;AAAA;;AAKnB;;AAAA;;;;;;;;;sEAOZD,oB,EAAoB;cAnBhC,uDAmBgC;eAnBtB;AACTjc,kBAAQ,EAAE,kBADD;AAETxX,kBAAQ,0dAFC;AAiBT+O,gBAAM,EAAE;AAjBC,S;AAmBsB,Q;;;;;;kBAG5B,oD;mBAAO,wE;;;;;;;;;;;;;;;;;;;;;ACzBZ;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;AAqBM;;AACE;;AAA0B;;AAExB;;AACJ;;;;;;AAJoD;;AACxC;;AAAA;;AAAgB;;AAAA;;;;QAerB4kB,mB;AAIX,mCACS5G,SADT,EAEU6G,EAFV,EAGkC/b,IAHlC,EAG2C;AAAA;;AAFlC,aAAAkV,SAAA,GAAAA,SAAA;AACC,aAAA6G,EAAA,GAAAA,EAAA;AACwB,aAAA/b,IAAA,GAAAA,IAAA;AALlC,aAAAgc,YAAA,GAAe,CAAC,QAAD,EAAW,MAAX,EAAmB,OAAnB,EAA4B,QAA5B,EAAsC,KAAtC,EAA6C,MAA7C,CAAf;AAMI;;;;oCAEK;AACP,eAAK9G,SAAL,CAAelD,KAAf;AACD;;;2CAEkB;AACjB,eAAK+J,EAAL,CAAQE,UAAR,CAAmB,KAAKjc,IAAL,CAAUoa,OAA7B,EAAsC,KAAKpa,IAAL,CAAUua,IAAhD;AACA,eAAKrF,SAAL,CAAelD,KAAf;AACD;;;;;;;uBAjBU8J,mB,EAAmB,sI,EAAA,4H,EAAA,gEAOpB,wEAPoB,C;AAOL,K;;;YAPdA,mB;AAAmB,sC;AAAA,e;AAAA,a;AAAA,2Y;AAAA;AAAA;AA9B9B;;AAAqB;;AAAI;;AACzB;;AACE;;AACE;;AAGE;AAAA;AAAA;;AACD;;AACH;;AACA;;AACA;;AAEE;AAAA;AAAA;;AAEA;;AAKF;;AACF;;AACA;;AACE;;AACE;;AACF;;AAEF;;;;AApBM;;AAAA;;AAMF;;AAAA;;AAEmB;;AAAA;;AAQF;;AAAA;;AACjB;;AAAA;;;;;;;;;sEAOOA,mB,EAAmB;cAjC/B,uDAiC+B;eAjCrB;AACTnc,kBAAQ,EAAE,iBADD;AAETxX,kBAAQ,40BAFC;AA+BTsxB,mBAAS,EAAE,CAAC,cAAD;AA/BF,S;AAiCqB,Q;;;;;;;;kBAO3B,oD;mBAAO,wE;;;;;;;;;;;;;;;;;;;;;AC5CZ;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAKA,QAAMyC,MAAM,GAAW,CAAC;AAACC,UAAI,EAAC,EAAN;AAASC,eAAS,EAAE;AAApB,KAAD,CAAvB;;QAMaC,mB;;;;;YAAAA;;;;yBAAAA,mB;AAAmB,O;AAAA,gBAHrB,CAAC,6DAAaC,QAAb,CAAsBJ,MAAtB,CAAD,CAGqB,EAFpB,4DAEoB;;;;0HAAnBG,mB,EAAmB;AAAA;AAAA,kBAFpB,4DAEoB;AAAA,O;AAFR,K;;;;;sEAEXA,mB,EAAmB;cAJ/B,sDAI+B;eAJtB;AACRnV,iBAAO,EAAE,CAAC,6DAAaoV,QAAb,CAAsBJ,MAAtB,CAAD,CADD;AAER7U,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAIsB,Q;;;;;;;;;;;;;;;;;;ACXhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QA4BakV,Y;;;;;YAAAA;;;;yBAAAA,Y;AAAY,O;AAAA,gBAXd,CACP,4DADO,EAEP,0EAFO,EAGP,wEAHO,EAIP,0DAJO,EAKP,qEALO,EAMP,wEANO,EAOP,qFAPO,CAWc;;;;0HAAZA,Y,EAAY;AAAA,uBAZR,mFAYQ,EAZY,qEAYZ,EAZ4B,qFAY5B,EAZkD,mFAYlD;AAZqE,kBAE1F,4DAF0F,EAG1F,0EAH0F,EAI1F,wEAJ0F,EAK1F,0DAL0F,EAM1F,qEAN0F,EAO1F,wEAP0F,EAQ1F,qFAR0F;AAYrE,O;AAJA,K;;;;;sEAIZA,Y,EAAY;cAbxB,sDAawB;eAbf;AACRnV,sBAAY,EAAE,CAAC,mFAAD,EAAqB,qEAArB,EAAqC,qFAArC,EAA2D,mFAA3D,CADN;AAERF,iBAAO,EAAE,CACP,4DADO,EAEP,0EAFO,EAGP,wEAHO,EAIP,0DAJO,EAKP,qEALO,EAMP,wEANO,EAOP,qFAPO,CAFD;AAWRyR,yBAAe,EAAE,CAAC,qFAAD,EAAuB,mFAAvB;AAXT,S;AAae,Q","file":"kanban-kanban-module-es5.js","sourcesContent":["import { Injectable, NgZone, Inject, ɵɵdefineInjectable, ɵɵinject, InjectionToken, Directive, ElementRef, Optional, Input, TemplateRef, EventEmitter, isDevMode, SkipSelf, ViewContainerRef, ChangeDetectorRef, ContentChildren, ContentChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, map, take, startWith, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-styling.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction DragCSSStyleDeclaration() { }\nif (false) {\n    /** @type {?} */\n    DragCSSStyleDeclaration.prototype.webkitUserDrag;\n    /** @type {?} */\n    DragCSSStyleDeclaration.prototype.MozUserSelect;\n}\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * \\@docs-private\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = (/** @type {?} */ (source[key]));\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * \\@docs-private\n * @param {?} element Element on which to toggle the drag interactions.\n * @param {?} enable Whether the drag interactions should be enabled.\n * @return {?}\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    /** @type {?} */\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/transition-duration.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Parses a CSS time value to milliseconds.\n * @param {?} value\n * @return {?}\n */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    /** @type {?} */\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/**\n * Gets the transform transition duration, including the delay, of an element in milliseconds.\n * @param {?} element\n * @return {?}\n */\nfunction getTransformTransitionDurationInMs(element) {\n    /** @type {?} */\n    const computedStyle = getComputedStyle(element);\n    /** @type {?} */\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    /** @type {?} */\n    const property = transitionedProperties.find((/**\n     * @param {?} prop\n     * @return {?}\n     */\n    prop => prop === 'transform' || prop === 'all'));\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    /** @type {?} */\n    const propertyIndex = transitionedProperties.indexOf(property);\n    /** @type {?} */\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    /** @type {?} */\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/**\n * Parses out multiple values from a computed style into an array.\n * @param {?} computedStyle\n * @param {?} name\n * @return {?}\n */\nfunction parseCssPropertyValue(computedStyle, name) {\n    /** @type {?} */\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map((/**\n     * @param {?} part\n     * @return {?}\n     */\n    part => part.trim()));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/client-rect.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets a mutable version of an element's bounding `ClientRect`.\n * @param {?} element\n * @return {?}\n */\nfunction getMutableClientRect(element) {\n    /** @type {?} */\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param {?} clientRect ClientRect that is being checked.\n * @param {?} x Coordinates along the X axis.\n * @param {?} y Coordinates along the Y axis.\n * @return {?}\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param {?} clientRect `ClientRect` that should be updated.\n * @param {?} top Amount to add to the `top` position.\n * @param {?} left Amount to add to the `left` position.\n * @return {?}\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param {?} rect ClientRect to check against.\n * @param {?} threshold Threshold around the ClientRect.\n * @param {?} pointerX Coordinates along the X axis.\n * @param {?} pointerY Coordinates along the Y axis.\n * @return {?}\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    /** @type {?} */\n    const xThreshold = width * threshold;\n    /** @type {?} */\n    const yThreshold = height * threshold;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/parent-position-tracker.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Object holding the scroll position of something.\n * @record\n */\nfunction ScrollPosition() { }\nif (false) {\n    /** @type {?} */\n    ScrollPosition.prototype.top;\n    /** @type {?} */\n    ScrollPosition.prototype.left;\n}\n/**\n * Keeps track of the scroll position and dimensions of the parents of an element.\n */\nclass ParentPositionTracker {\n    /**\n     * @param {?} _document\n     * @param {?} _viewportRuler\n     */\n    constructor(_document, _viewportRuler) {\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        /**\n         * Cached positions of the scrollable parent elements.\n         */\n        this.positions = new Map();\n    }\n    /**\n     * Clears the cached positions.\n     * @return {?}\n     */\n    clear() {\n        this.positions.clear();\n    }\n    /**\n     * Caches the positions. Should be called at the beginning of a drag sequence.\n     * @param {?} elements\n     * @return {?}\n     */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n        });\n        elements.forEach((/**\n         * @param {?} element\n         * @return {?}\n         */\n        element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element)\n            });\n        }));\n    }\n    /**\n     * Handles scrolling while a drag is taking place.\n     * @param {?} event\n     * @return {?}\n     */\n    handleScroll(event) {\n        /** @type {?} */\n        const target = (/** @type {?} */ (event.target));\n        /** @type {?} */\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support\n        // `contains` on the `document`.\n        /** @type {?} */\n        const scrolledParentNode = target === this._document ? target.documentElement : target;\n        /** @type {?} */\n        const scrollPosition = cachedPosition.scrollPosition;\n        /** @type {?} */\n        let newTop;\n        /** @type {?} */\n        let newLeft;\n        if (target === this._document) {\n            /** @type {?} */\n            const viewportScrollPosition = (/** @type {?} */ (this._viewportRuler)).getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = ((/** @type {?} */ (target))).scrollTop;\n            newLeft = ((/** @type {?} */ (target))).scrollLeft;\n        }\n        /** @type {?} */\n        const topDifference = scrollPosition.top - newTop;\n        /** @type {?} */\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((/**\n         * @param {?} position\n         * @param {?} node\n         * @return {?}\n         */\n        (position, node) => {\n            if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        }));\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n}\nif (false) {\n    /**\n     * Cached positions of the scrollable parent elements.\n     * @type {?}\n     */\n    ParentPositionTracker.prototype.positions;\n    /**\n     * @type {?}\n     * @private\n     */\n    ParentPositionTracker.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    ParentPositionTracker.prototype._viewportRuler;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Object that can be used to configure the behavior of DragRef.\n * @record\n */\nfunction DragRefConfig() { }\nif (false) {\n    /**\n     * Minimum amount of pixels that the user should\n     * drag, before the CDK initiates a drag sequence.\n     * @type {?}\n     */\n    DragRefConfig.prototype.dragStartThreshold;\n    /**\n     * Amount the pixels the user should drag before the CDK\n     * considers them to have changed the drag direction.\n     * @type {?}\n     */\n    DragRefConfig.prototype.pointerDirectionChangeThreshold;\n    /**\n     * `z-index` for the absolutely-positioned elements that are created by the drag item.\n     * @type {?|undefined}\n     */\n    DragRefConfig.prototype.zIndex;\n}\n/**\n * Options that can be used to bind a passive event listener.\n * @type {?}\n */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Options that can be used to bind an active event listener.\n * @type {?}\n */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n * @type {?}\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Internal compile-time-only representation of a `DragRef`.\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\n * \\@docs-private\n * @record\n */\nfunction DragRefInternal() { }\n/**\n * Template that can be used to create a drag helper element (e.g. a preview or a placeholder).\n * @record\n * @template T\n */\nfunction DragHelperTemplate() { }\nif (false) {\n    /** @type {?} */\n    DragHelperTemplate.prototype.template;\n    /** @type {?} */\n    DragHelperTemplate.prototype.viewContainer;\n    /** @type {?} */\n    DragHelperTemplate.prototype.context;\n}\n/**\n * Template that can be used to create a drag preview element.\n * @record\n * @template T\n */\nfunction DragPreviewTemplate() { }\nif (false) {\n    /** @type {?|undefined} */\n    DragPreviewTemplate.prototype.matchSize;\n}\n/**\n * Point on the page or within an element.\n * @record\n */\nfunction Point() { }\nif (false) {\n    /** @type {?} */\n    Point.prototype.x;\n    /** @type {?} */\n    Point.prototype.y;\n}\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * @template T\n */\nclass DragRef {\n    /**\n     * @param {?} element\n     * @param {?} _config\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /**\n         * CSS `transform` that is applied to the element while it's being dragged.\n         */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Emits when the item is being moved.\n         */\n        this._moveEvents = new Subject();\n        /**\n         * Subscription to pointer movement events.\n         */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the event that is dispatched when the user lifts their pointer.\n         */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being scrolled.\n         */\n        this._scrollSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being resized.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Cached reference to the boundary element.\n         */\n        this._boundaryElement = null;\n        /**\n         * Whether the native dragging interactions have been enabled on the root element.\n         */\n        this._nativeInteractionsEnabled = true;\n        /**\n         * Elements that can be used to drag the draggable item.\n         */\n        this._handles = [];\n        /**\n         * Registered handles that are currently disabled.\n         */\n        this._disabledHandles = new Set();\n        /**\n         * Layout direction of the item.\n         */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /**\n         * Emits as the drag sequence is being prepared.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new Subject();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new Subject();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new Subject();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents.asObservable();\n        /**\n         * Handler for the `mousedown`/`touchstart` events.\n         */\n        this._pointerDown = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                /** @type {?} */\n                const targetHandle = this._handles.find((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => {\n                    /** @type {?} */\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains((/** @type {?} */ (target))));\n                }));\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        });\n        /**\n         * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n         */\n        this._pointerMove = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            // Prevent the default action as early as possible in order to block\n            // native actions like dragging the selected text or images with the mouse.\n            event.preventDefault();\n            /** @type {?} */\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                /** @type {?} */\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                /** @type {?} */\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                /** @type {?} */\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    /** @type {?} */\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!this._dropContainer || !this._dropContainer.isDragging()) {\n                        this._hasStartedDragging = true;\n                        this._ngZone.run((/**\n                         * @return {?}\n                         */\n                        () => this._startDragSequence(event)));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            /** @type {?} */\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition);\n            }\n            else {\n                /** @type {?} */\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    /** @type {?} */\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                }));\n            }\n        });\n        /**\n         * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n         */\n        this._pointerUp = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this._endDragSequence(event);\n        });\n        this.withRootElement(element);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     * @return {?}\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /**\n     * Registers the handles that can be used to drag the element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} handles\n     * @return {THIS}\n     */\n    withHandles(handles) {\n        (/** @type {?} */ (this))._handles = handles.map((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => coerceElement(handle)));\n        (/** @type {?} */ (this))._handles.forEach((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => toggleNativeDragInteractions(handle, false)));\n        (/** @type {?} */ (this))._toggleNativeDragInteractions();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the preview.\n     * @return {THIS}\n     */\n    withPreviewTemplate(template) {\n        (/** @type {?} */ (this))._previewTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the placeholder.\n     * @return {THIS}\n     */\n    withPlaceholderTemplate(template) {\n        (/** @type {?} */ (this))._placeholderTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} rootElement\n     * @return {THIS}\n     */\n    withRootElement(rootElement) {\n        /** @type {?} */\n        const element = coerceElement(rootElement);\n        if (element !== (/** @type {?} */ (this))._rootElement) {\n            if ((/** @type {?} */ (this))._rootElement) {\n                (/** @type {?} */ (this))._removeRootElementListeners((/** @type {?} */ (this))._rootElement);\n            }\n            (/** @type {?} */ (this))._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                element.addEventListener('mousedown', (/** @type {?} */ (this))._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', (/** @type {?} */ (this))._pointerDown, passiveEventListenerOptions);\n            }));\n            (/** @type {?} */ (this))._initialTransform = undefined;\n            (/** @type {?} */ (this))._rootElement = element;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} boundaryElement\n     * @return {THIS}\n     */\n    withBoundaryElement(boundaryElement) {\n        (/** @type {?} */ (this))._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        (/** @type {?} */ (this))._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            (/** @type {?} */ (this))._resizeSubscription = (/** @type {?} */ (this))._viewportRuler\n                .change(10)\n                .subscribe((/**\n             * @return {?}\n             */\n            () => (/** @type {?} */ (this))._containInsideBoundaryOnResize()));\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Removes the dragging functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement = this._rootElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = (/** @type {?} */ (null));\n    }\n    /**\n     * Checks whether the element is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param {?} handle Handle element that should be disabled.\n     * @return {?}\n     */\n    disableHandle(handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param {?} handle Handle element to be enabled.\n     * @return {?}\n     */\n    enableHandle(handle) {\n        this._disabledHandles.delete(handle);\n    }\n    /**\n     * Sets the layout direction of the draggable item.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the container that the item is part of.\n     * @param {?} container\n     * @return {?}\n     */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        /** @type {?} */\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} value New position to be set.\n     * @return {THIS}\n     */\n    setFreeDragPosition(value) {\n        (/** @type {?} */ (this))._activeTransform = { x: 0, y: 0 };\n        (/** @type {?} */ (this))._passiveTransform.x = value.x;\n        (/** @type {?} */ (this))._passiveTransform.y = value.y;\n        if (!(/** @type {?} */ (this))._dropContainer) {\n            (/** @type {?} */ (this))._applyRootElementTransform(value.x, value.y);\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Updates the item's sort order based on the last-known pointer position.\n     * @return {?}\n     */\n    _sortFromLastPointerPosition() {\n        /** @type {?} */\n        const position = this._pointerPositionAtLastDirectionChange;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position));\n        }\n    }\n    /**\n     * Unsubscribes from the global subscriptions.\n     * @private\n     * @return {?}\n     */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /**\n     * Destroys the preview element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Destroys the placeholder element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @private\n     * @param {?} event Browser event object that ended the sequence.\n     * @return {?}\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then((/**\n             * @return {?}\n             */\n            () => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            }));\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            }));\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /**\n     * Starts the dragging sequence.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _startDragSequence(event) {\n        // Emit the event on the item before the one on the container.\n        this.started.next({ source: this });\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        /** @type {?} */\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            /** @type {?} */\n            const element = this._rootElement;\n            /** @type {?} */\n            const parent = (/** @type {?} */ (element.parentNode));\n            /** @type {?} */\n            const preview = this._preview = this._createPreviewElement();\n            /** @type {?} */\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            /** @type {?} */\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            element.style.display = 'none';\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document).appendChild(preview);\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this._initialContainer = this._initialIndex = (/** @type {?} */ (undefined));\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @private\n     * @param {?} referenceElement Element that started the drag sequence.\n     * @param {?} event Browser event object that started the sequence.\n     * @return {?}\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        /** @type {?} */\n        const isDragging = this.isDragging();\n        /** @type {?} */\n        const isTouchSequence = isTouchEvent(event);\n        /** @type {?} */\n        const isAuxiliaryMouseButton = !isTouchSequence && ((/** @type {?} */ (event))).button !== 0;\n        /** @type {?} */\n        const rootElement = this._rootElement;\n        /** @type {?} */\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && ((/** @type {?} */ (event.target))).draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.subscribe((/**\n         * @param {?} scrollEvent\n         * @return {?}\n         */\n        scrollEvent => {\n            this._updateOnScroll(scrollEvent);\n        }));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        /** @type {?} */\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        /** @type {?} */\n        const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /**\n     * Cleans up the DOM artifacts that were added to facilitate the element being dragged.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        this._rootElement.style.display = '';\n        (/** @type {?} */ (this._anchor.parentNode)).replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const container = (/** @type {?} */ (this._dropContainer));\n            /** @type {?} */\n            const currentIndex = container.getItemIndex(this);\n            /** @type {?} */\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            /** @type {?} */\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            /** @type {?} */\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance, this._initialIndex);\n            this._dropContainer = this._initialContainer;\n        }));\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     * @private\n     * @param {?} __0\n     * @return {?}\n     */\n    _updateActiveDropContainer({ x, y }) {\n        // Drop container that draggable has been moved into.\n        /** @type {?} */\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: (/** @type {?} */ (this._dropContainer)) });\n                (/** @type {?} */ (this._dropContainer)).exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = (/** @type {?} */ (newContainer));\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled ? this._initialIndex : undefined);\n                this.entered.next({\n                    item: this,\n                    container: (/** @type {?} */ (newContainer)),\n                    currentIndex: (/** @type {?} */ (newContainer)).getItemIndex(this)\n                });\n            }));\n        }\n        (/** @type {?} */ (this._dropContainer))._startScrollingIfNecessary(x, y);\n        (/** @type {?} */ (this._dropContainer))._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     * @private\n     * @return {?}\n     */\n    _createPreviewElement() {\n        /** @type {?} */\n        const previewConfig = this._previewTemplate;\n        /** @type {?} */\n        const previewClass = this.previewClass;\n        /** @type {?} */\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        /** @type {?} */\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            /** @type {?} */\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n            /** @type {?} */\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, (/** @type {?} */ (rootRect)));\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            /** @type {?} */\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element.getBoundingClientRect());\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: `${this._config.zIndex || 1000}`\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach((/**\n                 * @param {?} className\n                 * @return {?}\n                 */\n                className => preview.classList.add(className)));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @private\n     * @return {?} Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        /** @type {?} */\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        /** @type {?} */\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            return new Promise((/**\n             * @param {?} resolve\n             * @return {?}\n             */\n            resolve => {\n                /** @type {?} */\n                const handler = (/** @type {?} */ (((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                (event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                }))));\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                /** @type {?} */\n                const timeout = setTimeout((/** @type {?} */ (handler)), duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            }));\n        }));\n    }\n    /**\n     * Creates an element that will be shown instead of the current element while dragging.\n     * @private\n     * @return {?}\n     */\n    _createPlaceholderElement() {\n        /** @type {?} */\n        const placeholderConfig = this._placeholderTemplate;\n        /** @type {?} */\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        /** @type {?} */\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = (/** @type {?} */ (placeholderConfig)).viewContainer.createEmbeddedView(placeholderTemplate, (/** @type {?} */ (placeholderConfig)).context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @private\n     * @param {?} referenceElement Element that initiated the dragging.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        /** @type {?} */\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        /** @type {?} */\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        /** @type {?} */\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        /** @type {?} */\n        const scrollPosition = this._getViewportScrollPosition();\n        /** @type {?} */\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        /** @type {?} */\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /**\n     * Determines the point of the page that was touched by the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getPointerPositionOnPage(event) {\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        /** @type {?} */\n        const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n        /** @type {?} */\n        const scrollPosition = this._getViewportScrollPosition();\n        return {\n            x: point.pageX - scrollPosition.left,\n            y: point.pageY - scrollPosition.top\n        };\n    }\n    /**\n     * Gets the pointer position on the page, accounting for any position constraints.\n     * @private\n     * @param {?} point\n     * @return {?}\n     */\n    _getConstrainedPointerPosition(point) {\n        /** @type {?} */\n        const constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        /** @type {?} */\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            constrainedPoint.y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            constrainedPoint.x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            /** @type {?} */\n            const boundaryRect = this._boundaryRect;\n            /** @type {?} */\n            const previewRect = (/** @type {?} */ (this._previewRect));\n            /** @type {?} */\n            const minY = boundaryRect.top + pickupY;\n            /** @type {?} */\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            /** @type {?} */\n            const minX = boundaryRect.left + pickupX;\n            /** @type {?} */\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n            constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n        }\n        return constrainedPoint;\n    }\n    /**\n     * Updates the current drag delta, based on the user's current pointer position on the page.\n     * @private\n     * @param {?} pointerPositionOnPage\n     * @return {?}\n     */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        /** @type {?} */\n        const delta = this._pointerDirectionDelta;\n        /** @type {?} */\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        /** @type {?} */\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        /** @type {?} */\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /**\n     * Toggles the native drag interactions, based on how many handles are registered.\n     * @private\n     * @return {?}\n     */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        /** @type {?} */\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /**\n     * Removes the manually-added event listeners from the root element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @private\n     * @param {?} x New transform value along the X axis.\n     * @param {?} y New transform value along the Y axis.\n     * @return {?}\n     */\n    _applyRootElementTransform(x, y) {\n        /** @type {?} */\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @private\n     * @param {?} currentPosition Current position of the user's pointer.\n     * @return {?}\n     */\n    _getDragDistance(currentPosition) {\n        /** @type {?} */\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /**\n     * Cleans up any cached element dimensions that we don't need after dragging has stopped.\n     * @private\n     * @return {?}\n     */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     * @private\n     * @return {?}\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        /** @type {?} */\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        /** @type {?} */\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        /** @type {?} */\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        /** @type {?} */\n        const topOverflow = boundaryRect.top - elementRect.top;\n        /** @type {?} */\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /**\n     * Gets the drag start delay, based on the event type.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getDragStartDelay(event) {\n        /** @type {?} */\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /**\n     * Updates the internal state of the draggable element when scrolling has occurred.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _updateOnScroll(event) {\n        /** @type {?} */\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        // ClientRect dimensions are based on the page's scroll position so\n        // we have to update the cached boundary ClientRect if the user has scrolled.\n        if (this._boundaryRect && scrollDifference) {\n            adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n        }\n    }\n    /**\n     * Gets the scroll position of the viewport.\n     * @private\n     * @return {?}\n     */\n    _getViewportScrollPosition() {\n        /** @type {?} */\n        const cachedPosition = this._parentPositions.positions.get(this._document);\n        return cachedPosition ? cachedPosition.scrollPosition :\n            this._viewportRuler.getViewportScrollPosition();\n    }\n}\nif (false) {\n    /**\n     * Element displayed next to the user's pointer while the element is dragged.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._preview;\n    /**\n     * Reference to the view of the preview element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewRef;\n    /**\n     * Reference to the view of the placeholder element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholderRef;\n    /**\n     * Element that is rendered instead of the draggable item while it is being sorted.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholder;\n    /**\n     * Coordinates within the element at which the user picked up the element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pickupPositionInElement;\n    /**\n     * Coordinates on the page at which the user picked up the element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pickupPositionOnPage;\n    /**\n     * Anchor node used to save the place in the DOM where the element was\n     * picked up so that it can be restored at the end of the drag sequence.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._anchor;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._passiveTransform;\n    /**\n     * CSS `transform` that is applied to the element while it's being dragged.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._activeTransform;\n    /**\n     * Inline `transform` value that the element had before the first dragging sequence.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialTransform;\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._hasStartedDragging;\n    /**\n     * Whether the element has moved since the user started dragging it.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._hasMoved;\n    /**\n     * Drop container in which the DragRef resided when dragging began.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialContainer;\n    /**\n     * Index at which the item started in its initial container.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialIndex;\n    /**\n     * Cached positions of scrollable parent elements.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._parentPositions;\n    /**\n     * Emits when the item is being moved.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._moveEvents;\n    /**\n     * Keeps track of the direction in which the user is dragging along each axis.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerDirectionDelta;\n    /**\n     * Pointer position at which the last change in the delta occurred.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerPositionAtLastDirectionChange;\n    /**\n     * Root DOM node of the drag instance. This is the element that will\n     * be moved around as the user is dragging.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._rootElement;\n    /**\n     * Inline style value of `-webkit-tap-highlight-color` at the time the\n     * dragging was started. Used to restore the value once we're done dragging.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._rootElementTapHighlight;\n    /**\n     * Subscription to pointer movement events.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerMoveSubscription;\n    /**\n     * Subscription to the event that is dispatched when the user lifts their pointer.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerUpSubscription;\n    /**\n     * Subscription to the viewport being scrolled.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._scrollSubscription;\n    /**\n     * Subscription to the viewport being resized.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._resizeSubscription;\n    /**\n     * Time at which the last touch event occurred. Used to avoid firing the same\n     * events multiple times on touch devices where the browser will fire a fake\n     * mouse event for each touch event, after a certain time.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._lastTouchEventTime;\n    /**\n     * Time at which the last dragging sequence was started.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dragStartTime;\n    /**\n     * Cached reference to the boundary element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._boundaryElement;\n    /**\n     * Whether the native dragging interactions have been enabled on the root element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._nativeInteractionsEnabled;\n    /**\n     * Cached dimensions of the preview element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewRect;\n    /**\n     * Cached dimensions of the boundary element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._boundaryRect;\n    /**\n     * Element that will be used as a template to create the draggable item's preview.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewTemplate;\n    /**\n     * Template for placeholder element rendered to show where a draggable would be dropped.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholderTemplate;\n    /**\n     * Elements that can be used to drag the draggable item.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._handles;\n    /**\n     * Registered handles that are currently disabled.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._disabledHandles;\n    /**\n     * Droppable container that the draggable is a part of.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dropContainer;\n    /**\n     * Layout direction of the item.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._direction;\n    /**\n     * Axis along which dragging is locked.\n     * @type {?}\n     */\n    DragRef.prototype.lockAxis;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     * @type {?}\n     */\n    DragRef.prototype.dragStartDelay;\n    /**\n     * Class to be added to the preview element.\n     * @type {?}\n     */\n    DragRef.prototype.previewClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._disabled;\n    /**\n     * Emits as the drag sequence is being prepared.\n     * @type {?}\n     */\n    DragRef.prototype.beforeStarted;\n    /**\n     * Emits when the user starts dragging the item.\n     * @type {?}\n     */\n    DragRef.prototype.started;\n    /**\n     * Emits when the user has released a drag item, before any animations have started.\n     * @type {?}\n     */\n    DragRef.prototype.released;\n    /**\n     * Emits when the user stops dragging an item in the container.\n     * @type {?}\n     */\n    DragRef.prototype.ended;\n    /**\n     * Emits when the user has moved the item into a new container.\n     * @type {?}\n     */\n    DragRef.prototype.entered;\n    /**\n     * Emits when the user removes the item its container by dragging it into another container.\n     * @type {?}\n     */\n    DragRef.prototype.exited;\n    /**\n     * Emits when the user drops the item inside a container.\n     * @type {?}\n     */\n    DragRef.prototype.dropped;\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     * @type {?}\n     */\n    DragRef.prototype.moved;\n    /**\n     * Arbitrary data that can be attached to the drag item.\n     * @type {?}\n     */\n    DragRef.prototype.data;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page and should return a point describing where the item should\n     * be rendered.\n     * @type {?}\n     */\n    DragRef.prototype.constrainPosition;\n    /**\n     * Handler for the `mousedown`/`touchstart` events.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerDown;\n    /**\n     * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerMove;\n    /**\n     * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerUp;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._config;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dragDropRegistry;\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param {?} x Desired position of the element along the X axis.\n * @param {?} y Desired position of the element along the Y axis.\n * @return {?}\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/**\n * Creates a deep clone of an element.\n * @param {?} node\n * @return {?}\n */\nfunction deepCloneNode(node) {\n    /** @type {?} */\n    const clone = (/** @type {?} */ (node.cloneNode(true)));\n    /** @type {?} */\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    /** @type {?} */\n    const descendantCanvases = node.querySelectorAll('canvas');\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\n    // We match up the cloned canvas to their sources using their index in the DOM.\n    if (descendantCanvases.length) {\n        /** @type {?} */\n        const cloneCanvases = clone.querySelectorAll('canvas');\n        for (let i = 0; i < descendantCanvases.length; i++) {\n            /** @type {?} */\n            const correspondingCloneContext = cloneCanvases[i].getContext('2d');\n            if (correspondingCloneContext) {\n                correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\n            }\n        }\n    }\n    return clone;\n}\n/**\n * Clamps a value between a minimum and a maximum.\n * @param {?} value\n * @param {?} min\n * @param {?} max\n * @return {?}\n */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param {?} node Node to be removed.\n * @return {?}\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/**\n * Determines whether an event is a touch event.\n * @param {?} event\n * @return {?}\n */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the element into which the drag preview should be inserted.\n * @param {?} documentRef\n * @return {?}\n */\nfunction getPreviewInsertionPoint(documentRef) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n * @param {?} viewRef\n * @param {?} _document\n * @return {?}\n */\nfunction getRootNode(viewRef, _document) {\n    /** @type {?} */\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return (/** @type {?} */ (rootNodes[0]));\n    }\n    /** @type {?} */\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach((/**\n     * @param {?} node\n     * @return {?}\n     */\n    node => wrapper.appendChild(node)));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param {?} target Element that needs to be resized.\n * @param {?} sourceRect Dimensions of the source element.\n * @return {?}\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @template T\n * @param {?} array Array in which to move the item.\n * @param {?} fromIndex Starting index of the item.\n * @param {?} toIndex Index to which the item should be moved.\n * @return {?}\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    /** @type {?} */\n    const from = clamp$1(fromIndex, array.length - 1);\n    /** @type {?} */\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    /** @type {?} */\n    const target = array[from];\n    /** @type {?} */\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @template T\n * @param {?} currentArray Array from which to transfer the item.\n * @param {?} targetArray Array into which to put the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n * @return {?}\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @template T\n * @param {?} currentArray Array from which to copy the item.\n * @param {?} targetArray Array into which is copy the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n *\n * @return {?}\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/**\n * Clamps a number between zero and a maximum.\n * @param {?} value\n * @param {?} max\n * @return {?}\n */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drop-list-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n * @type {?}\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst AUTO_SCROLL_STEP = 2;\n/**\n * Entry in the position cache for draggable items.\n * \\@docs-private\n * @record\n */\nfunction CachedItemPosition() { }\nif (false) {\n    /**\n     * Instance of the drag item.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.drag;\n    /**\n     * Dimensions of the item.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.clientRect;\n    /**\n     * Amount by which the item has been moved since dragging started.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.offset;\n}\n/** @enum {number} */\nconst AutoScrollVerticalDirection = {\n    NONE: 0, UP: 1, DOWN: 2,\n};\n/** @enum {number} */\nconst AutoScrollHorizontalDirection = {\n    NONE: 0, LEFT: 1, RIGHT: 2,\n};\n/**\n * Internal compile-time-only representation of a `DropListRef`.\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\n * \\@docs-private\n * @record\n */\nfunction DropListRefInternal() { }\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * @template T\n */\nclass DropListRef {\n    /**\n     * @param {?} element\n     * @param {?} _dragDropRegistry\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     */\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /**\n         * Whether starting a dragging sequence from this container is disabled.\n         */\n        this.disabled = false;\n        /**\n         * Whether sorting items within the list is disabled.\n         */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Emits right before dragging has started.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new Subject();\n        /**\n         * Whether an item in the list is being dragged.\n         */\n        this._isDragging = false;\n        /**\n         * Cache of the dimensions of all the items inside the container.\n         */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as\n         * well as what direction the pointer was moving in when the swap occured.\n         */\n        this._previousSwap = { drag: (/** @type {?} */ (null)), delta: 0 };\n        /**\n         * Drop lists that are connected to the current one.\n         */\n        this._siblings = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this._orientation = 'vertical';\n        /**\n         * Connected siblings that currently have a dragged item.\n         */\n        this._activeSiblings = new Set();\n        /**\n         * Layout direction of the drop list.\n         */\n        this._direction = 'ltr';\n        /**\n         * Subscription to the window being scrolled.\n         */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /**\n         * Vertical direction in which the list is currently scrolling.\n         */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /**\n         * Horizontal direction in which the list is currently scrolling.\n         */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /**\n         * Used to signal to the current auto-scroll sequence when to stop.\n         */\n        this._stopScrollTimers = new Subject();\n        /**\n         * Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly.\n         */\n        this._cachedShadowRoot = null;\n        /**\n         * Starts the interval that'll auto-scroll the element.\n         */\n        this._startScrollInterval = (/**\n         * @return {?}\n         */\n        () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const node = this._scrollNode;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                }\n            }));\n        });\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    }\n    /**\n     * Removes the drop list functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = (/** @type {?} */ (null));\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /**\n     * Whether an item from this list is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._isDragging;\n    }\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    start() {\n        /** @type {?} */\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || ((/** @type {?} */ (styles))).scrollSnapType || '';\n        ((/** @type {?} */ (styles))).scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._startReceiving(this)));\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?=} index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY, index) {\n        this.start();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        /** @type {?} */\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        /** @type {?} */\n        const activeDraggables = this._activeDraggables;\n        /** @type {?} */\n        const currentIndex = activeDraggables.indexOf(item);\n        /** @type {?} */\n        const placeholder = item.getPlaceholderElement();\n        /** @type {?} */\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            /** @type {?} */\n            const element = newPositionReference.getRootElement();\n            (/** @type {?} */ (element.parentElement)).insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            /** @type {?} */\n            const element = coerceElement(this.element);\n            if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n                element.insertBefore(placeholder, activeDraggables[0].getRootElement());\n                activeDraggables.unshift(item);\n            }\n            else {\n                element.appendChild(placeholder);\n                activeDraggables.push(item);\n            }\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed and also parent rects.\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * \\@breaking-change 11.0.0 `previousIndex` parameter to become required.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param {?} distance Distance the user has dragged since the start of the dragging sequence.\n     * @param {?=} previousIndex Index of the item when dragging started.\n     *\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer, distance, previousIndex) {\n        this._reset();\n        // @breaking-change 11.0.0 Remove this fallback logic once `previousIndex` is a required param.\n        if (previousIndex == null) {\n            previousIndex = previousContainer.getItemIndex(item);\n        }\n        this.dropped.next({ item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} items Items that are a part of this list.\n     * @return {THIS}\n     */\n    withItems(items) {\n        /** @type {?} */\n        const previousItems = (/** @type {?} */ (this))._draggables;\n        (/** @type {?} */ (this))._draggables = items;\n        items.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item._withDropContainer((/** @type {?} */ (this)))));\n        if ((/** @type {?} */ (this)).isDragging()) {\n            /** @type {?} */\n            const draggedItems = previousItems.filter((/**\n             * @param {?} item\n             * @return {?}\n             */\n            item => item.isDragging()));\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every((/**\n             * @param {?} item\n             * @return {?}\n             */\n            item => items.indexOf(item) === -1))) {\n                (/** @type {?} */ (this))._reset();\n            }\n            else {\n                (/** @type {?} */ (this))._cacheItems();\n            }\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the layout direction of the drop list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} connectedTo Other containers that the current containers should be connected to.\n     * @return {THIS}\n     */\n    connectedTo(connectedTo) {\n        (/** @type {?} */ (this))._siblings = connectedTo.slice();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the orientation of the container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} orientation New orientation for the container.\n     * @return {THIS}\n     */\n    withOrientation(orientation) {\n        (/** @type {?} */ (this))._orientation = orientation;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} elements Elements that can be scrolled.\n     * @return {THIS}\n     */\n    withScrollableParents(elements) {\n        /** @type {?} */\n        const element = coerceElement((/** @type {?} */ (this)).element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        (/** @type {?} */ (this))._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Gets the scrollable parents that are registered with this drop container.\n     * @return {?}\n     */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        /** @type {?} */\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     * @return {?}\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        /** @type {?} */\n        const siblings = this._itemPositions;\n        /** @type {?} */\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentIndex = findIndex(siblings, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n        /** @type {?} */\n        const siblingAtNewPosition = siblings[newIndex];\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const newPosition = siblingAtNewPosition.clientRect;\n        /** @type {?} */\n        const delta = currentIndex > newIndex ? 1 : -1;\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        // How many pixels the item's placeholder should be offset.\n        /** @type {?} */\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        /** @type {?} */\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        /** @type {?} */\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((/**\n         * @param {?} sibling\n         * @param {?} index\n         * @return {?}\n         */\n        (sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            /** @type {?} */\n            const isDraggedItem = sibling.drag === item;\n            /** @type {?} */\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            /** @type {?} */\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        }));\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param {?} pointerX User's pointer position along the x axis.\n     * @param {?} pointerY User's pointer position along the y axis.\n     * @return {?}\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        /** @type {?} */\n        let scrollNode;\n        /** @type {?} */\n        let verticalScrollDirection = 0 /* NONE */;\n        /** @type {?} */\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((/**\n         * @param {?} position\n         * @param {?} element\n         * @return {?}\n         */\n        (position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections((/** @type {?} */ (element)), position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = (/** @type {?} */ (element));\n                }\n            }\n        }));\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            /** @type {?} */\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /**\n     * Stops any currently-running auto-scroll sequences.\n     * @return {?}\n     */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /**\n     * Caches the positions of the configured scrollable parents.\n     * @private\n     * @return {?}\n     */\n    _cacheParentPositions() {\n        /** @type {?} */\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = (/** @type {?} */ ((/** @type {?} */ (this._parentPositions.positions.get(element))).clientRect));\n    }\n    /**\n     * Refreshes the position cache of the items and sibling containers.\n     * @private\n     * @return {?}\n     */\n    _cacheItemPositions() {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map((/**\n         * @param {?} drag\n         * @return {?}\n         */\n        drag => {\n            /** @type {?} */\n            const elementToMeasure = drag.getVisibleElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        })).sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        }));\n    }\n    /**\n     * Resets the container to its initial state.\n     * @private\n     * @return {?}\n     */\n    _reset() {\n        this._isDragging = false;\n        /** @type {?} */\n        const styles = coerceElement(this.element).style;\n        ((/** @type {?} */ (styles))).scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => {\n            /** @type {?} */\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                rootElement.style.transform = '';\n            }\n        }));\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._stopReceiving(this)));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @private\n     * @param {?} currentIndex Index of the item currently being dragged.\n     * @param {?} siblings All of the items in the list.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        /** @type {?} */\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            /** @type {?} */\n            const start = isHorizontal ? 'left' : 'top';\n            /** @type {?} */\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @private\n     * @param {?} currentPosition Current position of the item.\n     * @param {?} newPosition Position of the item where the current item should be moved.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @private\n     * @param {?} pointerX Position of the user's pointer along the X axis.\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\n     * @return {?}\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        /** @type {?} */\n        const itemPositions = this._itemPositions;\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        /** @type {?} */\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            /** @type {?} */\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            /** @type {?} */\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @private\n     * @param {?} item Item that is being sorted.\n     * @param {?} pointerX Position of the user's pointer along the X axis.\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\n     * @param {?=} delta Direction in which the user is moving their pointer.\n     * @return {?}\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, (/**\n         * @param {?} __0\n         * @param {?} _\n         * @param {?} array\n         * @return {?}\n         */\n        ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                /** @type {?} */\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, and they didn't change\n                // the direction in which they're dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        }));\n    }\n    /**\n     * Caches the current items in the list and their positions.\n     * @private\n     * @return {?}\n     */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    _isOverContainer(x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._canReceive(item, x, y)));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param {?} item Item that is being dragged into the list.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _canReceive(item, x, y) {\n        if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n            return false;\n        }\n        /** @type {?} */\n        const elementFromPoint = (/** @type {?} */ (this._getShadowRoot().elementFromPoint(x, y)));\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        /** @type {?} */\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param {?} sibling Sibling in which dragging has started.\n     * @return {?}\n     */\n    _startReceiving(sibling) {\n        /** @type {?} */\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param {?} sibling Sibling whose dragging has stopped.\n     * @return {?}\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     * @private\n     * @return {?}\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            if (this.isDragging()) {\n                /** @type {?} */\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    // Since we know the amount that the user has scrolled we can shift all of the\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\n                    // we can avoid inconsistent behavior where we might be measuring the element before\n                    // its position has changed.\n                    this._itemPositions.forEach((/**\n                     * @param {?} __0\n                     * @return {?}\n                     */\n                    ({ clientRect }) => {\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n                    }));\n                    // We need two loops for this, because we want all of the cached\n                    // positions to be up-to-date before we re-sort the item.\n                    this._itemPositions.forEach((/**\n                     * @param {?} __0\n                     * @return {?}\n                     */\n                    ({ drag }) => {\n                        if (this._dragDropRegistry.isDragging(drag)) {\n                            // We need to re-sort the item manually, because the pointer move\n                            // events won't be dispatched while the user is scrolling.\n                            drag._sortFromLastPointerPosition();\n                        }\n                    }));\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        }));\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     * @private\n     * @return {?}\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            /** @type {?} */\n            const shadowRoot = (/** @type {?} */ (_getShadowRoot(coerceElement(this.element))));\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n}\nif (false) {\n    /**\n     * Element that the drop list is attached to.\n     * @type {?}\n     */\n    DropListRef.prototype.element;\n    /**\n     * Whether starting a dragging sequence from this container is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.disabled;\n    /**\n     * Whether sorting items within the list is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.sortingDisabled;\n    /**\n     * Locks the position of the draggable elements inside the container along the specified axis.\n     * @type {?}\n     */\n    DropListRef.prototype.lockAxis;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.autoScrollDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     * @type {?}\n     */\n    DropListRef.prototype.enterPredicate;\n    /**\n     * Emits right before dragging has started.\n     * @type {?}\n     */\n    DropListRef.prototype.beforeStarted;\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     * @type {?}\n     */\n    DropListRef.prototype.entered;\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     * @type {?}\n     */\n    DropListRef.prototype.exited;\n    /**\n     * Emits when the user drops an item inside the container.\n     * @type {?}\n     */\n    DropListRef.prototype.dropped;\n    /**\n     * Emits as the user is swapping items while actively dragging.\n     * @type {?}\n     */\n    DropListRef.prototype.sorted;\n    /**\n     * Arbitrary data that can be attached to the drop list.\n     * @type {?}\n     */\n    DropListRef.prototype.data;\n    /**\n     * Whether an item in the list is being dragged.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._isDragging;\n    /**\n     * Cache of the dimensions of all the items inside the container.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._itemPositions;\n    /**\n     * Keeps track of the positions of any parent scrollable elements.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._parentPositions;\n    /**\n     * Cached `ClientRect` of the drop list.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._clientRect;\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * from `_draggables`, as well as any items that have been dragged in, but haven't\n     * been dropped yet.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._activeDraggables;\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as\n     * well as what direction the pointer was moving in when the swap occured.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._previousSwap;\n    /**\n     * Draggable items in the container.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._draggables;\n    /**\n     * Drop lists that are connected to the current one.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._siblings;\n    /**\n     * Direction in which the list is oriented.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._orientation;\n    /**\n     * Connected siblings that currently have a dragged item.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._activeSiblings;\n    /**\n     * Layout direction of the drop list.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._direction;\n    /**\n     * Subscription to the window being scrolled.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._viewportScrollSubscription;\n    /**\n     * Vertical direction in which the list is currently scrolling.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._verticalScrollDirection;\n    /**\n     * Horizontal direction in which the list is currently scrolling.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._horizontalScrollDirection;\n    /**\n     * Node that is being auto-scrolled.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._scrollNode;\n    /**\n     * Used to signal to the current auto-scroll sequence when to stop.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._stopScrollTimers;\n    /**\n     * Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._cachedShadowRoot;\n    /**\n     * Reference to the document.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._document;\n    /**\n     * Elements that can be scrolled while the user is dragging.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._scrollableElements;\n    /**\n     * Initial value for the element's `scroll-snap-type` style.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._initialScrollSnap;\n    /**\n     * Starts the interval that'll auto-scroll the element.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._startScrollInterval;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._dragDropRegistry;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._viewportRuler;\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @template T\n * @param {?} array Array in which to look for matches.\n * @param {?} predicate Function used to determine whether an item is a match.\n * @return {?}\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    /** @type {?} */\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @return {?}\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    /** @type {?} */\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param {?} element Element for which we should calculate the scroll direction.\n * @param {?} clientRect Bounding client rectangle of the element.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    /** @type {?} */\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    /** @type {?} */\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    /** @type {?} */\n    let verticalScrollDirection = 0 /* NONE */;\n    /** @type {?} */\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        /** @type {?} */\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        /** @type {?} */\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop-registry.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Event options that can be used to bind an active, capturing event.\n * @type {?}\n */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * \\@docs-private\n * @template I, C\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _document\n     */\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /**\n         * Registered drop container instances.\n         */\n        this._dropInstances = new Set();\n        /**\n         * Registered drag item instances.\n         */\n        this._dragInstances = new Set();\n        /**\n         * Drag item instances that are currently being dragged.\n         */\n        this._activeDragInstances = new Set();\n        /**\n         * Keeps track of the event listeners that we've bound to the `document`.\n         */\n        this._globalListeners = new Map();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (this._activeDragInstances.size) {\n                event.preventDefault();\n            }\n        });\n        this._document = _document;\n    }\n    /**\n     * Adds a drop container to the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /**\n     * Adds a drag item instance to the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            }));\n        }\n    }\n    /**\n     * Removes a drop container from the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /**\n     * Removes a drag item instance from the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param {?} drag Drag instance which is being dragged.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.has(drag)) {\n            return;\n        }\n        this._activeDragInstances.add(drag);\n        if (this._activeDragInstances.size === 1) {\n            /** @type {?} */\n            const isTouchEvent = event.type.startsWith('touch');\n            /** @type {?} */\n            const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n            /** @type {?} */\n            const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(moveEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerMove.next((/** @type {?} */ (e)))),\n                options: activeCapturingEventOptions\n            })\n                .set(upEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerUp.next((/** @type {?} */ (e)))),\n                options: true\n            })\n                .set('scroll', {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.scroll.next(e)),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                this._globalListeners.forEach((/**\n                 * @param {?} config\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                }));\n            }));\n        }\n    }\n    /**\n     * Stops dragging a drag item instance.\n     * @param {?} drag\n     * @return {?}\n     */\n    stopDragging(drag) {\n        this._activeDragInstances.delete(drag);\n        if (this._activeDragInstances.size === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /**\n     * Gets whether a drag item instance is currently being dragged.\n     * @param {?} drag\n     * @return {?}\n     */\n    isDragging(drag) {\n        return this._activeDragInstances.has(drag);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._dragInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDragItem(instance)));\n        this._dropInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDropContainer(instance)));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /**\n     * Clears out the global event listeners from the `document`.\n     * @private\n     * @return {?}\n     */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((/**\n         * @param {?} config\n         * @param {?} name\n         * @return {?}\n         */\n        (config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        }));\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\n/** @nocollapse */\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ DragDropRegistry.ɵprov = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._document;\n    /**\n     * Registered drop container instances.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._dropInstances;\n    /**\n     * Registered drag item instances.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._dragInstances;\n    /**\n     * Drag item instances that are currently being dragged.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._activeDragInstances;\n    /**\n     * Keeps track of the event listeners that we've bound to the `document`.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._globalListeners;\n    /**\n     * Emits the `touchmove` or `mousemove` events that are dispatched\n     * while the user is dragging a drag item instance.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.pointerMove;\n    /**\n     * Emits the `touchend` or `mouseup` events that are dispatched\n     * while the user is dragging a drag item instance.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.pointerUp;\n    /**\n     * Emits when the viewport has been scrolled while the user is dragging an item.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.scroll;\n    /**\n     * Event listener that will prevent the default browser action while the user is dragging.\n     * \\@param event Event whose default action should be prevented.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._preventDefaultWhileDragging;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._ngZone;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default configuration to be used when creating a `DragRef`.\n * @type {?}\n */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    /**\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @template T\n     * @param {?} element Element to which to attach the dragging functionality.\n     * @param {?=} config Object used to configure the dragging behavior.\n     * @return {?}\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @template T\n     * @param {?} element Element to which to attach the drop list functionality.\n     * @return {?}\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\n/** @nocollapse */\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n/** @nocollapse */ DragDrop.ɵprov = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._dragDropRegistry;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-events.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Event emitted when the user starts dragging a draggable.\n * @record\n * @template T\n */\nfunction CdkDragStart() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragStart.prototype.source;\n}\n/**\n * Event emitted when the user releases an item, before any animations have started.\n * @record\n * @template T\n */\nfunction CdkDragRelease() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragRelease.prototype.source;\n}\n/**\n * Event emitted when the user stops dragging a draggable.\n * @record\n * @template T\n */\nfunction CdkDragEnd() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragEnd.prototype.source;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragEnd.prototype.distance;\n}\n/**\n * Event emitted when the user moves an item into a new drop container.\n * @record\n * @template T, I\n */\nfunction CdkDragEnter() { }\nif (false) {\n    /**\n     * Container into which the user has moved the item.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.container;\n    /**\n     * Item that was moved into the container.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.item;\n    /**\n     * Index at which the item has entered the container.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.currentIndex;\n}\n/**\n * Event emitted when the user removes an item from a\n * drop container by moving it into another one.\n * @record\n * @template T, I\n */\nfunction CdkDragExit() { }\nif (false) {\n    /**\n     * Container from which the user has a removed an item.\n     * @type {?}\n     */\n    CdkDragExit.prototype.container;\n    /**\n     * Item that was removed from the container.\n     * @type {?}\n     */\n    CdkDragExit.prototype.item;\n}\n/**\n * Event emitted when the user drops a draggable item inside a drop container.\n * @record\n * @template T, O\n */\nfunction CdkDragDrop() { }\nif (false) {\n    /**\n     * Index of the item when it was picked up.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.previousIndex;\n    /**\n     * Current index of the item.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.currentIndex;\n    /**\n     * Item that is being dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.item;\n    /**\n     * Container in which the item was dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.container;\n    /**\n     * Container from which the item was picked up. Can be the same as the `container`.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.previousContainer;\n    /**\n     * Whether the user's pointer was over the container when the item was dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.isPointerOverContainer;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.distance;\n}\n/**\n * Event emitted as the user is dragging a draggable item.\n * @record\n * @template T\n */\nfunction CdkDragMove() { }\nif (false) {\n    /**\n     * Item that is being dragged.\n     * @type {?}\n     */\n    CdkDragMove.prototype.source;\n    /**\n     * Position of the user's pointer on the page.\n     * @type {?}\n     */\n    CdkDragMove.prototype.pointerPosition;\n    /**\n     * Native event that is causing the dragging.\n     * @type {?}\n     */\n    CdkDragMove.prototype.event;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragMove.prototype.distance;\n    /**\n     * Indicates the direction in which the user is dragging the element along each axis.\n     * `1` means that the position is increasing (e.g. the user is moving to the right or downwards),\n     * whereas `-1` means that it's decreasing (they're moving to the left or upwards). `0` means\n     * that the position hasn't changed.\n     * @type {?}\n     */\n    CdkDragMove.prototype.delta;\n}\n/**\n * Event emitted when the user swaps the position of two drag items.\n * @record\n * @template T, I\n */\nfunction CdkDragSortEvent() { }\nif (false) {\n    /**\n     * Index from which the item was sorted previously.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.previousIndex;\n    /**\n     * Index that the item is currently in.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.currentIndex;\n    /**\n     * Container that the item belongs to.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.container;\n    /**\n     * Item that is being sorted.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.item;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-parent.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-handle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Handle that can be used to drag and CdkDrag instance.\n */\nclass CdkDragHandle {\n    /**\n     * @param {?} element\n     * @param {?=} parentDrag\n     */\n    constructor(element, parentDrag) {\n        this.element = element;\n        /**\n         * Emits when the state of the handle has changed.\n         */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        this._parentDrag = parentDrag;\n        toggleNativeDragInteractions(element.nativeElement, false);\n    }\n    /**\n     * Whether starting to drag through this handle is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 8)); };\nCdkDragHandle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] } });\n/** @nocollapse */\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDragHandle.ngAcceptInputType_disabled;\n    /**\n     * Closest parent draggable instance.\n     * @type {?}\n     */\n    CdkDragHandle.prototype._parentDrag;\n    /**\n     * Emits when the state of the handle has changed.\n     * @type {?}\n     */\n    CdkDragHandle.prototype._stateChanges;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDragHandle.prototype._disabled;\n    /** @type {?} */\n    CdkDragHandle.prototype.element;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-placeholder.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n * @template T\n */\nclass CdkDragPlaceholder {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPlaceholder.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" } });\n/** @nocollapse */\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /**\n     * Context data to be added to the placeholder template instance.\n     * @type {?}\n     */\n    CdkDragPlaceholder.prototype.data;\n    /** @type {?} */\n    CdkDragPlaceholder.prototype.templateRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-preview.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n * @template T\n */\nclass CdkDragPreview {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /**\n     * Whether the preview should preserve the same size as the item that is being dragged.\n     * @return {?}\n     */\n    get matchSize() { return this._matchSize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPreview.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { matchSize: \"matchSize\", data: \"data\" } });\n/** @nocollapse */\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }],\n    matchSize: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { matchSize: [{\n            type: Input\n        }], data: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDragPreview.ngAcceptInputType_matchSize;\n    /**\n     * Context data to be added to the preview template instance.\n     * @type {?}\n     */\n    CdkDragPreview.prototype.data;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDragPreview.prototype._matchSize;\n    /** @type {?} */\n    CdkDragPreview.prototype.templateRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n * @type {?}\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n/**\n * Object that can be used to configure the drag\n * items and drop lists within a module or a component.\n * @record\n */\nfunction DragDropConfig() { }\nif (false) {\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.lockAxis;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.dragStartDelay;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.constrainPosition;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.previewClass;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.boundaryElement;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.rootElementSelector;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.draggingDisabled;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.sortingDisabled;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.listAutoScrollDisabled;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.listOrientation;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.zIndex;\n}\n/**\n * @deprecated No longer being used. To be removed.\n * \\@breaking-change 10.0.0\n * \\@docs-private\n * @return {?}\n */\nfunction CDK_DRAG_CONFIG_FACTORY() {\n    return { dragStartThreshold: 5, pointerDirectionChangeThreshold: 5 };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @type {?}\n */\nconst CDK_DROP_LIST = new InjectionToken('CDK_DROP_LIST');\n/**\n * Element that can be moved inside a CdkDropList container.\n * @template T\n */\nclass CdkDrag {\n    /**\n     * @param {?} element\n     * @param {?} dropContainer\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewContainerRef\n     * @param {?} config\n     * @param {?} _dir\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     */\n    constructor(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._destroyed = new Subject();\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new EventEmitter();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new EventEmitter();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new EventEmitter();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            /** @type {?} */\n            const subscription = this._dragRef.moved.pipe(map((/**\n             * @param {?} movedEvent\n             * @return {?}\n             */\n            movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            })))).subscribe(observer);\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n            });\n        }));\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ?\n                config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                config.pointerDirectionChangeThreshold : 5,\n            zIndex: config === null || config === void 0 ? void 0 : config.zIndex\n        });\n        this._dragRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                /** @type {?} */\n                const childHandleElements = handles\n                    .filter((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle._parentDrag === this))\n                    .map((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle.element));\n                this._dragRef.withHandles(childHandleElements);\n            })), \n            // Listen if the state of any of the handles changes.\n            switchMap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                return (/** @type {?} */ (merge(...handles.map((/**\n                 * @param {?} item\n                 * @return {?}\n                 */\n                item => {\n                    return item._stateChanges.pipe(startWith(item));\n                })))));\n            })), takeUntil(this._destroyed)).subscribe((/**\n             * @param {?} handleInstance\n             * @return {?}\n             */\n            handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                /** @type {?} */\n                const dragRef = this._dragRef;\n                /** @type {?} */\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            }));\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }));\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const rootSelectorChange = changes['rootElementSelector'];\n        /** @type {?} */\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /**\n     * Syncs the root element with the `DragRef`.\n     * @private\n     * @return {?}\n     */\n    _updateRootElement() {\n        /** @type {?} */\n        const element = this.element.nativeElement;\n        /** @type {?} */\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n            throw Error(`cdkDrag must be attached to an element node. ` +\n                `Currently attached to \"${rootElement.nodeName}\".`);\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /**\n     * Gets the boundary element, based on the `boundaryElement` value.\n     * @private\n     * @return {?}\n     */\n    _getBoundaryElement() {\n        /** @type {?} */\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        /** @type {?} */\n        const element = coerceElement(boundary);\n        if (isDevMode() && !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /**\n     * Syncs the inputs of the CdkDrag with the options of the underlying DragRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (!ref.isDragging()) {\n                /** @type {?} */\n                const dir = this._dir;\n                /** @type {?} */\n                const dragStartDelay = this.dragStartDelay;\n                /** @type {?} */\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                /** @type {?} */\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    matchSize: this._previewTemplate.matchSize,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        }));\n    }\n    /**\n     * Handles the events from the underlying `DragRef`.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.started.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.released.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.released.emit({ source: this });\n        }));\n        ref.ended.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.ended.emit({ source: this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance\n            });\n        }));\n    }\n    /**\n     * Assigns the default input values based on a provided config object.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n    }\n}\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkDrag.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragPreview, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragPlaceholder, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragHandle, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { disabled: [\"cdkDragDisabled\", \"disabled\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], data: [\"cdkDragData\", \"data\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CdkDragPreview,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CdkDragPlaceholder,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': 'cdk-drag',\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }]; }, { started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CdkDragHandle, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CdkDragPreview]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CdkDragPlaceholder]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDrag.ngAcceptInputType_disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._destroyed;\n    /**\n     * Reference to the underlying drag instance.\n     * @type {?}\n     */\n    CdkDrag.prototype._dragRef;\n    /**\n     * Elements that can be used to drag the draggable item.\n     * @type {?}\n     */\n    CdkDrag.prototype._handles;\n    /**\n     * Element that will be used as a template to create the draggable item's preview.\n     * @type {?}\n     */\n    CdkDrag.prototype._previewTemplate;\n    /**\n     * Template for placeholder element rendered to show where a draggable would be dropped.\n     * @type {?}\n     */\n    CdkDrag.prototype._placeholderTemplate;\n    /**\n     * Arbitrary data to attach to this drag instance.\n     * @type {?}\n     */\n    CdkDrag.prototype.data;\n    /**\n     * Locks the position of the dragged element along the specified axis.\n     * @type {?}\n     */\n    CdkDrag.prototype.lockAxis;\n    /**\n     * Selector that will be used to determine the root draggable element, starting from\n     * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n     * when trying to enable dragging on an element that you might not have access to.\n     * @type {?}\n     */\n    CdkDrag.prototype.rootElementSelector;\n    /**\n     * Node or selector that will be used to determine the element to which the draggable's\n     * position will be constrained. If a string is passed in, it'll be used as a selector that\n     * will be matched starting from the element's parent and going up the DOM until a match\n     * has been found.\n     * @type {?}\n     */\n    CdkDrag.prototype.boundaryElement;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     * @type {?}\n     */\n    CdkDrag.prototype.dragStartDelay;\n    /**\n     * Sets the position of a `CdkDrag` that is outside of a drop container.\n     * Can be used to restore the element's position for a returning user.\n     * @type {?}\n     */\n    CdkDrag.prototype.freeDragPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._disabled;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page and should return a point describing where the item should\n     * be rendered.\n     * @type {?}\n     */\n    CdkDrag.prototype.constrainPosition;\n    /**\n     * Class to be added to the preview element.\n     * @type {?}\n     */\n    CdkDrag.prototype.previewClass;\n    /**\n     * Emits when the user starts dragging the item.\n     * @type {?}\n     */\n    CdkDrag.prototype.started;\n    /**\n     * Emits when the user has released a drag item, before any animations have started.\n     * @type {?}\n     */\n    CdkDrag.prototype.released;\n    /**\n     * Emits when the user stops dragging an item in the container.\n     * @type {?}\n     */\n    CdkDrag.prototype.ended;\n    /**\n     * Emits when the user has moved the item into a new container.\n     * @type {?}\n     */\n    CdkDrag.prototype.entered;\n    /**\n     * Emits when the user removes the item its container by dragging it into another container.\n     * @type {?}\n     */\n    CdkDrag.prototype.exited;\n    /**\n     * Emits when the user drops the item inside a container.\n     * @type {?}\n     */\n    CdkDrag.prototype.dropped;\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     * @type {?}\n     */\n    CdkDrag.prototype.moved;\n    /**\n     * Element that the draggable is attached to.\n     * @type {?}\n     */\n    CdkDrag.prototype.element;\n    /**\n     * Droppable container that the draggable is a part of.\n     * @type {?}\n     */\n    CdkDrag.prototype.dropContainer;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._viewContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._changeDetectorRef;\n}\n/**\n * Gets the closest ancestor of an element that matches a selector.\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\nfunction getClosestMatchingAncestor(element, selector) {\n    /** @type {?} */\n    let currentElement = (/** @type {?} */ (element.parentElement));\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            ((/** @type {?} */ (currentElement))).msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drop-list-group.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n * @template T\n */\nclass CdkDropListGroup {\n    constructor() {\n        /**\n         * Drop lists registered inside the group.\n         */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /**\n     * Whether starting a dragging sequence from inside this group is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"] });\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup'\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDropListGroup.ngAcceptInputType_disabled;\n    /**\n     * Drop lists registered inside the group.\n     * @type {?}\n     */\n    CdkDropListGroup.prototype._items;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropListGroup.prototype._disabled;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drop-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique ids for drop zones.\n * @type {?}\n */\nlet _uniqueIdCounter = 0;\n/**\n * Internal compile-time-only representation of a `CdkDropList`.\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\n * \\@docs-private\n * @record\n */\nfunction CdkDropListInternal() { }\nconst ɵ0 = undefined;\n/**\n * Container that wraps a set of draggable items.\n * @template T\n */\nclass CdkDropList {\n    /**\n     * @param {?} element\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     * @param {?=} _dir\n     * @param {?=} _group\n     * @param {?=} _scrollDispatcher\n     * @param {?=} config\n     */\n    constructor(element, dragDrop, _changeDetectorRef, _dir, _group, _scrollDispatcher, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._group = _group;\n        this._scrollDispatcher = _scrollDispatcher;\n        /**\n         * Emits when the list has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (/**\n         * @param {?} drag\n         * @param {?} drop\n         * @return {?}\n         */\n        (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        });\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /**\n     * Whether starting a dragging sequence from this container is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Registers an items with the drop list.\n     * @param {?} item\n     * @return {?}\n     */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /**\n     * Removes an item from the drop list.\n     * @param {?} item\n     * @return {?}\n     */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /**\n     * Gets the registered items in the list, sorted by their position in the DOM.\n     * @return {?}\n     */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => {\n            /** @type {?} */\n            const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Starts dragging an item.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @return {?}\n     */\n    start() {\n        this._dropListRef.start();\n    }\n    /**\n     * Drops an item into this container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     *\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer) {\n        this._dropListRef.drop(item._dragRef, currentIndex, previousContainer._dropListRef, isPointerOverContainer, { x: 0, y: 0 });\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY) {\n        this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._dropListRef.exit(item._dragRef);\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        return this._dropListRef.getItemIndex(item._dragRef);\n    }\n    /**\n     * Syncs the inputs of the CdkDropList with the options of the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => ref.withDirection(value)));\n        }\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const siblings = coerceArray(this.connectedTo).map((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => {\n                return typeof drop === 'string' ?\n                    (/** @type {?} */ (CdkDropList._dropLists.find((/**\n                     * @param {?} list\n                     * @return {?}\n                     */\n                    list => list.id === drop)))) : drop;\n            }));\n            if (this._group) {\n                this._group._items.forEach((/**\n                 * @param {?} drop\n                 * @return {?}\n                 */\n                drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                }));\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            // @breaking-change 11.0.0 Remove null check for _scrollDispatcher once it's required.\n            if (!this._scrollableParentsResolved && this._scrollDispatcher) {\n                /** @type {?} */\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map((/**\n                 * @param {?} scrollable\n                 * @return {?}\n                 */\n                scrollable => scrollable.getElementRef().nativeElement));\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref\n                .connectedTo(siblings.filter((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => drop && drop !== this)).map((/**\n             * @param {?} list\n             * @return {?}\n             */\n            list => list._dropListRef)))\n                .withOrientation(this.orientation);\n        }));\n    }\n    /**\n     * Handles events from the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.sorted.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        }));\n    }\n    /**\n     * Assigns the default input values based on a provided config object.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /**\n     * Syncs up the registered drag items with underlying drop list ref.\n     * @private\n     * @return {?}\n     */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item._dragRef)));\n    }\n}\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CdkDropListGroup, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8)); };\nCdkDropList.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], id: \"id\", enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], data: [\"cdkDropListData\", \"data\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CdkDropListGroup, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n/**\n * Keeps track of the drop lists that are currently on the page.\n */\nCdkDropList._dropLists = [];\n/** @nocollapse */\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: ScrollDispatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n];\nCdkDropList.propDecorators = {\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CdkDropListGroup, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc1.ScrollDispatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], id: [{\n            type: Input\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }] }); })();\nif (false) {\n    /**\n     * Keeps track of the drop lists that are currently on the page.\n     * @type {?}\n     * @private\n     */\n    CdkDropList._dropLists;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_disabled;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_sortingDisabled;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_autoScrollDisabled;\n    /**\n     * Emits when the list has been destroyed.\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._destroyed;\n    /**\n     * Whether the element's scrollable parents have been resolved.\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._scrollableParentsResolved;\n    /**\n     * Reference to the underlying drop list instance.\n     * @type {?}\n     */\n    CdkDropList.prototype._dropListRef;\n    /**\n     * Other draggable containers that this container is connected to and into which the\n     * container's items can be transferred. Can either be references to other drop containers,\n     * or their unique IDs.\n     * @type {?}\n     */\n    CdkDropList.prototype.connectedTo;\n    /**\n     * Arbitrary data to attach to this container.\n     * @type {?}\n     */\n    CdkDropList.prototype.data;\n    /**\n     * Direction in which the list is oriented.\n     * @type {?}\n     */\n    CdkDropList.prototype.orientation;\n    /**\n     * Unique ID for the drop zone. Can be used as a reference\n     * in the `connectedTo` of another `CdkDropList`.\n     * @type {?}\n     */\n    CdkDropList.prototype.id;\n    /**\n     * Locks the position of the draggable elements inside the container along the specified axis.\n     * @type {?}\n     */\n    CdkDropList.prototype.lockAxis;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._disabled;\n    /**\n     * Whether sorting within this drop list is disabled.\n     * @type {?}\n     */\n    CdkDropList.prototype.sortingDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     * @type {?}\n     */\n    CdkDropList.prototype.enterPredicate;\n    /**\n     * Whether to auto-scroll the view when the user moves their pointer close to the edges.\n     * @type {?}\n     */\n    CdkDropList.prototype.autoScrollDisabled;\n    /**\n     * Emits when the user drops an item inside the container.\n     * @type {?}\n     */\n    CdkDropList.prototype.dropped;\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     * @type {?}\n     */\n    CdkDropList.prototype.entered;\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     * @type {?}\n     */\n    CdkDropList.prototype.exited;\n    /**\n     * Emits as the user is swapping items while actively dragging.\n     * @type {?}\n     */\n    CdkDropList.prototype.sorted;\n    /**\n     * Keeps track of the items that are registered with this container. Historically we used to\n     * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n     * well which means that we can't handle cases like dragging the headers of a `mat-table`\n     * correctly. What we do instead is to have the items register themselves with the container\n     * and then we sort them based on their position in the DOM.\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._unsortedItems;\n    /**\n     * Element that the drop list is attached to.\n     * @type {?}\n     */\n    CdkDropList.prototype.element;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._group;\n    /**\n     * @deprecated _scrollDispatcher parameter to become required.\n     * \\@breaking-change 11.0.0\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._scrollDispatcher;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DragDropModule {\n}\nDragDropModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DragDropModule_Factory(t) { return new (t || DragDropModule)(); }, providers: [\n        DragDrop,\n    ], imports: [CdkScrollableModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: function () { return [CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder]; }, exports: function () { return [CdkScrollableModule,\n        CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_CONFIG_FACTORY, CDK_DROP_LIST, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem, CDK_DRAG_PARENT as ɵangular_material_src_cdk_drag_drop_drag_drop_b };\n\n//# sourceMappingURL=drag-drop.js.map","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/button-toggle/button-toggle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\n\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nfunction MatButtonToggleDefaultOptions() { }\nif (false) {\n    /** @type {?|undefined} */\n    MatButtonToggleDefaultOptions.prototype.appearance;\n}\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n * @type {?}\n */\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n * @type {?}\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatButtonToggleGroup)),\n    multi: true\n};\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * \\@breaking-change 8.0.0\n */\nclass MatButtonToggleGroupMultiple {\n}\n/** @type {?} */\nlet _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MatButtonToggle.\n */\nclass MatButtonToggleChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\nif (false) {\n    /**\n     * The MatButtonToggle that emits the event.\n     * @type {?}\n     */\n    MatButtonToggleChange.prototype.source;\n    /**\n     * The value assigned to the MatButtonToggle.\n     * @type {?}\n     */\n    MatButtonToggleChange.prototype.value;\n}\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nclass MatButtonToggleGroup {\n    /**\n     * @param {?} _changeDetector\n     * @param {?=} defaultOptions\n     */\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Event emitted when the group's value changes.\n         */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /**\n     * `name` attribute for the underlying `input` element.\n     * @return {?}\n     */\n    get name() { return this._name; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach((/**\n             * @param {?} toggle\n             * @return {?}\n             */\n            toggle => {\n                toggle.name = this._name;\n                toggle._markForCheck();\n            }));\n        }\n    }\n    /**\n     * Whether the toggle group is vertical.\n     * @return {?}\n     */\n    get vertical() { return this._vertical; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /**\n     * Value of the toggle group.\n     * @return {?}\n     */\n    get value() {\n        /** @type {?} */\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map((/**\n             * @param {?} toggle\n             * @return {?}\n             */\n            toggle => toggle.value));\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /**\n     * Selected button toggles in the group.\n     * @return {?}\n     */\n    get selected() {\n        /** @type {?} */\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : (selected[0] || null);\n    }\n    /**\n     * Whether multiple button toggles can be selected.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether multiple button toggle group is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach((/**\n             * @param {?} toggle\n             * @return {?}\n             */\n            toggle => toggle._markForCheck()));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter((/**\n         * @param {?} toggle\n         * @return {?}\n         */\n        toggle => toggle.checked)));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value Value to be set to the model.\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        /** @type {?} */\n        const selected = this.selected;\n        /** @type {?} */\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        /** @type {?} */\n        const event = new MatButtonToggleChange((/** @type {?} */ (source)), this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param {?} toggle Toggle to be synced.\n     * @param {?} select Whether the toggle should be selected.\n     * @param {?=} isUserInput Whether the change was a result of a user interaction.\n     * @param {?=} deferEvents Whether to defer emitting the change events.\n     * @return {?}\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            ((/** @type {?} */ (this.selected))).checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n            Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => this._updateModelValue(isUserInput)));\n        }\n        else {\n            this._updateModelValue(isUserInput);\n        }\n    }\n    /**\n     * Checks whether a button toggle is selected.\n     * @param {?} toggle\n     * @return {?}\n     */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /**\n     * Determines whether a button toggle should be checked on init.\n     * @param {?} toggle\n     * @return {?}\n     */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => toggle.value != null && value === toggle.value));\n        }\n        return toggle.value === this._rawValue;\n    }\n    /**\n     * Updates the selection state of the toggles in the group based on a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((/**\n             * @param {?} currentValue\n             * @return {?}\n             */\n            (currentValue) => this._selectValue(currentValue)));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /**\n     * Clears the selected toggles.\n     * @private\n     * @return {?}\n     */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach((/**\n         * @param {?} toggle\n         * @return {?}\n         */\n        toggle => toggle.checked = false));\n    }\n    /**\n     * Selects a value if there's a toggle that corresponds to it.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _selectValue(value) {\n        /** @type {?} */\n        const correspondingOption = this._buttonToggles.find((/**\n         * @param {?} toggle\n         * @return {?}\n         */\n        toggle => {\n            return toggle.value != null && toggle.value === value;\n        }));\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /**\n     * Syncs up the group's value with the model and emits the change event.\n     * @private\n     * @param {?} isUserInput\n     * @return {?}\n     */\n    _updateModelValue(isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n}\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) { return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggleGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatButtonToggleGroup, selectors: [[\"mat-button-toggle-group\"]], contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    } }, hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"], hostVars: 5, hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, exportAs: [\"matButtonToggleGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n            { provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup },\n        ])] });\n/** @nocollapse */\nMatButtonToggleGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggleGroup.propDecorators = {\n    _buttonToggles: [{ type: ContentChildren, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => MatButtonToggle)), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                },] }],\n    appearance: [{ type: Input }],\n    name: [{ type: Input }],\n    vertical: [{ type: Input }],\n    value: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    multiple: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-button-toggle-group',\n                providers: [\n                    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                    { provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup },\n                ],\n                host: {\n                    'role': 'group',\n                    'class': 'mat-button-toggle-group',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[class.mat-button-toggle-vertical]': 'vertical',\n                    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n                },\n                exportAs: 'matButtonToggleGroup'\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { valueChange: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], appearance: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], _buttonToggles: [{\n            type: ContentChildren,\n            args: [forwardRef(( /**\n                             * @return {?}\n                             */() => MatButtonToggle)), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                }]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatButtonToggleGroup.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatButtonToggleGroup.ngAcceptInputType_multiple;\n    /** @type {?} */\n    MatButtonToggleGroup.ngAcceptInputType_vertical;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggleGroup.prototype._vertical;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggleGroup.prototype._multiple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggleGroup.prototype._disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggleGroup.prototype._selectionModel;\n    /**\n     * Reference to the raw value that the consumer tried to assign. The real\n     * value will exclude any values from this one that don't correspond to a\n     * toggle. Useful for the cases where the value is assigned before the toggles\n     * have been initialized or at the same that they're being swapped out.\n     * @type {?}\n     * @private\n     */\n    MatButtonToggleGroup.prototype._rawValue;\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype._controlValueAccessorChangeFn;\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype._onTouched;\n    /**\n     * Child button toggle buttons.\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype._buttonToggles;\n    /**\n     * The appearance for all the buttons in the group.\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype.appearance;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggleGroup.prototype._name;\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype.valueChange;\n    /**\n     * Event emitted when the group's value changes.\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype.change;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggleGroup.prototype._changeDetector;\n}\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/**\n * \\@docs-private\n */\nclass MatButtonToggleBase {\n}\n/** @type {?} */\nconst _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/**\n * Single button inside of a toggle group.\n */\nclass MatButtonToggle extends _MatButtonToggleMixinBase {\n    /**\n     * @param {?} toggleGroup\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} _focusMonitor\n     * @param {?} defaultTabIndex\n     * @param {?=} defaultOptions\n     */\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, \n    // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n    defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /**\n         * Event emitted when the group value changes.\n         */\n        this.change = new EventEmitter();\n        /** @type {?} */\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /**\n     * Unique ID for the underlying `button` element.\n     * @return {?}\n     */\n    get buttonId() { return `${this.id}-button`; }\n    /**\n     * The appearance style of the button.\n     * @return {?}\n     */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /**\n     * Whether the button is checked.\n     * @return {?}\n     */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the button is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        /** @type {?} */\n        const group = this.buttonToggleGroup;\n        this._isSingleSelector = group && !group.multiple;\n        this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n        this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = group.name;\n        }\n        if (group) {\n            if (group._isPrechecked(this)) {\n                this.checked = true;\n            }\n            else if (group._isSelected(this) !== this._checked) {\n                // As as side effect of the circular dependency between the toggle group and the button,\n                // we may end up in a state where the button is supposed to be checked on init, but it\n                // isn't, because the checked value was assigned too early. This can happen when Ivy\n                // assigns the static input value before the `ngOnInit` has run.\n                group._syncButtonToggle(this, this._checked);\n            }\n        }\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /**\n     * Focuses the button.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /**\n     * Checks the button toggle due to an interaction with the underlying native button.\n     * @return {?}\n     */\n    _onButtonClick() {\n        /** @type {?} */\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) { return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MatButtonToggleGroup, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatButtonToggle, selectors: [[\"mat-button-toggle\"]], viewQuery: function MatButtonToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    } }, hostAttrs: [1, \"mat-button-toggle\"], hostVars: 11, hostBindings: function MatButtonToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatButtonToggle_focus_HostBindingHandler() { return ctx.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", 0 - 1)(\"id\", ctx.id)(\"name\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { disableRipple: \"disableRipple\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\", id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], value: \"value\" }, outputs: { change: \"change\" }, exportAs: [\"matButtonToggle\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 9, consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", \"mat-focus-indicator\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]], template: function MatButtonToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() { return ctx._onButtonClick(); });\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"div\", 3);\n        ɵngcc0.ɵɵelement(5, \"div\", 4);\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? 0 - 1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    } }, directives: [ɵngcc2.MatRipple], styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatButtonToggle.ctorParameters = () => [\n    { type: MatButtonToggleGroup, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggle.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    _buttonElement: [{ type: ViewChild, args: ['button',] }],\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    value: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    appearance: [{ type: Input }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-button-toggle',\n                template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <div class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</button>\\n\\n<div class=\\\"mat-button-toggle-focus-overlay\\\"></div>\\n<div class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matButtonToggle',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disableRipple'],\n                host: {\n                    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                    '[class.mat-button-toggle-checked]': 'checked',\n                    '[class.mat-button-toggle-disabled]': 'disabled',\n                    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                    'class': 'mat-button-toggle',\n                    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n                    // but can still receive focus from things like cdkFocusInitial.\n                    '[attr.tabindex]': '-1',\n                    '[attr.id]': 'id',\n                    '[attr.name]': 'null',\n                    '(focus)': 'focus()'\n                },\n                styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"]\n            }]\n    }], function () { return [{ type: MatButtonToggleGroup, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], tabIndex: [{\n            type: Input\n        }], appearance: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _buttonElement: [{\n            type: ViewChild,\n            args: ['button']\n        }], value: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatButtonToggle.ngAcceptInputType_checked;\n    /** @type {?} */\n    MatButtonToggle.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatButtonToggle.ngAcceptInputType_vertical;\n    /** @type {?} */\n    MatButtonToggle.ngAcceptInputType_multiple;\n    /** @type {?} */\n    MatButtonToggle.ngAcceptInputType_disableRipple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggle.prototype._isSingleSelector;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggle.prototype._checked;\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n     * take precedence so this may be omitted.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.ariaLabel;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     * @type {?}\n     */\n    MatButtonToggle.prototype.ariaLabelledby;\n    /**\n     * Type of the button toggle. Either 'radio' or 'checkbox'.\n     * @type {?}\n     */\n    MatButtonToggle.prototype._type;\n    /** @type {?} */\n    MatButtonToggle.prototype._buttonElement;\n    /**\n     * The parent button toggle group (exclusive selection). Optional.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.buttonToggleGroup;\n    /**\n     * The unique ID for this button toggle.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.id;\n    /**\n     * HTML's 'name' attribute used to group radios for unique selection.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.name;\n    /**\n     * MatButtonToggleGroup reads this to assign its own value.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.value;\n    /**\n     * Tabindex for the toggle.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.tabIndex;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggle.prototype._appearance;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggle.prototype._disabled;\n    /**\n     * Event emitted when the group value changes.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.change;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggle.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggle.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggle.prototype._focusMonitor;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/button-toggle/button-toggle-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatButtonToggleModule });\nMatButtonToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatButtonToggleModule_Factory(t) { return new (t || MatButtonToggleModule)(); }, imports: [[MatCommonModule, MatRippleModule],\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, { declarations: function () { return [MatButtonToggleGroup,\n        MatButtonToggle]; }, imports: function () { return [MatCommonModule, MatRippleModule]; }, exports: function () { return [MatCommonModule,\n        MatButtonToggleGroup,\n        MatButtonToggle]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, MatRippleModule],\n                exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                declarations: [MatButtonToggleGroup, MatButtonToggle]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/button-toggle/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggleModule };\n\n//# sourceMappingURL=button-toggle.js.map","import { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, InjectionToken, Injector, TemplateRef, Injectable, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Possible overrides for a dialog's position.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) { }\nfunction DialogPosition() { }\nif (false) {\n    /**\n     * Override for the dialog's top position.\n     * @type {?|undefined}\n     */\n    DialogPosition.prototype.top;\n    /**\n     * Override for the dialog's bottom position.\n     * @type {?|undefined}\n     */\n    DialogPosition.prototype.bottom;\n    /**\n     * Override for the dialog's left position.\n     * @type {?|undefined}\n     */\n    DialogPosition.prototype.left;\n    /**\n     * Override for the dialog's right position.\n     * @type {?|undefined}\n     */\n    DialogPosition.prototype.right;\n}\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n * @template D\n */\nclass MatDialogConfig {\n    constructor() {\n        /**\n         * The ARIA role of the dialog element.\n         */\n        this.role = 'dialog';\n        /**\n         * Custom class for the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the dialog has a backdrop.\n         */\n        this.hasBackdrop = true;\n        /**\n         * Custom class for the backdrop.\n         */\n        this.backdropClass = '';\n        /**\n         * Whether the user can use escape or clicking on the backdrop to close the modal.\n         */\n        this.disableClose = false;\n        /**\n         * Width of the dialog.\n         */\n        this.width = '';\n        /**\n         * Height of the dialog.\n         */\n        this.height = '';\n        /**\n         * Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw.\n         */\n        this.maxWidth = '80vw';\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * ID of the element that describes the dialog.\n         */\n        this.ariaDescribedBy = null;\n        /**\n         * ID of the element that labels the dialog.\n         */\n        this.ariaLabelledBy = null;\n        /**\n         * Aria label to assign to the dialog element.\n         */\n        this.ariaLabel = null;\n        /**\n         * Whether the dialog should focus the first focusable element on open.\n         */\n        this.autoFocus = true;\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\nif (false) {\n    /**\n     * Where the attached component should live in Angular's *logical* component tree.\n     * This affects what is available for injection and the change detection order for the\n     * component instantiated inside of the dialog. This does not affect where the dialog\n     * content will be rendered.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.viewContainerRef;\n    /**\n     * ID for the dialog. If omitted, a unique one will be generated.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.id;\n    /**\n     * The ARIA role of the dialog element.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.role;\n    /**\n     * Custom class for the overlay pane.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.panelClass;\n    /**\n     * Whether the dialog has a backdrop.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.hasBackdrop;\n    /**\n     * Custom class for the backdrop.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.backdropClass;\n    /**\n     * Whether the user can use escape or clicking on the backdrop to close the modal.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.disableClose;\n    /**\n     * Width of the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.width;\n    /**\n     * Height of the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.height;\n    /**\n     * Min-width of the dialog. If a number is provided, assumes pixel units.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.minWidth;\n    /**\n     * Min-height of the dialog. If a number is provided, assumes pixel units.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.minHeight;\n    /**\n     * Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.maxWidth;\n    /**\n     * Max-height of the dialog. If a number is provided, assumes pixel units.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.maxHeight;\n    /**\n     * Position overrides.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.position;\n    /**\n     * Data being injected into the child component.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.data;\n    /**\n     * Layout direction for the dialog's content.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.direction;\n    /**\n     * ID of the element that describes the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.ariaDescribedBy;\n    /**\n     * ID of the element that labels the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.ariaLabelledBy;\n    /**\n     * Aria label to assign to the dialog element.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.ariaLabel;\n    /**\n     * Whether the dialog should focus the first focusable element on open.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.autoFocus;\n    /**\n     * Whether the dialog should restore focus to the\n     * previously-focused element, after it's closed.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.restoreFocus;\n    /**\n     * Scroll strategy to be used for the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.scrollStrategy;\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     * @type {?}\n     */\n    MatDialogConfig.prototype.closeOnNavigation;\n    /**\n     * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.componentFactoryResolver;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by MatDialog.\n * \\@docs-private\n * @type {?}\n */\nconst matDialogAnimations = {\n    /**\n     * Animation that is applied on the dialog container by defalt.\n     */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),\n        transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-container.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nclass MatDialogContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _changeDetectorRef\n     * @param {?} _document\n     * @param {?} _config\n     */\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, _config) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._config = _config;\n        /**\n         * Element that was focused before the dialog was opened. Save this to restore upon close.\n         */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * State of the dialog animation.\n         */\n        this._state = 'enter';\n        /**\n         * Emits when an animation state changes.\n         */\n        this._animationStateChanged = new EventEmitter();\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * \\@breaking-change 10.0.0\n         */\n        this.attachDomPortal = (/**\n         * @param {?} portal\n         * @return {?}\n         */\n        (portal) => {\n            if (this._portalOutlet.hasAttached()) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            this._savePreviouslyFocusedElement();\n            return this._portalOutlet.attachDomPortal(portal);\n        });\n        this._ariaLabelledBy = _config.ariaLabelledBy || null;\n        this._document = _document;\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @template T\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._savePreviouslyFocusedElement();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @template C\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._savePreviouslyFocusedElement();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Moves focus back into the dialog if it was moved out.\n     * @return {?}\n     */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            /** @type {?} */\n            const focusWasTrapped = this._getFocusTrap().focusInitialElement();\n            if (!focusWasTrapped) {\n                this._elementRef.nativeElement.focus();\n            }\n        }\n    }\n    /**\n     * Moves the focus inside the focus trap.\n     * @private\n     * @return {?}\n     */\n    _trapFocus() {\n        // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        if (this._config.autoFocus) {\n            this._getFocusTrap().focusInitialElementWhenReady();\n        }\n        else if (!this._containsFocus()) {\n            // Otherwise ensure that focus is on the dialog container. It's possible that a different\n            // component tried to move focus while the open animation was running. See:\n            // https://github.com/angular/components/issues/16215. Note that we only want to do this\n            // if the focus isn't inside the dialog already, because it's possible that the consumer\n            // turned off `autoFocus` in order to move focus themselves.\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /**\n     * Restores focus to the element that was focused before the dialog opened.\n     * @private\n     * @return {?}\n     */\n    _restoreFocus() {\n        /** @type {?} */\n        const toFocus = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n            /** @type {?} */\n            const activeElement = this._document.activeElement;\n            /** @type {?} */\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement || activeElement === this._document.body || activeElement === element ||\n                element.contains(activeElement)) {\n                toFocus.focus();\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /**\n     * Saves a reference to the element that was focused before the dialog was opened.\n     * @private\n     * @return {?}\n     */\n    _savePreviouslyFocusedElement() {\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = (/** @type {?} */ (this._document.activeElement));\n            // Note that there is no focus method when rendering on the server.\n            if (this._elementRef.nativeElement.focus) {\n                // Move focus onto the dialog immediately in order to prevent the user from accidentally\n                // opening multiple dialogs at the same time. Needs to be async, because the element\n                // may not be focusable immediately.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => this._elementRef.nativeElement.focus()));\n            }\n        }\n    }\n    /**\n     * Returns whether focus is inside the dialog.\n     * @private\n     * @return {?}\n     */\n    _containsFocus() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const activeElement = this._document.activeElement;\n        return element === activeElement || element.contains(activeElement);\n    }\n    /**\n     * Gets the focus trap associated with the dialog.\n     * @private\n     * @return {?}\n     */\n    _getFocusTrap() {\n        if (!this._focusTrap) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        }\n        return this._focusTrap;\n    }\n    /**\n     * Callback, invoked whenever an animation on the host completes.\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationDone(event) {\n        if (event.toState === 'enter') {\n            this._trapFocus();\n        }\n        else if (event.toState === 'exit') {\n            this._restoreFocus();\n        }\n        this._animationStateChanged.emit(event);\n    }\n    /**\n     * Callback, invoked when an animation on the host starts.\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationStart(event) {\n        this._animationStateChanged.emit(event);\n    }\n    /**\n     * Starts the dialog exit animation.\n     * @return {?}\n     */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) { return new (t || MatDialogContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig)); };\nMatDialogContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDialogContainer, selectors: [[\"mat-dialog-container\"]], viewQuery: function MatDialogContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkPortalOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"], hostVars: 6, hostBindings: function MatDialogContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵcomponentHostSyntheticListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) { return ctx._onAnimationStart($event); })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) { return ctx._onAnimationDone($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx._id)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        ɵngcc0.ɵɵupdateSyntheticHostBinding(\"@dialogContainer\", ctx._state);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatDialogContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], encapsulation: 2, data: { animation: [matDialogAnimations.dialogContainer] } });\n/** @nocollapse */\nMatDialogContainer.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatDialogConfig }\n];\nMatDialogContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-dialog-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                animations: [matDialogAnimations.dialogContainer],\n                host: {\n                    'class': 'mat-dialog-container',\n                    'tabindex': '-1',\n                    'aria-modal': 'true',\n                    '[attr.id]': '_id',\n                    '[attr.role]': '_config.role',\n                    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                    '[attr.aria-label]': '_config.ariaLabel',\n                    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    '[@dialogContainer]': '_state',\n                    '(@dialogContainer.start)': '_onAnimationStart($event)',\n                    '(@dialogContainer.done)': '_onAnimationDone($event)'\n                },\n                styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusTrapFactory }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatDialogConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._document;\n    /**\n     * The portal outlet inside of this container into which the dialog content will be loaded.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._portalOutlet;\n    /**\n     * The class that traps and manages focus within the dialog.\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._focusTrap;\n    /**\n     * Element that was focused before the dialog was opened. Save this to restore upon close.\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n    /**\n     * State of the dialog animation.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._state;\n    /**\n     * Emits when an animation state changes.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._animationStateChanged;\n    /**\n     * ID of the element that should be considered as the dialog's label.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._ariaLabelledBy;\n    /**\n     * ID for the container DOM element.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._id;\n    /**\n     * Attaches a DOM portal to the dialog container.\n     * \\@param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     */\n    MatDialogContainer.prototype.attachDomPortal;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._focusTrapFactory;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._changeDetectorRef;\n    /**\n     * The dialog configuration.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._config;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\n/** @type {?} */\nlet uniqueId = 0;\n/** @enum {number} */\nconst MatDialogState = {\n    OPEN: 0, CLOSING: 1, CLOSED: 2,\n};\n/**\n * Reference to a dialog opened via the MatDialog service.\n * @template T, R\n */\nclass MatDialogRef {\n    /**\n     * @param {?} _overlayRef\n     * @param {?} _containerInstance\n     * @param {?=} id\n     */\n    constructor(_overlayRef, _containerInstance, id = `mat-dialog-${uniqueId++}`) {\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /**\n         * Whether the user is allowed to close the dialog.\n         */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /**\n         * Subject for notifying the user that the dialog has finished opening.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the dialog has finished closing.\n         */\n        this._afterClosed = new Subject();\n        /**\n         * Subject for notifying the user that the dialog has started closing.\n         */\n        this._beforeClosed = new Subject();\n        /**\n         * Current state of the dialog.\n         */\n        this._state = 0 /* OPEN */;\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event.phaseName === 'done' && event.toState === 'enter')), take(1))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }));\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event.phaseName === 'done' && event.toState === 'exit')), take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        }));\n        _overlayRef.detachments().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = (/** @type {?} */ (null));\n            this._overlayRef.dispose();\n        }));\n        _overlayRef.keydownEvents()\n            .pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n        })))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            event.preventDefault();\n            this.close();\n        }));\n        _overlayRef.backdropClick().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.disableClose) {\n                this._containerInstance._recaptureFocus();\n            }\n            else {\n                this.close();\n            }\n        }));\n    }\n    /**\n     * Close the dialog.\n     * @param {?=} dialogResult Optional result to return to the dialog opener.\n     * @return {?}\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event.phaseName === 'start')), take(1))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout((/**\n             * @return {?}\n             */\n            () => this._finishDialogClose()), event.totalTime + 100);\n        }));\n        this._containerInstance._startExitAnimation();\n        this._state = 1 /* CLOSING */;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @return {?}\n     */\n    afterOpened() {\n        return this._afterOpened.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     * @return {?}\n     */\n    afterClosed() {\n        return this._afterClosed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @return {?}\n     */\n    beforeClosed() {\n        return this._beforeClosed.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     * @return {?}\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     * @return {?}\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} position New dialog position.\n     * @return {THIS}\n     */\n    updatePosition(position) {\n        /** @type {?} */\n        let strategy = (/** @type {?} */ (this))._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        (/** @type {?} */ (this))._overlayRef.updatePosition();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} width New width of the dialog.\n     * @param {?=} height New height of the dialog.\n     * @return {THIS}\n     */\n    updateSize(width = '', height = '') {\n        (/** @type {?} */ (this))._getPositionStrategy().width(width).height(height);\n        (/** @type {?} */ (this))._overlayRef.updatePosition();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Add a CSS class or an array of classes to the overlay pane.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} classes\n     * @return {THIS}\n     */\n    addPanelClass(classes) {\n        (/** @type {?} */ (this))._overlayRef.addPanelClass(classes);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Remove a CSS class or an array of classes from the overlay pane.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} classes\n     * @return {THIS}\n     */\n    removePanelClass(classes) {\n        (/** @type {?} */ (this))._overlayRef.removePanelClass(classes);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Gets the current state of the dialog's lifecycle.\n     * @return {?}\n     */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     * @private\n     * @return {?}\n     */\n    _finishDialogClose() {\n        this._state = 2 /* CLOSED */;\n        this._overlayRef.dispose();\n    }\n    /**\n     * Fetches the position strategy object from the overlay ref.\n     * @private\n     * @return {?}\n     */\n    _getPositionStrategy() {\n        return (/** @type {?} */ (this._overlayRef.getConfig().positionStrategy));\n    }\n}\nif (false) {\n    /**\n     * The instance of component opened into the dialog.\n     * @type {?}\n     */\n    MatDialogRef.prototype.componentInstance;\n    /**\n     * Whether the user is allowed to close the dialog.\n     * @type {?}\n     */\n    MatDialogRef.prototype.disableClose;\n    /**\n     * Subject for notifying the user that the dialog has finished opening.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._afterOpened;\n    /**\n     * Subject for notifying the user that the dialog has finished closing.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._afterClosed;\n    /**\n     * Subject for notifying the user that the dialog has started closing.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._beforeClosed;\n    /**\n     * Result to be passed to afterClosed.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._result;\n    /**\n     * Handle to the timeout that's running as a fallback in case the exit animation doesn't fire.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._closeFallbackTimeout;\n    /**\n     * Current state of the dialog.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._state;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._overlayRef;\n    /** @type {?} */\n    MatDialogRef.prototype._containerInstance;\n    /** @type {?} */\n    MatDialogRef.prototype.id;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a dialog.\n * @type {?}\n */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/**\n * Injection token that can be used to specify default dialog options.\n * @type {?}\n */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n * @type {?}\n */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.block());\n}\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.block());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog {\n    /**\n     * @param {?} _overlay\n     * @param {?} _injector\n     * @param {?} _location\n     * @param {?} _defaultOptions\n     * @param {?} scrollStrategy\n     * @param {?} _parentDialog\n     * @param {?} _overlayContainer\n     */\n    constructor(_overlay, _injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        // TODO (jelbourn): tighten the typing right-hand side of this expression.\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = (/** @type {?} */ (defer((/**\n         * @return {?}\n         */\n        () => this.openDialogs.length ?\n            this._afterAllClosed :\n            this._afterAllClosed.pipe(startWith(undefined))))));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Keeps track of the currently-open dialogs.\n     * @return {?}\n     */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /**\n     * Stream that emits when a dialog has been opened.\n     * @return {?}\n     */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    /**\n     * @return {?}\n     */\n    get _afterAllClosed() {\n        /** @type {?} */\n        const parent = this._parentDialog;\n        return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n    }\n    /**\n     * Opens a modal dialog containing the given component.\n     * @template T, D, R\n     * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param {?=} config Extra configuration options.\n     * @return {?} Reference to the newly-opened dialog.\n     */\n    open(componentOrTemplateRef, config) {\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n        if (config.id && this.getDialogById(config.id)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        /** @type {?} */\n        const overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        const dialogContainer = this._attachDialogContainer(overlayRef, config);\n        /** @type {?} */\n        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe((/**\n         * @return {?}\n         */\n        () => this._removeOpenDialog(dialogRef)));\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     * @return {?}\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param {?} id ID to use when looking up the dialog.\n     * @return {?}\n     */\n    getDialogById(id) {\n        return this.openDialogs.find((/**\n         * @param {?} dialog\n         * @return {?}\n         */\n        dialog => dialog.id === id));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @private\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the OverlayRef for the created overlay.\n     */\n    _createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @private\n     * @param {?} dialogConfig The dialog configuration.\n     * @return {?} The overlay configuration.\n     */\n    _getOverlayConfig(dialogConfig) {\n        /** @type {?} */\n        const state = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation\n        });\n        if (dialogConfig.backdropClass) {\n            state.backdropClass = dialogConfig.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\n     * @private\n     * @param {?} overlay Reference to the dialog's underlying overlay.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachDialogContainer(overlay, config) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatDialogConfig, useValue: config }]\n        });\n        /** @type {?} */\n        const containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector, config.componentFactoryResolver);\n        /** @type {?} */\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created MatDialogContainer.\n     * @private\n     * @template T, R\n     * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\n     * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        /** @type {?} */\n        const dialogRef = new MatDialogRef(overlayRef, dialogContainer, config.id);\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, (/** @type {?} */ (null)), (/** @type {?} */ ({ $implicit: config.data, dialogRef }))));\n        }\n        else {\n            /** @type {?} */\n            const injector = this._createInjector(config, dialogRef, dialogContainer);\n            /** @type {?} */\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef\n            .updateSize(config.width, config.height)\n            .updatePosition(config.position);\n        return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @private\n     * @template T\n     * @param {?} config Config object that is used to construct the dialog.\n     * @param {?} dialogRef Reference to the dialog.\n     * @param {?} dialogContainer\n     * @return {?} The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n        // content are created out of the same ViewContainerRef and as such, are siblings for injector\n        // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n        // added to the injection tokens.\n        /** @type {?} */\n        const providers = [\n            { provide: MatDialogContainer, useValue: dialogContainer },\n            { provide: MAT_DIALOG_DATA, useValue: config.data },\n            { provide: MatDialogRef, useValue: dialogRef }\n        ];\n        if (config.direction &&\n            (!userInjector || !userInjector.get(Directionality, null))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() }\n            });\n        }\n        return Injector.create({ parent: userInjector || this._injector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @private\n     * @param {?} dialogRef Dialog to be removed.\n     * @return {?}\n     */\n    _removeOpenDialog(dialogRef) {\n        /** @type {?} */\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((/**\n                 * @param {?} previousValue\n                 * @param {?} element\n                 * @return {?}\n                 */\n                (previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                }));\n                this._ariaHiddenElements.clear();\n                this._afterAllClosed.next();\n            }\n        }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     * @private\n     * @return {?}\n     */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        /** @type {?} */\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            /** @type {?} */\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                /** @type {?} */\n                let sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    /**\n     * Closes all of the dialogs in an array.\n     * @private\n     * @param {?} dialogs\n     * @return {?}\n     */\n    _closeDialogs(dialogs) {\n        /** @type {?} */\n        let i = dialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            dialogs[i].close();\n        }\n    }\n}\nMatDialog.ɵfac = function MatDialog_Factory(t) { return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer)); };\nMatDialog.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MatDialog, factory: MatDialog.ɵfac });\n/** @nocollapse */\nMatDialog.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: Location, decorators: [{ type: Optional }] },\n    { type: MatDialogConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\n    { type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: OverlayContainer }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }, { type: MatDialogConfig, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DIALOG_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DIALOG_SCROLL_STRATEGY]\n            }] }, { type: MatDialog, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc3.OverlayContainer }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._openDialogsAtThisLevel;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._afterAllClosedAtThisLevel;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._afterOpenedAtThisLevel;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._ariaHiddenElements;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._scrollStrategy;\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     * @type {?}\n     */\n    MatDialog.prototype.afterAllClosed;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._overlay;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._injector;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._defaultOptions;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._parentDialog;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._overlayContainer;\n}\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @param {?=} defaultOptions Default options provided.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return Object.assign(Object.assign({}, defaultOptions), config);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-content-directives.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique IDs for dialog elements.\n * @type {?}\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    /**\n     * @param {?} dialogRef\n     * @param {?} _elementRef\n     * @param {?} _dialog\n     */\n    constructor(dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /**\n         * Default to \"button\" to prevents accidental form submits.\n         */\n        this.type = 'button';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = (/** @type {?} */ (getClosestDialog(this._elementRef, this._dialog.openDialogs)));\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n}\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) { return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogClose.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogClose, selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]], hostVars: 2, hostBindings: function MatDialogClose_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler() { return ctx.dialogRef.close(ctx.dialogResult); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    } }, inputs: { type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, exportAs: [\"matDialogClose\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nMatDialogClose.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogClose.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    type: [{ type: Input }],\n    dialogResult: [{ type: Input, args: ['mat-dialog-close',] }],\n    _matDialogClose: [{ type: Input, args: ['matDialogClose',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-close], [matDialogClose]',\n                exportAs: 'matDialogClose',\n                host: {\n                    '(click)': 'dialogRef.close(dialogResult)',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.type]': 'type'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { type: [{\n            type: Input\n        }], dialogResult: [{\n            type: Input,\n            args: ['mat-dialog-close']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _matDialogClose: [{\n            type: Input,\n            args: ['matDialogClose']\n        }] }); })();\nif (false) {\n    /**\n     * Screenreader label for the button.\n     * @type {?}\n     */\n    MatDialogClose.prototype.ariaLabel;\n    /**\n     * Default to \"button\" to prevents accidental form submits.\n     * @type {?}\n     */\n    MatDialogClose.prototype.type;\n    /**\n     * Dialog close input.\n     * @type {?}\n     */\n    MatDialogClose.prototype.dialogResult;\n    /** @type {?} */\n    MatDialogClose.prototype._matDialogClose;\n    /** @type {?} */\n    MatDialogClose.prototype.dialogRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogClose.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogClose.prototype._dialog;\n}\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    /**\n     * @param {?} _dialogRef\n     * @param {?} _elementRef\n     * @param {?} _dialog\n     */\n    constructor(_dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = (/** @type {?} */ (getClosestDialog(this._elementRef, this._dialog.openDialogs)));\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            }));\n        }\n    }\n}\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) { return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogTitle, selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]], hostAttrs: [1, \"mat-dialog-title\"], hostVars: 1, hostBindings: function MatDialogTitle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    } }, inputs: { id: \"id\" }, exportAs: [\"matDialogTitle\"] });\n/** @nocollapse */\nMatDialogTitle.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogTitle.propDecorators = {\n    id: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-title], [matDialogTitle]',\n                exportAs: 'matDialogTitle',\n                host: {\n                    'class': 'mat-dialog-title',\n                    '[id]': 'id'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { id: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatDialogTitle.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogTitle.prototype._dialogRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogTitle.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogTitle.prototype._dialog;\n}\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) { return new (t || MatDialogContent)(); };\nMatDialogContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogContent, selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]], hostAttrs: [1, \"mat-dialog-content\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                host: { 'class': 'mat-dialog-content' }\n            }]\n    }], null, null); })();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n}\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) { return new (t || MatDialogActions)(); };\nMatDialogActions.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogActions, selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]], hostAttrs: [1, \"mat-dialog-actions\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                host: { 'class': 'mat-dialog-actions' }\n            }]\n    }], null, null); })();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param {?} element Element relative to which to look for a dialog.\n * @param {?} openDialogs References to the currently-open dialogs.\n * @return {?}\n */\nfunction getClosestDialog(element, openDialogs) {\n    /** @type {?} */\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find((/**\n     * @param {?} dialog\n     * @return {?}\n     */\n    dialog => dialog.id === (/** @type {?} */ (parent)).id)) : null;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatDialogModule {\n}\nMatDialogModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatDialogModule });\nMatDialogModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatDialogModule_Factory(t) { return new (t || MatDialogModule)(); }, providers: [\n        MatDialog,\n        MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[\n            OverlayModule,\n            PortalModule,\n            MatCommonModule,\n        ],\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, { declarations: function () { return [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogActions,\n        MatDialogContent]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        MatCommonModule]; }, exports: function () { return [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogContent,\n        MatDialogActions,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogContent,\n                    MatDialogActions,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogActions,\n                    MatDialogContent,\n                ],\n                providers: [\n                    MatDialog,\n                    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n                ],\n                entryComponents: [MatDialogContainer]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };\n\n//# sourceMappingURL=dialog.js.map","import { Component, OnInit, OnDestroy  } from '@angular/core';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { Subscription } from 'rxjs';\nimport { Board } from '../board.model';\nimport { BoardService } from '../board.service';\n\nimport { MatDialog } from '@angular/material/dialog';\nimport { BoardDialogComponent } from '../dialogs/board-dialog.component';\n\n\n\n@Component({\n  selector: 'app-board-list',\n  templateUrl: './board-list.component.html',\n  styleUrls: ['./board-list.component.scss']\n})\nexport class BoardListComponent implements OnInit, OnDestroy {\n  boards: Board[];\n  sub: Subscription;\n\n  constructor(public boardService: BoardService, public dialog: MatDialog) {}\n\n  ngOnInit() {\n    this.sub = this.boardService\n      .getUserBoards()\n      .subscribe(boards => (this.boards = boards));\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n\n  drop(event: CdkDragDrop<string[]>) {\n    moveItemInArray(this.boards, event.previousIndex, event.currentIndex);\n    this.boardService.sortBoards(this.boards);\n  }\n  openBoardDialog(): void {\n    const dialogRef = this.dialog.open(BoardDialogComponent, {\n      width: '400px',\n      data: {  }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.boardService.createBoard({\n          title: result,\n          priority: this.boards.length\n        });\n      }\n    });\n  }\n}\n\n\n","<div cdkDropList cdkDropListOrientation=\"horizontal\" class=\"boards\" (cdkDropListDropped)=\"drop($event)\">\n    <app-board cdkDrag *ngFor=\"let board of boards\" [board]=\"board\">\n        <mat-icon cdkDragHandle class=\"handle\">drag_indicator</mat-icon>\n    </app-board>\n\n    <div class=\"board-button\">\n        <button mat-raised-button color=\"accent\" cdkDragDisabled (click)=\"openBoardDialog()\">\n      New Board\n    </button>\n    </div>\n</div>","import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport * as firebase from 'firebase/app';\nimport { switchMap, map } from 'rxjs/operators';\nimport { Board, Task } from './board.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BoardService {\n  constructor(private afAuth: AngularFireAuth, private db: AngularFirestore) {}\n\n  /**\n   * Creates a new board for the current user\n   */\n  async createBoard(data: Board) {\n    const user = await this.afAuth.currentUser;\n    return this.db.collection('boards').add({\n      ...data,\n      uid: user.uid,\n      tasks: [{ description: 'Hello!', label: 'yellow' }]\n    });\n  }\n\n  /**\n   * Delete board\n   */\n  deleteBoard(boardId: string) {\n    return this.db\n      .collection('boards')\n      .doc(boardId)\n      .delete();\n  }\n\n  /**\n   * Updates the tasks on board\n   */\n  updateTasks(boardId: string, tasks: Task[]) {\n    return this.db\n      .collection('boards')\n      .doc(boardId)\n      .update({ tasks });\n  }\n\n  /**\n   * Remove a specifc task from the board\n   */\n  removeTask(boardId: string, task: Task) {\n    return this.db\n      .collection('boards')\n      .doc(boardId)\n      .update({\n        tasks: firebase.firestore.FieldValue.arrayRemove(task)\n      });\n  }\n\n  /**\n   * Get all boards owned by current user\n   */\n  getUserBoards() {\n    return this.afAuth.authState.pipe(\n      switchMap(user => {\n        if (user) {\n          return this.db\n            .collection<Board>('boards', ref =>\n              ref.where('uid', '==', user.uid).orderBy('priority')\n            )\n            .valueChanges({ idField: 'id' });\n        } else {\n          return [];\n        }\n      })\n    );\n  }\n\n  /**\n   * Run a batch write to change the priority of each board for sorting\n   */\n  sortBoards(boards: Board[]) {\n    const db = firebase.firestore();\n    const batch = db.batch();\n    const refs = boards.map(b => db.collection('boards').doc(b.id));\n    refs.forEach((ref, idx) => batch.update(ref, { priority: idx }));\n    batch.commit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { BoardService } from '../board.service';\n\nimport { Task } from '../board.model';\nimport { MatDialog } from '@angular/material/dialog';\nimport { TaskDialogComponent } from '../dialogs/task-dialog.component';\n\n@Component({\n  selector: 'app-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.scss']\n})\nexport class BoardComponent {\n  @Input() board;\n\n  constructor(private boardService: BoardService, private dialog: MatDialog) {}\n\n  taskDrop(event: CdkDragDrop<string[]>) {\n    moveItemInArray(this.board.tasks, event.previousIndex, event.currentIndex);\n    this.boardService.updateTasks(this.board.id, this.board.tasks);\n  }\n\n\n  openDialog(task?: Task, idx?: number): void {\n    const newTask = { label: 'purple' };\n    const dialogRef = this.dialog.open(TaskDialogComponent, {\n      width: '500px',\n      data: task\n        ? { task: { ...task }, isNew: false, boardId: this.board.id, idx }\n        : { task: newTask, isNew: true }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        if (result.isNew) {\n          this.boardService.updateTasks(this.board.id, [\n            ...this.board.tasks,\n            result.task\n          ]);\n        } else {\n          const update = this.board.tasks;\n          update.splice(result.idx, 1, result.task);\n          this.boardService.updateTasks(this.board.id, this.board.tasks);\n        }\n      }\n    });\n  }\n\n  handleDelete() {\n    this.boardService.deleteBoard(this.board.id);\n  }\n\n}","<mat-card class=\"outer-card\">\n    <mat-card-header>\n        <!-- Slot for the handle -->\n        <ng-content></ng-content>\n        <mat-card-title>\n            {{ board.title }}\n        </mat-card-title>\n        <mat-card-subtitle>\n            {{ board.id }}\n        </mat-card-subtitle>\n    </mat-card-header>\n\n    <div class=\"tasks\" cdkDropList cdkDropListOrientation=\"vertical\" (cdkDropListDropped)=\"taskDrop($event)\">\n        <div class=\"inner-card\" cdkDrag *ngFor=\"let task of board.tasks; let i = index\" (click)=\"openDialog(task, i)\">\n            <mat-card [ngClass]=\"task.label\"> {{ task.description }} </mat-card>\n        </div>\n\n        <button mat-stroked-button (click)=\"openDialog()\">\n        <mat-icon>add</mat-icon>\n      </button>\n\n        <app-delete-button (delete)=\"handleDelete()\"></app-delete-button>\n    </div>\n</mat-card>","import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-board-dialog',\n  template: `\n    <h1 mat-dialog-title>Board</h1>\n    <div mat-dialog-content>\n    <p>What shall we call this board?</p>\n      <mat-form-field>\n        <input placeholder=\"title\" matInput [(ngModel)]=\"data.title\" />\n      </mat-form-field>\n    </div>\n    <div mat-dialog-actions>\n      <button mat-button (click)=\"onNoClick()\">Cancel</button>\n      <button mat-button [mat-dialog-close]=\"data.title\" cdkFocusInitial>\n        Create\n      </button>\n    </div>\n  `,\n  styles: []\n})\nexport class BoardDialogComponent {\n  constructor(\n    public dialogRef: MatDialogRef<BoardDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {}\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BoardService } from '../board.service';\n\n@Component({\n  selector: 'app-task-dialog',\n  template: `\n  <h1 mat-dialog-title>Task</h1>\n  <div mat-dialog-content class=\"content\">\n    <mat-form-field>\n      <textarea\n        placeholder=\"Task description\"\n        matInput\n        [(ngModel)]=\"data.task.description\"\n      ></textarea>\n    </mat-form-field>\n    <br />\n    <mat-button-toggle-group\n      #group=\"matButtonToggleGroup\"\n      [(ngModel)]=\"data.task.label\"\n    >\n      <mat-button-toggle *ngFor=\"let opt of labelOptions\" [value]=\"opt\">\n        <mat-icon [ngClass]=\"opt\">{{\n          opt === 'gray' ? 'check_circle' : 'lens'\n        }}</mat-icon>\n      </mat-button-toggle>\n    </mat-button-toggle-group>\n  </div>\n  <div mat-dialog-actions>\n    <button mat-button [mat-dialog-close]=\"data\" cdkFocusInitial>\n      {{ data.isNew ? 'Add Task' : 'Update Task' }}\n    </button>\n\n  </div>\n  `,\n  styleUrls: ['./dialog.css']\n})\nexport class TaskDialogComponent {\n\n  labelOptions = ['purple', 'blue', 'green', 'yellow', 'red', 'gray'];\n\n  constructor(\n    public dialogRef: MatDialogRef<TaskDialogComponent>,\n    private ps: BoardService,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {}\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  handleTaskDelete() {\n    this.ps.removeTask(this.data.boardId, this.data.task);\n    this.dialogRef.close();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { BoardListComponent } from './board-list/board-list.component';\n\n\nconst routes: Routes = [{path:'',component: BoardListComponent}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class KanbanRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { KanbanRoutingModule } from './kanban-routing.module';\nimport { FormsModule } from '@angular/forms';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MaterialModule } from '../material/material.module';\nimport { BoardListComponent } from './board-list/board-list.component';\nimport { BoardComponent } from './board/board.component';\nimport { BoardDialogComponent } from './dialogs/board-dialog.component';\nimport { TaskDialogComponent } from './dialogs/task-dialog.component';\n\n\n@NgModule({\n  declarations: [BoardListComponent, BoardComponent, BoardDialogComponent, TaskDialogComponent],\n  imports: [\n    CommonModule,\n    KanbanRoutingModule,\n    MaterialModule,\n    FormsModule,\n    DragDropModule,\n    MatDialogModule,\n    MatButtonToggleModule,\n  ],\n  entryComponents: [BoardDialogComponent, TaskDialogComponent]\n})\nexport class KanbanModule { }\n"]}