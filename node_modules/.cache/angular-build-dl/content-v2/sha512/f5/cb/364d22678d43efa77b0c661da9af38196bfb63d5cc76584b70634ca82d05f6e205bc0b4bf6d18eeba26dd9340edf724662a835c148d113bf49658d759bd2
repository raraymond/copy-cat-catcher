{"version":3,"sources":["webpack:///src/app/user/email-login/email-login.component.html","webpack:///src/app/user/email-login/email-login.component.ts","webpack:///src/app/user/google-signin.directive.ts","webpack:///src/app/user/login-page/login-page.component.ts","webpack:///src/app/user/login-page/login-page.component.html","webpack:///src/app/user/user-routing.module.ts","webpack:///src/app/user/user.module.ts"],"names":["EmailLoginComponent","authAf","fb","auth","type","loading","form","group","email","required","password","minLength","passwordConfirm","val","value","isLogin","signInWithEmailAndPassword","isSignup","createUserWithEmailAndPassword","isPasswordReset","sendPasswordResetEmail","serverMessage","get","onSubmit","selector","templateUrl","styleUrls","GoogleSigninDirective","afAuth","signInWithPopup","GoogleAuthProvider","LoginPageComponent","routes","path","component","UserRoutingModule","forChild","imports","exports","UserModule","declarations"],"mappings":"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","file":"user-user-module-es5.js","sourcesContent":["<mat-card>\n    <div *ngIf=\"isSignup\">\n        <h3>Create Account</h3>\n\n        <button mat-stroked-button (click)=\"changeType('login')\">\n      Returning user?\n    </button>\n    </div>\n\n    <div *ngIf=\"isLogin\">\n        <h3>Sign In</h3>\n        <button size=\"small\" mat-stroked-button (click)=\"changeType('signup')\">\n      New user?\n    </button>\n    </div>\n\n    <div *ngIf=\"isPasswordReset\">\n        <h3>Reset Password</h3>\n        <button size=\"small\" mat-button (click)=\"changeType('login')\">Back</button>\n    </div>\n\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n        <mat-form-field [color]=\"email.valid && 'accent'\">\n            <input matInput formControlName=\"email\" type=\"email\" placeholder=\"Email\" autocomplete=\"off\" />\n\n            <mat-error *ngIf=\"email.invalid && email.dirty\">\n                You must enter a valid email address\n            </mat-error>\n        </mat-form-field>\n\n        <mat-form-field [color]=\"email.valid && 'accent'\" *ngIf=\"!isPasswordReset\">\n            <input matInput formControlName=\"password\" type=\"password\" placeholder=\"Password\" autocomplete=\"off\" />\n\n            <mat-error *ngIf=\"password.invalid && password.dirty\">\n                Password must be at least 6 characters long\n            </mat-error>\n        </mat-form-field>\n\n        <mat-form-field [color]=\"passwordDoesMatch ? 'accent' : 'warn'\" *ngIf=\"isSignup\">\n            <input matInput formControlName=\"passwordConfirm\" type=\"password\" placeholder=\"Confirm password\" autocomplete=\"off\" />\n\n            <mat-error *ngIf=\"passwordConfirm.dirty && !passwordDoesMatch\">\n                Password does not match\n            </mat-error>\n        </mat-form-field>\n\n        <mat-error class=\"server-error\">{{ serverMessage }}</mat-error>\n\n        <button *ngIf=\"isPasswordReset\" mat-stroked-button type=\"submit\" [disabled]=\"loading\">\n      Send Reset Email\n    </button>\n\n        <button *ngIf=\"!isPasswordReset\" mat-raised-button color=\"accent\" type=\"submit\" [disabled]=\"form.invalid || !passwordDoesMatch || loading\">\n      Submit\n    </button>\n    </form>\n\n    <button mat-button *ngIf=\"isLogin && !isPasswordReset\" (click)=\"changeType('reset')\">\n    Forgot password?\n  </button>\n</mat-card>","import { Component, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-email-login',\n  templateUrl: './email-login.component.html',\n  styleUrls: ['./email-login.component.scss']\n})\nexport class EmailLoginComponent implements OnInit {\n  form: FormGroup;\n\n  type: 'login' | 'signup' | 'reset' = 'signup';\n  loading = false;\n\n  serverMessage: string;\n\n  constructor(private authAf: AngularFireAuth, private fb: FormBuilder, private auth: AuthService) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: [\n        '',\n        [Validators.minLength(6), Validators.required]\n      ],\n      passwordConfirm: ['', []]\n    });\n  }\n\n  changeType(val) {\n    this.type = val;\n  }\n\n  get isLogin() {\n    return this.type === 'login';\n  }\n\n  get isSignup() {\n    return this.type === 'signup';\n  }\n\n  get isPasswordReset() {\n    return this.type === 'reset';\n  }\n\n  get email() {\n    return this.form.get('email');\n  }\n  get password() {\n    return this.form.get('password');\n  }\n\n  get passwordConfirm() {\n    return this.form.get('passwordConfirm');\n  }\n\n  get passwordDoesMatch() {\n    if (this.type !== 'signup') {\n      return true;\n    } else {\n      return this.password.value === this.passwordConfirm.value;\n    }\n  }\n\n  async onSubmit() {\n    this.loading = true;\n\n    const email = this.email.value;\n    const password = this.password.value;\n\n    try {\n      if (this.isLogin) {\n        await this.auth.signInWithEmailAndPassword(email, password);\n      }\n      if (this.isSignup) {\n        await this.auth.createUserWithEmailAndPassword(email, password);\n      }\n      if (this.isPasswordReset) {\n        await this.auth.sendPasswordResetEmail(email);\n        this.serverMessage = 'Check your email';\n      }\n    } catch (err) {\n      this.serverMessage = err;\n    }\n\n    this.loading = false;\n  }\n}\n","import { Directive, HostListener } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport * as firebase from 'firebase/app';\n\n@Directive({\n  selector: '[appGoogleSignin]'\n})\nexport class GoogleSigninDirective {\n  constructor(private afAuth: AngularFireAuth) {}\n\n  @HostListener('click')\n  onclick() {\n    this.afAuth.signInWithPopup(new firebase.auth.GoogleAuthProvider());\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport {AuthService} from '../services/auth.service'\n\n\n\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.css']\n})\nexport class LoginPageComponent implements OnInit {\n\n  constructor(public afAuth: AngularFireAuth, public auth: AuthService) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<!-- <h1>Base</h1>\n\n<p>\n    <a routerLink=\"/secret\">Secret</a>\n</p>\n\n<div *ngIf=\"auth.user$ | async as user; else login\">\n    <pre>\n    {{ user | json }}\n  </pre>\n\n    <hr>\n    <button class=\"button\" (click)=\"auth.signOut()\">Sign Out</button>\n\n</div>\n\n<ng-template #login>\n    <button class=\"button\" (click)=\"auth.googleSignin()\">Login with Google</button>\n</ng-template> -->\n<main>\n    <div *ngIf=\"!(auth.user$  | async)\">\n        <h1>Login</h1>\n\n        <button mat-raised-button (click)=\"auth.googleSignin()\">\n      <img src=\" /assets/google-logo.svg \" /> Login with Google\n    </button>\n\n        <h5>OR</h5>\n\n        <app-email-login></app-email-login>\n\n    </div>\n\n    <div *ngIf=\"auth.user$ | async as user \" class=\"logout \">\n        <p>\n            Logged in as <strong>{{ user.email }}</strong>\n        </p>\n\n        <button mat-stroked-button (click)=\"auth.signOut() \">Logout</button>\n    </div>\n</main>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {MaterialModule} from '../material/material.module'\nimport { LoginPageComponent } from './login-page/login-page.component';\n\n\nconst routes: Routes = [{path: '', component: LoginPageComponent}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes), MaterialModule],\n  exports: [RouterModule]\n})\nexport class UserRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { UserRoutingModule } from './user-routing.module';\nimport { LoginPageComponent } from './login-page/login-page.component';\nimport { GoogleSigninDirective } from './google-signin.directive';\nimport { EmailLoginComponent } from './email-login/email-login.component';\nimport { MaterialModule } from '../material/material.module';\n\n\n@NgModule({\n  declarations: [LoginPageComponent, GoogleSigninDirective, EmailLoginComponent],\n  imports: [\n    CommonModule,\n    UserRoutingModule, MaterialModule,ReactiveFormsModule\n  ]\n})\nexport class UserModule { }\n"]}